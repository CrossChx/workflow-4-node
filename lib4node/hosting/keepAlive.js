"use strict";
var _ = require("lodash");
var Promise = require("bluebird");
function KeepAlive(repeatFunc, repeatPeriod) {
  if (!_.isFunction(repeatFunc))
    throw new TypeError("Function argument expected.");
  this._repeatFunc = repeatFunc;
  this._repeatPeriod = repeatPeriod;
  this._isRunning = true;
  this._toId = null;
  var self = this;
  process.nextTick(function() {
    self._start.call(self);
  });
}
KeepAlive.prototype._start = function() {
  var self = this;
  self._toId = setTimeout(function() {
    if (self._isRunning) {
      Promise.resolve(self._repeatFunc()).catch(function(e) {
        console.error("Keep alive failed:\n" + e.stack);
      }).finally(function() {
        if (self._isRunning)
          self._start();
      });
    }
  }, self._repeatPeriod);
};
KeepAlive.prototype.end = function() {
  if (!this._isRunning)
    throw new Error("Keep alive has already ended.");
  this._isRunning = false;
  if (this._toId)
    clearTimeout(this._toId);
};
module.exports = KeepAlive;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImtlZXBBbGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLEFBQUksRUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQ3pCLEFBQUksRUFBQSxDQUFBLE9BQU0sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxDQUFDO0FBRWpDLE9BQVMsVUFBUSxDQUFFLFVBQVMsQ0FBRyxDQUFBLFlBQVcsQ0FBRztBQUN6QyxLQUFJLENBQUMsQ0FBQSxXQUFXLEFBQUMsQ0FBQyxVQUFTLENBQUM7QUFBRyxRQUFNLElBQUksVUFBUSxBQUFDLENBQUMsNkJBQTRCLENBQUMsQ0FBQztBQUFBLEFBQ2pGLEtBQUcsWUFBWSxFQUFJLFdBQVMsQ0FBQztBQUM3QixLQUFHLGNBQWMsRUFBSSxhQUFXLENBQUM7QUFDakMsS0FBRyxXQUFXLEVBQUksS0FBRyxDQUFDO0FBQ3RCLEtBQUcsTUFBTSxFQUFJLEtBQUcsQ0FBQztBQUNqQixBQUFJLElBQUEsQ0FBQSxJQUFHLEVBQUksS0FBRyxDQUFDO0FBQ2YsUUFBTSxTQUFTLEFBQUMsQ0FBQyxTQUFVLEFBQUQsQ0FBRztBQUN6QixPQUFHLE9BQU8sS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7RUFDMUIsQ0FBQyxDQUFDO0FBQ047QUFBQSxBQUVBLFFBQVEsVUFBVSxPQUFPLEVBQUksVUFBVSxBQUFELENBQUc7QUFDckMsQUFBSSxJQUFBLENBQUEsSUFBRyxFQUFJLEtBQUcsQ0FBQztBQUNmLEtBQUcsTUFBTSxFQUFJLENBQUEsVUFBUyxBQUFDLENBQ25CLFNBQVUsQUFBRCxDQUFHO0FBQ1IsT0FBSSxJQUFHLFdBQVcsQ0FBRztBQUNqQixZQUFNLFFBQVEsQUFBQyxDQUFDLElBQUcsWUFBWSxBQUFDLEVBQUMsQ0FBQyxNQUN6QixBQUFDLENBQUMsU0FBVSxDQUFBLENBQUc7QUFDaEIsY0FBTSxNQUFNLEFBQUMsQ0FBQyxzQkFBcUIsRUFBSSxDQUFBLENBQUEsTUFBTSxDQUFDLENBQUM7TUFDbkQsQ0FBQyxRQUNNLEFBQUMsQ0FBQyxTQUFVLEFBQUQsQ0FBRztBQUNqQixXQUFJLElBQUcsV0FBVztBQUFHLGFBQUcsT0FBTyxBQUFDLEVBQUMsQ0FBQztBQUFBLE1BQ3RDLENBQUMsQ0FBQztJQUNWO0FBQUEsRUFDSixDQUNBLENBQUEsSUFBRyxjQUFjLENBQUMsQ0FBQztBQUMzQixDQUFBO0FBRUEsUUFBUSxVQUFVLElBQUksRUFBSSxVQUFVLEFBQUQsQ0FBRztBQUNsQyxLQUFJLENBQUMsSUFBRyxXQUFXO0FBQUcsUUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLCtCQUE4QixDQUFDLENBQUM7QUFBQSxBQUV0RSxLQUFHLFdBQVcsRUFBSSxNQUFJLENBQUM7QUFDdkIsS0FBSSxJQUFHLE1BQU07QUFBRyxlQUFXLEFBQUMsQ0FBQyxJQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQUEsQUFDNUMsQ0FBQTtBQUVBLEtBQUssUUFBUSxFQUFJLFVBQVEsQ0FBQztBQUFBIiwiZmlsZSI6Imhvc3Rpbmcva2VlcEFsaXZlLmpzIiwic291cmNlUm9vdCI6IkM6L0dJVC93b3JrZmxvdy00LW5vZGUvbGliLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcclxudmFyIFByb21pc2UgPSByZXF1aXJlKFwiYmx1ZWJpcmRcIik7XHJcblxyXG5mdW5jdGlvbiBLZWVwQWxpdmUocmVwZWF0RnVuYywgcmVwZWF0UGVyaW9kKSB7XHJcbiAgICBpZiAoIV8uaXNGdW5jdGlvbihyZXBlYXRGdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGFyZ3VtZW50IGV4cGVjdGVkLlwiKTtcclxuICAgIHRoaXMuX3JlcGVhdEZ1bmMgPSByZXBlYXRGdW5jO1xyXG4gICAgdGhpcy5fcmVwZWF0UGVyaW9kID0gcmVwZWF0UGVyaW9kO1xyXG4gICAgdGhpcy5faXNSdW5uaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMuX3RvSWQgPSBudWxsO1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi5fc3RhcnQuY2FsbChzZWxmKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5LZWVwQWxpdmUucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuX3RvSWQgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYuX2lzUnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHNlbGYuX3JlcGVhdEZ1bmMoKSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIktlZXAgYWxpdmUgZmFpbGVkOlxcblwiICsgZS5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLl9pc1J1bm5pbmcpIHNlbGYuX3N0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGYuX3JlcGVhdFBlcmlvZCk7XHJcbn1cclxuXHJcbktlZXBBbGl2ZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCF0aGlzLl9pc1J1bm5pbmcpIHRocm93IG5ldyBFcnJvcihcIktlZXAgYWxpdmUgaGFzIGFscmVhZHkgZW5kZWQuXCIpO1xyXG5cclxuICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgaWYgKHRoaXMuX3RvSWQpIGNsZWFyVGltZW91dCh0aGlzLl90b0lkKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBLZWVwQWxpdmU7Il19
