"use strict";
var StrMap = require("backpack-node").collections.StrMap;
var Guid = require("guid");
require('date-utils');
var specStrings = require("../common/specStrings");
var InstIdPaths = require("./instIdPaths");
var is = require("../common/is");
var fast = require("fast.js");
function MemoryPersistence(log) {
  this._instanceData = new StrMap();
  this._locksById = new StrMap();
  this._locksByName = new StrMap();
  this._log = log === true;
}
MemoryPersistence.prototype.enterLock = function(lockName, inLockTimeoutMs) {
  if (this._log)
    console.log("enterLock(" + lockName + ", " + inLockTimeoutMs + ");\n");
  var now = new Date();
  var cLock = this._locksByName.get(lockName);
  if (is.undefined(cLock) || cLock.heldTo.compareTo(now) === -1) {
    var lockInfo = {
      id: Guid.create().toString(),
      name: lockName,
      heldTo: new Date().addMilliseconds(inLockTimeoutMs)
    };
    this._locksById.set(lockInfo.id, lockInfo);
    this._locksByName.set(lockInfo.name, lockInfo);
    return lockInfo;
  }
  return null;
};
MemoryPersistence.prototype.renewLock = function(lockId, inLockTimeoutMs) {
  if (this._log)
    console.log("renewLock(" + lockId + ", " + inLockTimeoutMs + ");\n");
  var cLock = this._getLockById(lockId);
  cLock.heldTo = new Date().addMilliseconds(inLockTimeoutMs);
};
MemoryPersistence.prototype.exitLock = function(lockId) {
  if (this._log)
    console.log("exitLock(" + lockId + ");\n");
  var cLock = this._getLockById(lockId);
  this._locksByName.remove(cLock.name);
  this._locksById.remove(cLock.id);
};
MemoryPersistence.prototype._getLockById = function(lockId) {
  var cLock = this._locksById.get(lockId);
  var now = new Date();
  if (!cLock || now.compareTo(cLock.heldTo) > 0)
    throw new Error("Lock by id '" + lockId + "' doesn't exists.");
  return cLock;
};
MemoryPersistence.prototype.isRunning = function(workflowName, instanceId) {
  if (this._log)
    console.log("isRunning(" + workflowName + ", " + instanceId + ");\n");
  return this._instanceData.containsKey(specStrings.hosting.doubleKeys(workflowName, instanceId));
};
MemoryPersistence.prototype.persistState = function(state) {
  if (this._log)
    console.log("persistState(" + state.workflowName + ", " + state.instanceId + ");\n");
  this._instanceData.set(specStrings.hosting.doubleKeys(state.workflowName, state.instanceId), state);
};
MemoryPersistence.prototype.getRunningInstanceIdHeader = function(workflowName, instanceId) {
  if (this._log)
    console.log("getRunningInstanceIdHeader(" + workflowName + ", " + instanceId + ");\n");
  var state = this._loadState(workflowName, instanceId);
  return {
    updatedOn: state.updatedOn,
    workflowVersion: state.workflowVersion
  };
};
MemoryPersistence.prototype.loadState = function(workflowName, instanceId) {
  if (this._log)
    console.log("loadState(" + workflowName + ", " + instanceId + ");\n");
  return this._loadState(workflowName, instanceId);
};
MemoryPersistence.prototype.removeState = function(workflowName, instanceId) {
  if (this._log)
    console.log("removeState(" + workflowName + ", " + instanceId + ");\n");
  this._instanceData.remove(specStrings.hosting.doubleKeys(workflowName, instanceId));
};
MemoryPersistence.prototype._loadState = function(workflowName, instanceId) {
  var state = this._instanceData.get(specStrings.hosting.doubleKeys(workflowName, instanceId));
  if (!state)
    throw new Error("Instance data of workflow '" + workflowName + "' by id '" + instanceId + "' is not found.");
  return state;
};
MemoryPersistence.prototype.loadPromotedProperties = function(workflowName, instanceId) {
  if (this._log)
    console.log("loadPromotedProperties(" + workflowName + ", " + instanceId + ");\n");
  var state = this._instanceData.get(specStrings.hosting.doubleKeys(workflowName, instanceId));
  return state ? state.promotedProperties : null;
};
module.exports = MemoryPersistence;
//# sourceMappingURL=data:application/json;base64,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QUcsQ0FBQSxDQUFJLFdBQVMsQ0FBQSxDQUFJLE9BQUssQ0FBQyxDQUFDO0FBQUEsQUFFN0YsSUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLElBQUcsY0FBYyxJQUFJLEFBQUMsQ0FBQyxXQUFVLFFBQVEsV0FBVyxBQUFDLENBQUMsWUFBVyxDQUFHLFdBQVMsQ0FBQyxDQUFDLENBQUM7QUFDNUYsT0FBTyxDQUFBLEtBQUksRUFBSSxDQUFBLEtBQUksbUJBQW1CLEVBQUksS0FBRyxDQUFDO0FBQ2xELENBQUE7QUFFQSxLQUFLLFFBQVEsRUFBSSxrQkFBZ0IsQ0FBQztBQUFBIiwiZmlsZSI6Imhvc3RpbmcvbWVtb3J5UGVyc2lzdGVuY2UuanMiLCJzb3VyY2VSb290IjoiQzovR0lUL21vbmdvLWNydW5jaC9kZXBzL3dvcmtmbG93LTQtbm9kZS9saWIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFN0ck1hcCA9IHJlcXVpcmUoXCJiYWNrcGFjay1ub2RlXCIpLmNvbGxlY3Rpb25zLlN0ck1hcDtcclxudmFyIEd1aWQgPSByZXF1aXJlKFwiZ3VpZFwiKTtcclxucmVxdWlyZSgnZGF0ZS11dGlscycpO1xyXG52YXIgc3BlY1N0cmluZ3MgPSByZXF1aXJlKFwiLi4vY29tbW9uL3NwZWNTdHJpbmdzXCIpO1xyXG52YXIgSW5zdElkUGF0aHMgPSByZXF1aXJlKFwiLi9pbnN0SWRQYXRoc1wiKTtcclxudmFyIGlzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pc1wiKTtcclxudmFyIGZhc3QgPSByZXF1aXJlKFwiZmFzdC5qc1wiKTtcclxuXHJcbmZ1bmN0aW9uIE1lbW9yeVBlcnNpc3RlbmNlKGxvZykge1xyXG4gICAgdGhpcy5faW5zdGFuY2VEYXRhID0gbmV3IFN0ck1hcCgpO1xyXG4gICAgdGhpcy5fbG9ja3NCeUlkID0gbmV3IFN0ck1hcCgpO1xyXG4gICAgdGhpcy5fbG9ja3NCeU5hbWUgPSBuZXcgU3RyTWFwKCk7XHJcbiAgICB0aGlzLl9sb2cgPSBsb2cgPT09IHRydWU7XHJcbn1cclxuXHJcbk1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5lbnRlckxvY2sgPSBmdW5jdGlvbiAobG9ja05hbWUsIGluTG9ja1RpbWVvdXRNcykge1xyXG4gICAgaWYgKHRoaXMuX2xvZykgY29uc29sZS5sb2coXCJlbnRlckxvY2soXCIgKyBsb2NrTmFtZSArIFwiLCBcIiArIGluTG9ja1RpbWVvdXRNcyArIFwiKTtcXG5cIik7XHJcblxyXG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICB2YXIgY0xvY2sgPSB0aGlzLl9sb2Nrc0J5TmFtZS5nZXQobG9ja05hbWUpO1xyXG4gICAgaWYgKGlzLnVuZGVmaW5lZChjTG9jaykgfHwgY0xvY2suaGVsZFRvLmNvbXBhcmVUbyhub3cpID09PSAtMSkge1xyXG4gICAgICAgIHZhciBsb2NrSW5mbyA9IHtcclxuICAgICAgICAgICAgaWQ6IEd1aWQuY3JlYXRlKCkudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgbmFtZTogbG9ja05hbWUsXHJcbiAgICAgICAgICAgIGhlbGRUbzogbmV3IERhdGUoKS5hZGRNaWxsaXNlY29uZHMoaW5Mb2NrVGltZW91dE1zKVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX2xvY2tzQnlJZC5zZXQobG9ja0luZm8uaWQsIGxvY2tJbmZvKTtcclxuICAgICAgICB0aGlzLl9sb2Nrc0J5TmFtZS5zZXQobG9ja0luZm8ubmFtZSwgbG9ja0luZm8pO1xyXG5cclxuICAgICAgICByZXR1cm4gbG9ja0luZm87XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLnJlbmV3TG9jayA9IGZ1bmN0aW9uIChsb2NrSWQsIGluTG9ja1RpbWVvdXRNcykge1xyXG4gICAgaWYgKHRoaXMuX2xvZykgY29uc29sZS5sb2coXCJyZW5ld0xvY2soXCIgKyBsb2NrSWQgKyBcIiwgXCIgKyBpbkxvY2tUaW1lb3V0TXMgKyBcIik7XFxuXCIpO1xyXG5cclxuICAgIHZhciBjTG9jayA9IHRoaXMuX2dldExvY2tCeUlkKGxvY2tJZCk7XHJcbiAgICBjTG9jay5oZWxkVG8gPSBuZXcgRGF0ZSgpLmFkZE1pbGxpc2Vjb25kcyhpbkxvY2tUaW1lb3V0TXMpO1xyXG59XHJcblxyXG5NZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUuZXhpdExvY2sgPSBmdW5jdGlvbiAobG9ja0lkKSB7XHJcbiAgICBpZiAodGhpcy5fbG9nKSBjb25zb2xlLmxvZyhcImV4aXRMb2NrKFwiICsgbG9ja0lkICsgXCIpO1xcblwiKTtcclxuXHJcbiAgICB2YXIgY0xvY2sgPSB0aGlzLl9nZXRMb2NrQnlJZChsb2NrSWQpO1xyXG4gICAgdGhpcy5fbG9ja3NCeU5hbWUucmVtb3ZlKGNMb2NrLm5hbWUpO1xyXG4gICAgdGhpcy5fbG9ja3NCeUlkLnJlbW92ZShjTG9jay5pZCk7XHJcbn1cclxuXHJcbk1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5fZ2V0TG9ja0J5SWQgPSBmdW5jdGlvbiAobG9ja0lkKSB7XHJcbiAgICB2YXIgY0xvY2sgPSB0aGlzLl9sb2Nrc0J5SWQuZ2V0KGxvY2tJZCk7XHJcbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcclxuICAgIGlmICghY0xvY2sgfHwgbm93LmNvbXBhcmVUbyhjTG9jay5oZWxkVG8pID4gMCkgdGhyb3cgbmV3IEVycm9yKFwiTG9jayBieSBpZCAnXCIgKyBsb2NrSWQgKyBcIicgZG9lc24ndCBleGlzdHMuXCIpO1xyXG4gICAgcmV0dXJuIGNMb2NrO1xyXG59XHJcblxyXG5NZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUuaXNSdW5uaW5nID0gZnVuY3Rpb24gKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCkge1xyXG4gICAgaWYgKHRoaXMuX2xvZykgY29uc29sZS5sb2coXCJpc1J1bm5pbmcoXCIgKyB3b3JrZmxvd05hbWUgKyBcIiwgXCIgKyBpbnN0YW5jZUlkICsgXCIpO1xcblwiKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VEYXRhLmNvbnRhaW5zS2V5KHNwZWNTdHJpbmdzLmhvc3RpbmcuZG91YmxlS2V5cyh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpKTtcclxufVxyXG5cclxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLnBlcnNpc3RTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgaWYgKHRoaXMuX2xvZykgY29uc29sZS5sb2coXCJwZXJzaXN0U3RhdGUoXCIgKyBzdGF0ZS53b3JrZmxvd05hbWUgKyBcIiwgXCIgKyBzdGF0ZS5pbnN0YW5jZUlkICsgXCIpO1xcblwiKTtcclxuXHJcbiAgICB0aGlzLl9pbnN0YW5jZURhdGEuc2V0KHNwZWNTdHJpbmdzLmhvc3RpbmcuZG91YmxlS2V5cyhzdGF0ZS53b3JrZmxvd05hbWUsIHN0YXRlLmluc3RhbmNlSWQpLCBzdGF0ZSk7XHJcbn1cclxuXHJcbk1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5nZXRSdW5uaW5nSW5zdGFuY2VJZEhlYWRlciA9IGZ1bmN0aW9uICh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpIHtcclxuICAgIGlmICh0aGlzLl9sb2cpIGNvbnNvbGUubG9nKFwiZ2V0UnVubmluZ0luc3RhbmNlSWRIZWFkZXIoXCIgKyB3b3JrZmxvd05hbWUgKyBcIiwgXCIgKyBpbnN0YW5jZUlkICsgXCIpO1xcblwiKTtcclxuXHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9sb2FkU3RhdGUod29ya2Zsb3dOYW1lLCBpbnN0YW5jZUlkKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXBkYXRlZE9uOiBzdGF0ZS51cGRhdGVkT24sXHJcbiAgICAgICAgd29ya2Zsb3dWZXJzaW9uOiBzdGF0ZS53b3JrZmxvd1ZlcnNpb25cclxuICAgIH07XHJcbn1cclxuXHJcbk1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5sb2FkU3RhdGUgPSBmdW5jdGlvbiAod29ya2Zsb3dOYW1lLCBpbnN0YW5jZUlkKSB7XHJcbiAgICBpZiAodGhpcy5fbG9nKSBjb25zb2xlLmxvZyhcImxvYWRTdGF0ZShcIiArIHdvcmtmbG93TmFtZSArIFwiLCBcIiArIGluc3RhbmNlSWQgKyBcIik7XFxuXCIpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9sb2FkU3RhdGUod29ya2Zsb3dOYW1lLCBpbnN0YW5jZUlkKTtcclxufVxyXG5cclxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLnJlbW92ZVN0YXRlID0gZnVuY3Rpb24gKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCkge1xyXG4gICAgaWYgKHRoaXMuX2xvZykgY29uc29sZS5sb2coXCJyZW1vdmVTdGF0ZShcIiArIHdvcmtmbG93TmFtZSArIFwiLCBcIiArIGluc3RhbmNlSWQgKyBcIik7XFxuXCIpO1xyXG5cclxuICAgIHRoaXMuX2luc3RhbmNlRGF0YS5yZW1vdmUoc3BlY1N0cmluZ3MuaG9zdGluZy5kb3VibGVLZXlzKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCkpO1xyXG59XHJcblxyXG5NZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUuX2xvYWRTdGF0ZSA9IGZ1bmN0aW9uICh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2luc3RhbmNlRGF0YS5nZXQoc3BlY1N0cmluZ3MuaG9zdGluZy5kb3VibGVLZXlzKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCkpO1xyXG4gICAgaWYgKCFzdGF0ZSkgdGhyb3cgbmV3IEVycm9yKFwiSW5zdGFuY2UgZGF0YSBvZiB3b3JrZmxvdyAnXCIgKyB3b3JrZmxvd05hbWUgKyBcIicgYnkgaWQgJ1wiICsgaW5zdGFuY2VJZCArIFwiJyBpcyBub3QgZm91bmQuXCIpO1xyXG4gICAgcmV0dXJuIHN0YXRlO1xyXG59XHJcblxyXG5NZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUubG9hZFByb21vdGVkUHJvcGVydGllcyA9IGZ1bmN0aW9uICh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpIHtcclxuICAgIGlmICh0aGlzLl9sb2cpIGNvbnNvbGUubG9nKFwibG9hZFByb21vdGVkUHJvcGVydGllcyhcIiArIHdvcmtmbG93TmFtZSArIFwiLCBcIiArIGluc3RhbmNlSWQgKyBcIik7XFxuXCIpO1xyXG5cclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2luc3RhbmNlRGF0YS5nZXQoc3BlY1N0cmluZ3MuaG9zdGluZy5kb3VibGVLZXlzKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCkpO1xyXG4gICAgcmV0dXJuIHN0YXRlID8gc3RhdGUucHJvbW90ZWRQcm9wZXJ0aWVzIDogbnVsbDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNZW1vcnlQZXJzaXN0ZW5jZTsiXX0=
