"use strict";
var EventEmitter = require('events').EventEmitter;
var util = require("util");
var enums = require("../common/enums");
var is = require("../common/is");
var StrSet = require("backpack-node").collections.StrSet;
var _ = require("lodash");
function ActivityExecutionState(activityId) {
  this.activityId = activityId;
  this.execState = null;
  this.parentActivityId = null;
  this.childActivityIds = new StrSet();
}
util.inherits(ActivityExecutionState, EventEmitter);
Object.defineProperties(ActivityExecutionState.prototype, {isRunning: {get: function() {
      return this.execState === enums.ActivityStates.run;
    }}});
ActivityExecutionState.prototype.reportState = function(reason, result) {
  if (this.execState !== reason) {
    this.execState = reason;
    this.emitState(reason, result);
  }
};
ActivityExecutionState.prototype.emitState = function(result) {
  this.emit(this.execState, result);
  if (this.execState !== enums.ActivityStates.run) {
    this.emit(enums.ActivityStates.end, this.execState, result);
  }
};
ActivityExecutionState.prototype.asJSON = function() {
  return {execState: this.execState};
};
ActivityExecutionState.prototype.fromJSON = function(json) {
  if (!_.isObject(json))
    throw new TypeError("Object argument expected.");
  if (json.execState !== null) {
    if (!_.isString(json.execState))
      throw new TypeError("Argument object's execState property value is not a string.");
    if (is.undefined(enums.ActivityStates[json.execState]))
      throw new TypeError("Argument object's execState property value is not a valid Activity state value.");
  }
  this.execState = json.execState;
};
module.exports = ActivityExecutionState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXR5RXhlY3V0aW9uU3RhdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxBQUFJLEVBQUEsQ0FBQSxZQUFXLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsYUFBYSxDQUFDO0FBQ2pELEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDdEMsQUFBSSxFQUFBLENBQUEsRUFBQyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUM7QUFDaEMsQUFBSSxFQUFBLENBQUEsTUFBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsZUFBYyxDQUFDLFlBQVksT0FBTyxDQUFDO0FBQ3hELEFBQUksRUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBRXpCLE9BQVMsdUJBQXFCLENBQUUsVUFBUyxDQUFHO0FBQ3hDLEtBQUcsV0FBVyxFQUFJLFdBQVMsQ0FBQztBQUM1QixLQUFHLFVBQVUsRUFBSSxLQUFHLENBQUM7QUFDckIsS0FBRyxpQkFBaUIsRUFBSSxLQUFHLENBQUM7QUFDNUIsS0FBRyxpQkFBaUIsRUFBSSxJQUFJLE9BQUssQUFBQyxFQUFDLENBQUM7QUFDeEM7QUFBQSxBQUVBLEdBQUcsU0FBUyxBQUFDLENBQUMsc0JBQXFCLENBQUcsYUFBVyxDQUFDLENBQUM7QUFFbkQsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLHNCQUFxQixVQUFVLENBQUcsRUFDdEQsU0FBUSxDQUFHLEVBQ1AsR0FBRSxDQUFHLFVBQVUsQUFBRCxDQUFHO0FBQ2IsV0FBTyxDQUFBLElBQUcsVUFBVSxJQUFNLENBQUEsS0FBSSxlQUFlLElBQUksQ0FBQztJQUN0RCxDQUNKLENBQ0osQ0FBQyxDQUFDO0FBRUYscUJBQXFCLFVBQVUsWUFBWSxFQUFJLFVBQVUsTUFBSyxDQUFHLENBQUEsTUFBSyxDQUFHO0FBQ3JFLEtBQUksSUFBRyxVQUFVLElBQU0sT0FBSyxDQUFHO0FBQzNCLE9BQUcsVUFBVSxFQUFJLE9BQUssQ0FBQztBQUN2QixPQUFHLFVBQVUsQUFBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNsQztBQUFBLEFBQ0osQ0FBQTtBQUVBLHFCQUFxQixVQUFVLFVBQVUsRUFBSSxVQUFVLE1BQUssQ0FBRztBQUMzRCxLQUFHLEtBQUssQUFBQyxDQUFDLElBQUcsVUFBVSxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQ2pDLEtBQUksSUFBRyxVQUFVLElBQU0sQ0FBQSxLQUFJLGVBQWUsSUFBSSxDQUFHO0FBQzdDLE9BQUcsS0FBSyxBQUFDLENBQUMsS0FBSSxlQUFlLElBQUksQ0FBRyxDQUFBLElBQUcsVUFBVSxDQUFHLE9BQUssQ0FBQyxDQUFDO0VBQy9EO0FBQUEsQUFDSixDQUFBO0FBR0EscUJBQXFCLFVBQVUsT0FBTyxFQUFJLFVBQVUsQUFBRCxDQUFHO0FBQ2xELE9BQU8sRUFDSCxTQUFRLENBQUcsQ0FBQSxJQUFHLFVBQVUsQ0FDNUIsQ0FBQztBQUNMLENBQUE7QUFFQSxxQkFBcUIsVUFBVSxTQUFTLEVBQUksVUFBVSxJQUFHLENBQUc7QUFDeEQsS0FBSSxDQUFDLENBQUEsU0FBUyxBQUFDLENBQUMsSUFBRyxDQUFDO0FBQUcsUUFBTSxJQUFJLFVBQVEsQUFBQyxDQUFDLDJCQUEwQixDQUFDLENBQUM7QUFBQSxBQUN2RSxLQUFJLElBQUcsVUFBVSxJQUFNLEtBQUcsQ0FBRztBQUN6QixPQUFJLENBQUMsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxJQUFHLFVBQVUsQ0FBQztBQUFHLFVBQU0sSUFBSSxVQUFRLEFBQUMsQ0FBQyw2REFBNEQsQ0FBQyxDQUFDO0FBQUEsQUFDbkgsT0FBSSxFQUFDLFVBQVUsQUFBQyxDQUFDLEtBQUksZUFBZSxDQUFFLElBQUcsVUFBVSxDQUFDLENBQUM7QUFBRyxVQUFNLElBQUksVUFBUSxBQUFDLENBQUMsaUZBQWdGLENBQUMsQ0FBQztBQUFBLEVBQ2xLO0FBQUEsQUFFQSxLQUFHLFVBQVUsRUFBSSxDQUFBLElBQUcsVUFBVSxDQUFDO0FBQ25DLENBQUE7QUFHQSxLQUFLLFFBQVEsRUFBSSx1QkFBcUIsQ0FBQztBQUN2QyIsImZpbGUiOiJhY3Rpdml0aWVzL2FjdGl2aXR5RXhlY3V0aW9uU3RhdGUuanMiLCJzb3VyY2VSb290IjoiQzovR0lUL21vbmdvLWNydW5jaC9kZXBzL3dvcmtmbG93LTQtbm9kZS9saWIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcclxudmFyIHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcclxudmFyIGVudW1zID0gcmVxdWlyZShcIi4uL2NvbW1vbi9lbnVtc1wiKTtcclxudmFyIGlzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pc1wiKTtcclxudmFyIFN0clNldCA9IHJlcXVpcmUoXCJiYWNrcGFjay1ub2RlXCIpLmNvbGxlY3Rpb25zLlN0clNldDtcclxudmFyIF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG5cclxuZnVuY3Rpb24gQWN0aXZpdHlFeGVjdXRpb25TdGF0ZShhY3Rpdml0eUlkKSB7XHJcbiAgICB0aGlzLmFjdGl2aXR5SWQgPSBhY3Rpdml0eUlkO1xyXG4gICAgdGhpcy5leGVjU3RhdGUgPSBudWxsO1xyXG4gICAgdGhpcy5wYXJlbnRBY3Rpdml0eUlkID0gbnVsbDtcclxuICAgIHRoaXMuY2hpbGRBY3Rpdml0eUlkcyA9IG5ldyBTdHJTZXQoKTtcclxufVxyXG5cclxudXRpbC5pbmhlcml0cyhBY3Rpdml0eUV4ZWN1dGlvblN0YXRlLCBFdmVudEVtaXR0ZXIpO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUsIHtcclxuICAgIGlzUnVubmluZzoge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5leGVjU3RhdGUgPT09IGVudW1zLkFjdGl2aXR5U3RhdGVzLnJ1bjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUucmVwb3J0U3RhdGUgPSBmdW5jdGlvbiAocmVhc29uLCByZXN1bHQpIHtcclxuICAgIGlmICh0aGlzLmV4ZWNTdGF0ZSAhPT0gcmVhc29uKSB7XHJcbiAgICAgICAgdGhpcy5leGVjU3RhdGUgPSByZWFzb247XHJcbiAgICAgICAgdGhpcy5lbWl0U3RhdGUocmVhc29uLCByZXN1bHQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5BY3Rpdml0eUV4ZWN1dGlvblN0YXRlLnByb3RvdHlwZS5lbWl0U3RhdGUgPSBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICB0aGlzLmVtaXQodGhpcy5leGVjU3RhdGUsIHJlc3VsdCk7XHJcbiAgICBpZiAodGhpcy5leGVjU3RhdGUgIT09IGVudW1zLkFjdGl2aXR5U3RhdGVzLnJ1bikge1xyXG4gICAgICAgIHRoaXMuZW1pdChlbnVtcy5BY3Rpdml0eVN0YXRlcy5lbmQsIHRoaXMuZXhlY1N0YXRlLCByZXN1bHQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiBTRVJJQUxJWkFUSU9OICovXHJcbkFjdGl2aXR5RXhlY3V0aW9uU3RhdGUucHJvdG90eXBlLmFzSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXhlY1N0YXRlOiB0aGlzLmV4ZWNTdGF0ZVxyXG4gICAgfTtcclxufVxyXG5cclxuQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgaWYgKCFfLmlzT2JqZWN0KGpzb24pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGFyZ3VtZW50IGV4cGVjdGVkLlwiKTtcclxuICAgIGlmIChqc29uLmV4ZWNTdGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmICghXy5pc1N0cmluZyhqc29uLmV4ZWNTdGF0ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBvYmplY3QncyBleGVjU3RhdGUgcHJvcGVydHkgdmFsdWUgaXMgbm90IGEgc3RyaW5nLlwiKTtcclxuICAgICAgICBpZiAoaXMudW5kZWZpbmVkKGVudW1zLkFjdGl2aXR5U3RhdGVzW2pzb24uZXhlY1N0YXRlXSkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBvYmplY3QncyBleGVjU3RhdGUgcHJvcGVydHkgdmFsdWUgaXMgbm90IGEgdmFsaWQgQWN0aXZpdHkgc3RhdGUgdmFsdWUuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZXhlY1N0YXRlID0ganNvbi5leGVjU3RhdGU7XHJcbn1cclxuLyogU0VSSUFMSVpBVElPTiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBY3Rpdml0eUV4ZWN1dGlvblN0YXRlO1xyXG4iXX0=
