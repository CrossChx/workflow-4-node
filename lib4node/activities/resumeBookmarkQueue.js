"use strict";
var errors = require("../common/errors");
var StrSet = require("backpack-node").collections.StrSet;
function ResumeBookmarkQueue() {
  this._names = new StrSet();
  this._commands = [];
}
ResumeBookmarkQueue.prototype.isEmpty = function() {
  return this._commands.length === 0;
};
ResumeBookmarkQueue.prototype.enqueue = function(bookmarkName, reason, result) {
  if (!this._names.exists(bookmarkName)) {
    this._names.add(bookmarkName);
    this._commands.push({
      name: bookmarkName,
      reason: reason,
      result: result
    });
  } else {
    throw new errors.ActivityRuntimeError("The '" + bookmarkName + "' bookmark continuation already enqueued.");
  }
};
ResumeBookmarkQueue.prototype.dequeue = function() {
  var self = this;
  for (var i = 0; i < self._commands.length; i++) {
    var command = self._commands[i];
    self._commands.splice(0, 1);
    self._names.remove(command.name);
    return command;
  }
  return null;
};
ResumeBookmarkQueue.prototype.remove = function(bookmarkName) {
  if (this._names.exists(bookmarkName)) {
    var idx = -1;
    for (var i = 0; i < self._commands.length; i++) {
      var command = self._commands[i];
      if (command.name === bookmarkName) {
        idx = i;
        break;
      }
    }
    if (idx != -1)
      self._commands.splice(idx, 1);
    this._names.remove(bookmarkName);
  }
};
module.exports = ResumeBookmarkQueue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc3VtZUJvb2ttYXJrUXVldWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxBQUFJLEVBQUEsQ0FBQSxNQUFLLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxrQkFBaUIsQ0FBQyxDQUFDO0FBQ3hDLEFBQUksRUFBQSxDQUFBLE1BQUssRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGVBQWMsQ0FBQyxZQUFZLE9BQU8sQ0FBQztBQUV4RCxPQUFTLG9CQUFrQixDQUFFLEFBQUQsQ0FBRztBQUMzQixLQUFHLE9BQU8sRUFBSSxJQUFJLE9BQUssQUFBQyxFQUFDLENBQUM7QUFDMUIsS0FBRyxVQUFVLEVBQUksR0FBQyxDQUFDO0FBQ3ZCO0FBQUEsQUFFQSxrQkFBa0IsVUFBVSxRQUFRLEVBQUksVUFBVSxBQUFELENBQUc7QUFDaEQsT0FBTyxDQUFBLElBQUcsVUFBVSxPQUFPLElBQU0sRUFBQSxDQUFDO0FBQ3RDLENBQUE7QUFFQSxrQkFBa0IsVUFBVSxRQUFRLEVBQUksVUFBVSxZQUFXLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDNUUsS0FBSSxDQUFDLElBQUcsT0FBTyxPQUFPLEFBQUMsQ0FBQyxZQUFXLENBQUMsQ0FBRztBQUNuQyxPQUFHLE9BQU8sSUFBSSxBQUFDLENBQUMsWUFBVyxDQUFDLENBQUM7QUFDN0IsT0FBRyxVQUFVLEtBQUssQUFBQyxDQUNmO0FBQ0ksU0FBRyxDQUFHLGFBQVc7QUFDakIsV0FBSyxDQUFHLE9BQUs7QUFDYixXQUFLLENBQUcsT0FBSztBQUFBLElBQ2pCLENBQUMsQ0FBQztFQUNWLEtBQ0s7QUFDRCxRQUFNLElBQUksQ0FBQSxNQUFLLHFCQUFxQixBQUFDLENBQUMsT0FBTSxFQUFJLGFBQVcsQ0FBQSxDQUFJLDRDQUEwQyxDQUFDLENBQUM7RUFDL0c7QUFBQSxBQUNKLENBQUE7QUFFQSxrQkFBa0IsVUFBVSxRQUFRLEVBQUksVUFBVSxBQUFELENBQUc7QUFDaEQsQUFBSSxJQUFBLENBQUEsSUFBRyxFQUFJLEtBQUcsQ0FBQztBQUNmLE1BQVMsR0FBQSxDQUFBLENBQUEsRUFBSSxFQUFBLENBQUcsQ0FBQSxDQUFBLEVBQUksQ0FBQSxJQUFHLFVBQVUsT0FBTyxDQUFHLENBQUEsQ0FBQSxFQUFFLENBQUc7QUFDNUMsQUFBSSxNQUFBLENBQUEsT0FBTSxFQUFJLENBQUEsSUFBRyxVQUFVLENBQUUsQ0FBQSxDQUFDLENBQUM7QUFDL0IsT0FBRyxVQUFVLE9BQU8sQUFBQyxDQUFDLENBQUEsQ0FBRyxFQUFBLENBQUMsQ0FBQztBQUMzQixPQUFHLE9BQU8sT0FBTyxBQUFDLENBQUMsT0FBTSxLQUFLLENBQUMsQ0FBQztBQUNoQyxTQUFPLFFBQU0sQ0FBQztFQUNsQjtBQUFBLEFBQ0EsT0FBTyxLQUFHLENBQUM7QUFDZixDQUFBO0FBRUEsa0JBQWtCLFVBQVUsT0FBTyxFQUFJLFVBQVUsWUFBVyxDQUFHO0FBQzNELEtBQUksSUFBRyxPQUFPLE9BQU8sQUFBQyxDQUFDLFlBQVcsQ0FBQyxDQUFHO0FBQ2xDLEFBQUksTUFBQSxDQUFBLEdBQUUsRUFBSSxFQUFDLENBQUEsQ0FBQztBQUNaLFFBQVMsR0FBQSxDQUFBLENBQUEsRUFBSSxFQUFBLENBQUcsQ0FBQSxDQUFBLEVBQUksQ0FBQSxJQUFHLFVBQVUsT0FBTyxDQUFHLENBQUEsQ0FBQSxFQUFFLENBQUc7QUFDNUMsQUFBSSxRQUFBLENBQUEsT0FBTSxFQUFJLENBQUEsSUFBRyxVQUFVLENBQUUsQ0FBQSxDQUFDLENBQUM7QUFDL0IsU0FBSSxPQUFNLEtBQUssSUFBTSxhQUFXLENBQUc7QUFDL0IsVUFBRSxFQUFJLEVBQUEsQ0FBQztBQUNQLGFBQUs7TUFDVDtBQUFBLElBQ0o7QUFBQSxBQUNBLE9BQUksR0FBRSxHQUFLLEVBQUMsQ0FBQTtBQUFHLFNBQUcsVUFBVSxPQUFPLEFBQUMsQ0FBQyxHQUFFLENBQUcsRUFBQSxDQUFDLENBQUM7QUFBQSxBQUM1QyxPQUFHLE9BQU8sT0FBTyxBQUFDLENBQUMsWUFBVyxDQUFDLENBQUM7RUFDcEM7QUFBQSxBQUNKLENBQUE7QUFFQSxLQUFLLFFBQVEsRUFBSSxvQkFBa0IsQ0FBQztBQUNwQyIsImZpbGUiOiJhY3Rpdml0aWVzL3Jlc3VtZUJvb2ttYXJrUXVldWUuanMiLCJzb3VyY2VSb290IjoiQzovR0lUL21vbmdvLWNydW5jaC9kZXBzL3dvcmtmbG93LTQtbm9kZS9saWIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGVycm9ycyA9IHJlcXVpcmUoXCIuLi9jb21tb24vZXJyb3JzXCIpO1xyXG52YXIgU3RyU2V0ID0gcmVxdWlyZShcImJhY2twYWNrLW5vZGVcIikuY29sbGVjdGlvbnMuU3RyU2V0O1xyXG5cclxuZnVuY3Rpb24gUmVzdW1lQm9va21hcmtRdWV1ZSgpIHtcclxuICAgIHRoaXMuX25hbWVzID0gbmV3IFN0clNldCgpO1xyXG4gICAgdGhpcy5fY29tbWFuZHMgPSBbXTtcclxufVxyXG5cclxuUmVzdW1lQm9va21hcmtRdWV1ZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLl9jb21tYW5kcy5sZW5ndGggPT09IDA7XHJcbn1cclxuXHJcblJlc3VtZUJvb2ttYXJrUXVldWUucHJvdG90eXBlLmVucXVldWUgPSBmdW5jdGlvbiAoYm9va21hcmtOYW1lLCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKCF0aGlzLl9uYW1lcy5leGlzdHMoYm9va21hcmtOYW1lKSkge1xyXG4gICAgICAgIHRoaXMuX25hbWVzLmFkZChib29rbWFya05hbWUpO1xyXG4gICAgICAgIHRoaXMuX2NvbW1hbmRzLnB1c2goXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGJvb2ttYXJrTmFtZSxcclxuICAgICAgICAgICAgICAgIHJlYXNvbjogcmVhc29uLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiByZXN1bHRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkFjdGl2aXR5UnVudGltZUVycm9yKFwiVGhlICdcIiArIGJvb2ttYXJrTmFtZSArIFwiJyBib29rbWFyayBjb250aW51YXRpb24gYWxyZWFkeSBlbnF1ZXVlZC5cIik7XHJcbiAgICB9XHJcbn1cclxuXHJcblJlc3VtZUJvb2ttYXJrUXVldWUucHJvdG90eXBlLmRlcXVldWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuX2NvbW1hbmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGNvbW1hbmQgPSBzZWxmLl9jb21tYW5kc1tpXTtcclxuICAgICAgICBzZWxmLl9jb21tYW5kcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgc2VsZi5fbmFtZXMucmVtb3ZlKGNvbW1hbmQubmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbW1hbmQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuUmVzdW1lQm9va21hcmtRdWV1ZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGJvb2ttYXJrTmFtZSkge1xyXG4gICAgaWYgKHRoaXMuX25hbWVzLmV4aXN0cyhib29rbWFya05hbWUpKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IC0xO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5fY29tbWFuZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGNvbW1hbmQgPSBzZWxmLl9jb21tYW5kc1tpXTtcclxuICAgICAgICAgICAgaWYgKGNvbW1hbmQubmFtZSA9PT0gYm9va21hcmtOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZHggPSBpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlkeCAhPSAtMSkgc2VsZi5fY29tbWFuZHMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgdGhpcy5fbmFtZXMucmVtb3ZlKGJvb2ttYXJrTmFtZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUmVzdW1lQm9va21hcmtRdWV1ZTtcclxuIl19
