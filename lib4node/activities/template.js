"use strict";
var Activity = require('./activity');
var util = require('util');
var _ = require('lodash');
var activityMarkup = require('./activityMarkup');
var fast = require('fast.js');
var is = require('../common/is');
var templateHelpers = require('./templateHelpers');
var guids = require('../common/guids');
function Template() {
  Activity.call(this);
  this[guids.types.template] = true;
  this.nonScopedProperties.add(guids.types.template);
  this.declare = null;
  this.nonScopedProperties.add('_visitActivities');
  this.nonScopedProperties.add('_getInternalActivities');
}
util.inherits(Template, Activity);
Template.prototype._getInternalActivities = function() {
  var self = this;
  if (!self.args) {
    self.args = [];
    templateHelpers.visitActivities(self.declare, function(markup, parent, key) {
      self.args.push(activityMarkup.parse(markup));
    });
  }
  return self.args;
};
Template.prototype.forEachImmediateChild = function(f) {
  Activity.prototype.forEachImmediateChild.call(this, f);
  fast.forEach(this._getInternalActivities(), function(activity) {
    f(activity);
  });
};
Template.prototype._forEach = function(f, visited, except) {
  Activity.prototype._forEach.call(this, f, visited, except);
  fast.forEach(this._getInternalActivities(), function(activity) {
    activity._forEach(f, visited, except);
  });
};
Template.prototype.run = function(callContext, args) {
  if (_.isArray(args)) {
    callContext.schedule(args, '_activitiesGot');
  } else {
    callContext.complete();
  }
};
Template.prototype._activitiesGot = function(callContext, reason, result) {
  if (reason == Activity.states.complete) {
    if (_.isArray(result) && result.length) {
      var idx = 0;
      var declare = _.cloneDeep(this.get("declare"));
      var setupTasks = [];
      templateHelpers.visitActivities(declare, function(markup, parent, key) {
        setupTasks.push(function() {
          parent[key] = result[idx++];
        });
      });
      fast.forEach(setupTasks, function(t) {
        t();
      });
      callContext.complete(declare);
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Template;
//# sourceMappingURL=data:application/json;base64,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LEFBQUMsQ0FBQyxVQUFTLENBQUcsVUFBUyxDQUFBLENBQUc7QUFBRSxRQUFBLEFBQUMsRUFBQyxDQUFDO01BQUUsQ0FBQyxDQUFDO0FBQzlDLGdCQUFVLFNBQVMsQUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDO0lBQ2pDO0FBQUEsRUFDSixLQUNLO0FBQ0QsY0FBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsT0FBSyxDQUFDLENBQUM7RUFDbkM7QUFBQSxBQUNKLENBQUE7QUFFQSxLQUFLLFFBQVEsRUFBSSxTQUFPLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL3RlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6IkM6L0dJVC9tb25nby1jcnVuY2gvZGVwcy93b3JrZmxvdy00LW5vZGUvbGliLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBBY3Rpdml0eSA9IHJlcXVpcmUoJy4vYWN0aXZpdHknKTtcclxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciBhY3Rpdml0eU1hcmt1cCA9IHJlcXVpcmUoJy4vYWN0aXZpdHlNYXJrdXAnKTtcclxudmFyIGZhc3QgPSByZXF1aXJlKCdmYXN0LmpzJyk7XHJcbnZhciBpcyA9IHJlcXVpcmUoJy4uL2NvbW1vbi9pcycpO1xyXG52YXIgdGVtcGxhdGVIZWxwZXJzID0gcmVxdWlyZSgnLi90ZW1wbGF0ZUhlbHBlcnMnKTtcclxudmFyIGd1aWRzID0gcmVxdWlyZSgnLi4vY29tbW9uL2d1aWRzJyk7XHJcblxyXG5mdW5jdGlvbiBUZW1wbGF0ZSgpIHtcclxuICAgIEFjdGl2aXR5LmNhbGwodGhpcyk7XHJcblxyXG4gICAgdGhpc1tndWlkcy50eXBlcy50ZW1wbGF0ZV0gPSB0cnVlO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZChndWlkcy50eXBlcy50ZW1wbGF0ZSk7XHJcblxyXG4gICAgdGhpcy5kZWNsYXJlID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKCdfdmlzaXRBY3Rpdml0aWVzJyk7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKCdfZ2V0SW50ZXJuYWxBY3Rpdml0aWVzJyk7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoVGVtcGxhdGUsIEFjdGl2aXR5KTtcclxuXHJcblRlbXBsYXRlLnByb3RvdHlwZS5fZ2V0SW50ZXJuYWxBY3Rpdml0aWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBpZiAoIXNlbGYuYXJncykge1xyXG4gICAgICAgIHNlbGYuYXJncyA9IFtdO1xyXG4gICAgICAgIHRlbXBsYXRlSGVscGVycy52aXNpdEFjdGl2aXRpZXMoc2VsZi5kZWNsYXJlLFxyXG4gICAgICAgICAgICBmdW5jdGlvbihtYXJrdXAsIHBhcmVudCwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmFyZ3MucHVzaChhY3Rpdml0eU1hcmt1cC5wYXJzZShtYXJrdXApKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2VsZi5hcmdzO1xyXG59XHJcblxyXG5UZW1wbGF0ZS5wcm90b3R5cGUuZm9yRWFjaEltbWVkaWF0ZUNoaWxkID0gZnVuY3Rpb24gKGYpIHtcclxuICAgIEFjdGl2aXR5LnByb3RvdHlwZS5mb3JFYWNoSW1tZWRpYXRlQ2hpbGQuY2FsbCh0aGlzLCBmKTtcclxuICAgIGZhc3QuZm9yRWFjaCh0aGlzLl9nZXRJbnRlcm5hbEFjdGl2aXRpZXMoKSwgZnVuY3Rpb24oYWN0aXZpdHkpIHtcclxuICAgICAgICBmKGFjdGl2aXR5KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5UZW1wbGF0ZS5wcm90b3R5cGUuX2ZvckVhY2ggPSBmdW5jdGlvbiAoZiwgdmlzaXRlZCwgZXhjZXB0KSB7XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUuX2ZvckVhY2guY2FsbCh0aGlzLCBmLCB2aXNpdGVkLCBleGNlcHQpO1xyXG4gICAgZmFzdC5mb3JFYWNoKHRoaXMuX2dldEludGVybmFsQWN0aXZpdGllcygpLCBmdW5jdGlvbihhY3Rpdml0eSkge1xyXG4gICAgICAgIGFjdGl2aXR5Ll9mb3JFYWNoKGYsIHZpc2l0ZWQsIGV4Y2VwdCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuVGVtcGxhdGUucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCBhcmdzKSB7XHJcbiAgICBpZiAoXy5pc0FycmF5KGFyZ3MpKSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuc2NoZWR1bGUoYXJncywgJ19hY3Rpdml0aWVzR290Jyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5UZW1wbGF0ZS5wcm90b3R5cGUuX2FjdGl2aXRpZXNHb3QgPSBmdW5jdGlvbihjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcclxuICAgIGlmIChyZWFzb24gPT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgaWYgKF8uaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBkZWNsYXJlID0gXy5jbG9uZURlZXAodGhpcy5nZXQoXCJkZWNsYXJlXCIpKTtcclxuICAgICAgICAgICAgdmFyIHNldHVwVGFza3MgPSBbXTtcclxuICAgICAgICAgICAgdGVtcGxhdGVIZWxwZXJzLnZpc2l0QWN0aXZpdGllcyhkZWNsYXJlLCBmdW5jdGlvbihtYXJrdXAsIHBhcmVudCwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICBzZXR1cFRhc2tzLnB1c2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50W2tleV0gPSByZXN1bHRbaWR4KytdO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBmYXN0LmZvckVhY2goc2V0dXBUYXNrcywgZnVuY3Rpb24odCkgeyB0KCk7IH0pO1xyXG4gICAgICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZShkZWNsYXJlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFRlbXBsYXRlOyJdfQ==
