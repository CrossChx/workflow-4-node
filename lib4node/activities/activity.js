"use strict";
var guids = require("../common/guids");
var errors = require("../common/errors");
var enums = require("../common/enums");
var _ = require("lodash");
var specStrings = require("../common/specStrings");
var WFObject = require("../common/wfObject");
var util = require("util");
var StrSet = require("backpack-node").collections.StrSet;
var is = require("../common/is");
var fast = require("fast.js");
var CallContext = require("./callContext");
function Activity() {
  WFObject.call(this);
  this[guids.types.activity] = true;
  this.id = null;
  this.args = null;
  this.displayName = "";
  this.nonSerializedProperties = new StrSet();
  this.nonScopedProperties = new StrSet();
  this.nonScopedProperties.add(guids.types.activity);
  this.nonScopedProperties.add("nonScopedProperties");
  this.nonScopedProperties.add("nonSerializedProperties");
  this.nonScopedProperties.add("_instanceId");
  this.nonScopedProperties.add("activity");
  this.nonScopedProperties.add("id");
  this.nonScopedProperties.add("args");
  this.nonScopedProperties.add("__typeTag");
  this.nonScopedProperties.add("displayName");
  this.nonScopedProperties.add("complete");
  this.nonScopedProperties.add("cancel");
  this.nonScopedProperties.add("idle");
  this.nonScopedProperties.add("fail");
  this.nonScopedProperties.add("end");
  this.nonScopedProperties.add("schedule");
  this.nonScopedProperties.add("createBookmark");
  this.nonScopedProperties.add("resumeBookmark");
  this.nonScopedProperties.add("resultCollected");
  this.nonScopedProperties.add("codeProperties");
  this.codeProperties = new StrSet();
}
util.inherits(Activity, WFObject);
Object.defineProperties(Activity.prototype, {
  _scopeKeys: {
    value: null,
    writable: true,
    enumerable: false
  },
  _createScopePartImpl: {
    value: null,
    writable: true,
    enumerable: false
  }
});
Activity.prototype.toString = function() {
  return (this.displayName ? (this.displayName + " ") : "") + "(" + this.constructor.name + ":" + this.id + ")";
};
Activity.prototype.forEach = function(f) {
  var visited = {};
  return this._forEach(f, visited, null);
};
Activity.prototype.forEachChild = function(f) {
  var visited = {};
  return this._forEach(f, visited, this);
};
Activity.prototype.forEachImmediateChild = function(f) {
  var self = this;
  fast.forEach(self.getKeys(), function(fieldName) {
    var fieldValue = self[fieldName];
    if (fieldValue) {
      if (_.isArray(fieldValue)) {
        fieldValue.forEach(function(obj) {
          if (obj instanceof Activity) {
            f(obj);
          }
        });
      } else if (fieldValue instanceof Activity) {
        f(fieldValue);
      }
    }
  });
};
Activity.prototype._forEach = function(f, visited, except) {
  var self = this;
  if (is.undefined(visited[self._instanceId])) {
    visited[self._instanceId] = true;
    if (self !== except)
      f(self);
    fast.forEach(self.getKeys(), function(fieldName) {
      var fieldValue = self[fieldName];
      if (fieldValue) {
        if (_.isArray(fieldValue)) {
          fieldValue.forEach(function(obj) {
            if (obj instanceof Activity) {
              obj._forEach(f, visited, except);
            }
          });
        } else if (fieldValue instanceof Activity) {
          fieldValue._forEach(f, visited, except);
        }
      }
    });
  }
};
Activity.prototype.start = function(callContext) {
  var self = this;
  if (!(callContext instanceof CallContext)) {
    throw new Error("Argument 'context' is not an instance of ActivityExecutionContext.");
  }
  var args = self.args;
  if (arguments.length > 1) {
    args = [];
    for (var i = 1; i < arguments.length; i++)
      args.push(arguments[i]);
  }
  var myCallContext = callContext.next(self);
  var state = myCallContext.executionState;
  if (state.isRunning)
    throw new Error("Activity is already running.");
  var e = fast.try(function() {
    state.reportState(Activity.states.run);
    self.run.call(myCallContext.scope, myCallContext, args);
  });
  if (e)
    throw e;
};
Activity.prototype.run = function(callContext, args) {
  this.complete(callContext, args);
};
Activity.prototype.complete = function(callContext, result) {
  this.end(callContext, Activity.states.complete, result);
};
Activity.prototype.cancel = function(callContext) {
  this.end(callContext, Activity.states.cancel);
};
Activity.prototype.idle = function(callContext) {
  this.end(callContext, Activity.states.idle);
};
Activity.prototype.fail = function(callContext, e) {
  this.end(callContext, Activity.states.fail, e);
};
Activity.prototype.end = function(callContext, reason, result) {
  var state = callContext.executionState;
  if (state.execState === Activity.states.cancel || state.execState === Activity.states.fail) {
    return ;
  }
  state.execState = reason;
  var inIdle = reason === Activity.states.idle;
  var execContext = callContext.executionContext;
  callContext = callContext.back(inIdle);
  if (callContext) {
    var bmName = specStrings.activities.createValueCollectedBMName(this);
    if (execContext.isBookmarkExists(bmName)) {
      state.emitState(result);
      execContext.resumeBookmarkInScope(callContext, bmName, reason, result);
      return ;
    }
  } else {
    if (inIdle && execContext.processResumeBookmarkQueue()) {
      return ;
    }
  }
  state.emitState(result);
};
Activity.prototype.schedule = function(callContext, obj, endCallback) {
  var self = this;
  var scope = callContext.scope;
  var execContext = callContext.executionContext;
  if (Array.isArray(obj) && obj.length) {
    scope.set("__collectValues", []);
    var activities = [];
    obj.forEach(function(v) {
      if (v instanceof Activity) {
        scope.get("__collectValues").push(specStrings.activities.asValueToCollect(v));
        activities.push(v);
      } else {
        scope.get("__collectValues").push(v);
      }
    });
    if (activities.length) {
      scope.set("__collectPickRound2", false);
      scope.set("__collectErrors", []);
      scope.set("__collectCancelCounts", 0);
      scope.set("__collectIdleCounts", 0);
      scope.set("__collectRemaining", activities.length);
      var endBM = scope.set("__collectEndBookmarkName", specStrings.activities.createCollectingCompletedBMName(self));
      execContext.createBookmark(self.id, scope.get("__collectEndBookmarkName"), endCallback);
      var len = activities.length;
      for (var i = 0; i < len; i++) {
        var childActivity = activities[i];
        execContext.createBookmark(self.id, specStrings.activities.createValueCollectedBMName(childActivity), "resultCollected");
        childActivity.start(callContext);
        if (!execContext.isBookmarkExists(endBM)) {
          break;
        }
      }
    } else {
      var result = scope.get("__collectValues");
      scope.delete("__collectValues");
      scope.get(endCallback).call(scope, callContext, Activity.states.complete, result);
    }
  } else if (obj instanceof Activity) {
    execContext.createBookmark(self.id, specStrings.activities.createValueCollectedBMName(obj), endCallback);
    obj.start(callContext);
  } else {
    scope.get(endCallback).call(scope, callContext, Activity.states.complete, obj);
  }
};
Activity.prototype.resultCollected = function(callContext, reason, result, bookmark) {
  var self = this;
  var execContext = callContext.executionContext;
  var childId = specStrings.getString(bookmark.name);
  var argMarker = specStrings.activities.asValueToCollect(childId);
  var resultIndex = self.get("__collectValues").indexOf(argMarker);
  var pickCurrent = false;
  if (resultIndex === -1) {
    self.get("__collectErrors").push(new errors.ActivityStateExceptionError("Activity '" + childId + "' is not found in __collectValues."));
  } else {
    if (self.get("__collectPick") && (reason !== Activity.states.idle || self.get("__collectPickRound2"))) {
      var ids = [];
      fast.forEach(self.get("__collectValues"), function(cv) {
        var id = specStrings.getString(cv);
        if (id && id != childId) {
          ids.push(id);
          execContext.deleteScopeOfActivity(callContext, id);
          var ibmName = specStrings.activities.createValueCollectedBMName(id);
          execContext.deleteBookmark(ibmName);
        }
      });
      execContext.cancelExecution(ids);
      pickCurrent = true;
    } else {
      switch (reason) {
        case Activity.states.complete:
          self.get("__collectValues")[resultIndex] = result;
          break;
        case Activity.states.cancel:
          self.inc("__collectCancelCounts");
          self.get("__collectValues")[resultIndex] = null;
          break;
        case Activity.states.idle:
          self.inc("__collectIdleCounts");
          break;
        case Activity.states.fail:
          result = result || new errors.ActivityStateExceptionError("Unknown error.");
          self.get("__collectErrors").push(result);
          self.get("__collectValues")[resultIndex] = null;
          break;
        default:
          self.get("__collectErrors").push(new errors.ActivityStateExceptionError("Bookmark should not be continued with reason '" + reason + "'."));
          self.get("__collectValues")[resultIndex] = null;
          break;
      }
    }
  }
  if (self.dec("__collectRemaining") === 0 || pickCurrent) {
    var endBookmarkName = self.get("__collectEndBookmarkName");
    if (!pickCurrent) {
      var reason;
      var result = null;
      if (self.get("__collectErrors").length) {
        reason = Activity.states.fail;
        var __collectErrors = self.get("__collectErrors");
        if (__collectErrors.length === 1) {
          result = __collectErrors[0];
        } else {
          result = new errors.AggregateError(__collectErrors);
        }
      } else if (self.get("__collectCancelCounts")) {
        reason = Activity.states.cancel;
      } else if (self.get("__collectIdleCounts")) {
        reason = Activity.states.idle;
        self.set("__collectRemaining", 1);
        self.dec("__collectIdleCounts");
        if (self.get("__collectPick")) {
          self.set("__collectPickRound2", true);
        }
      } else {
        reason = Activity.states.complete;
        result = self.get("__collectValues");
      }
    }
    if (!self.get("__collectRemaining")) {
      self.delete("__collectValues");
      self.delete("__collectRemaining");
      self.delete("__collectIdleCounts");
      self.delete("__collectEndBookmarkName");
      self.delete("__collectCancelCounts");
      self.delete("__collectErrors");
      self.delete("__collectPick");
      self.delete("__collectPickRound2");
    }
    execContext.resumeBookmarkInScope(callContext, endBookmarkName, reason, result);
  }
};
Activity.prototype._getScopeKeys = function() {
  var self = this;
  if (!self._scopeKeys) {
    self._scopeKeys = [];
    fast.forEach(self.getKeys(), function(key) {
      if (self.nonScopedProperties.exists(key))
        return ;
      if (Activity.prototype[key])
        return ;
      self._scopeKeys.push(key);
    });
  }
  return self._scopeKeys;
};
Activity.prototype.createScopePart = function() {
  var self = this;
  if (this._createScopePartImpl === null) {
    var first = true;
    var src = "return {";
    fast.forEach(self._getScopeKeys(), function(fieldName) {
      if (first) {
        first = false;
      } else {
        src += ",\n";
      }
      if (_.isPlainObject(self[fieldName])) {
        src += fieldName + ":_.clone(a." + fieldName + ", true)";
      } else {
        src += fieldName + ":a." + fieldName;
      }
    });
    src += "}";
    this._createScopePartImpl = new Function("a,_", src);
  }
  return this._createScopePartImpl(this, _);
};
Activity.states = enums.ActivityStates;
module.exports = Activity;
//# sourceMappingURL=data:application/json;base64,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R0FBSyxNQUFJLENBQUM7TUFDaEI7QUFBQSxBQUNBLFNBQUksQ0FBQSxjQUFjLEFBQUMsQ0FBQyxJQUFHLENBQUUsU0FBUSxDQUFDLENBQUMsQ0FBRztBQUNsQyxVQUFFLEdBQUssQ0FBQSxTQUFRLEVBQUksY0FBWSxDQUFBLENBQUksVUFBUSxDQUFBLENBQUksVUFBUSxDQUFDO01BQzVELEtBQ0s7QUFDRCxVQUFFLEdBQUssQ0FBQSxTQUFRLEVBQUksTUFBSSxDQUFBLENBQUksVUFBUSxDQUFDO01BQ3hDO0FBQUEsSUFDSixDQUFDLENBQUM7QUFDRixNQUFFLEdBQUssSUFBRSxDQUFDO0FBRVYsT0FBRyxxQkFBcUIsRUFBSSxJQUFJLFNBQU8sQUFBQyxDQUFDLEtBQUksQ0FBRyxJQUFFLENBQUMsQ0FBQztFQUN4RDtBQUFBLEFBRUEsT0FBTyxDQUFBLElBQUcscUJBQXFCLEFBQUMsQ0FBQyxJQUFHLENBQUcsRUFBQSxDQUFDLENBQUM7QUFDN0MsQ0FBQTtBQUdBLE9BQU8sT0FBTyxFQUFJLENBQUEsS0FBSSxlQUFlLENBQUM7QUFFdEMsS0FBSyxRQUFRLEVBQUksU0FBTyxDQUFDO0FBQ3pCIiwiZmlsZSI6ImFjdGl2aXRpZXMvYWN0aXZpdHkuanMiLCJzb3VyY2VSb290IjoiQzovR0lUL21vbmdvLWNydW5jaC9kZXBzL3dvcmtmbG93LTQtbm9kZS9saWIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGd1aWRzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9ndWlkc1wiKTtcclxudmFyIGVycm9ycyA9IHJlcXVpcmUoXCIuLi9jb21tb24vZXJyb3JzXCIpO1xyXG52YXIgZW51bXMgPSByZXF1aXJlKFwiLi4vY29tbW9uL2VudW1zXCIpO1xyXG52YXIgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XHJcbnZhciBzcGVjU3RyaW5ncyA9IHJlcXVpcmUoXCIuLi9jb21tb24vc3BlY1N0cmluZ3NcIik7XHJcbnZhciBXRk9iamVjdCA9IHJlcXVpcmUoXCIuLi9jb21tb24vd2ZPYmplY3RcIik7XHJcbnZhciB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XHJcbnZhciBTdHJTZXQgPSByZXF1aXJlKFwiYmFja3BhY2stbm9kZVwiKS5jb2xsZWN0aW9ucy5TdHJTZXQ7XHJcbnZhciBpcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vaXNcIik7XHJcbnZhciBmYXN0ID0gcmVxdWlyZShcImZhc3QuanNcIik7XHJcbnZhciBDYWxsQ29udGV4dCA9IHJlcXVpcmUoXCIuL2NhbGxDb250ZXh0XCIpO1xyXG5cclxuZnVuY3Rpb24gQWN0aXZpdHkoKSB7XHJcbiAgICBXRk9iamVjdC5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXNbZ3VpZHMudHlwZXMuYWN0aXZpdHldID0gdHJ1ZTtcclxuICAgIHRoaXMuaWQgPSBudWxsO1xyXG4gICAgdGhpcy5hcmdzID0gbnVsbDtcclxuICAgIHRoaXMuZGlzcGxheU5hbWUgPSBcIlwiO1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXMgbm90IHNlcmlhbGl6ZWQ6XHJcbiAgICB0aGlzLm5vblNlcmlhbGl6ZWRQcm9wZXJ0aWVzID0gbmV3IFN0clNldCgpO1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXMgYXJlIG5vdCBnb2luZyB0byBjb3BpZWQgaW4gdGhlIHNjb3BlOlxyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzID0gbmV3IFN0clNldCgpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZChndWlkcy50eXBlcy5hY3Rpdml0eSk7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwibm9uU2NvcGVkUHJvcGVydGllc1wiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJub25TZXJpYWxpemVkUHJvcGVydGllc1wiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJfaW5zdGFuY2VJZFwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJhY3Rpdml0eVwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJpZFwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJhcmdzXCIpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZChcIl9fdHlwZVRhZ1wiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJkaXNwbGF5TmFtZVwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJjb21wbGV0ZVwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJjYW5jZWxcIik7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwiaWRsZVwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJmYWlsXCIpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZChcImVuZFwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJzY2hlZHVsZVwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJjcmVhdGVCb29rbWFya1wiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJyZXN1bWVCb29rbWFya1wiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJyZXN1bHRDb2xsZWN0ZWRcIik7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwiY29kZVByb3BlcnRpZXNcIik7XHJcblxyXG4gICAgdGhpcy5jb2RlUHJvcGVydGllcyA9IG5ldyBTdHJTZXQoKTtcclxufVxyXG5cclxudXRpbC5pbmhlcml0cyhBY3Rpdml0eSwgV0ZPYmplY3QpO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQWN0aXZpdHkucHJvdG90eXBlLCB7XHJcbiAgICBfc2NvcGVLZXlzOiB7XHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBfY3JlYXRlU2NvcGVQYXJ0SW1wbDoge1xyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuQWN0aXZpdHkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLmRpc3BsYXlOYW1lID8gKHRoaXMuZGlzcGxheU5hbWUgKyBcIiBcIikgOiBcIlwiKSArIFwiKFwiICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgXCI6XCIgKyB0aGlzLmlkICsgXCIpXCI7XHJcbn1cclxuXHJcbi8qIGZvckVhY2ggKi9cclxuQWN0aXZpdHkucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZikge1xyXG4gICAgdmFyIHZpc2l0ZWQgPSB7fTtcclxuICAgIHJldHVybiB0aGlzLl9mb3JFYWNoKGYsIHZpc2l0ZWQsIG51bGwpO1xyXG59XHJcblxyXG5BY3Rpdml0eS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gKGYpIHtcclxuICAgIHZhciB2aXNpdGVkID0ge307XHJcbiAgICByZXR1cm4gdGhpcy5fZm9yRWFjaChmLCB2aXNpdGVkLCB0aGlzKTtcclxufVxyXG5cclxuQWN0aXZpdHkucHJvdG90eXBlLmZvckVhY2hJbW1lZGlhdGVDaGlsZCA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgZmFzdC5mb3JFYWNoKHNlbGYuZ2V0S2V5cygpLCBmdW5jdGlvbiAoZmllbGROYW1lKSB7XHJcbiAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBzZWxmW2ZpZWxkTmFtZV07XHJcbiAgICAgICAgaWYgKGZpZWxkVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKF8uaXNBcnJheShmaWVsZFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgZmllbGRWYWx1ZS5mb3JFYWNoKFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFjdGl2aXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChmaWVsZFZhbHVlIGluc3RhbmNlb2YgQWN0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgIGYoZmllbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuQWN0aXZpdHkucHJvdG90eXBlLl9mb3JFYWNoID0gZnVuY3Rpb24gKGYsIHZpc2l0ZWQsIGV4Y2VwdCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgaWYgKGlzLnVuZGVmaW5lZCh2aXNpdGVkW3NlbGYuX2luc3RhbmNlSWRdKSkge1xyXG4gICAgICAgIHZpc2l0ZWRbc2VsZi5faW5zdGFuY2VJZF0gPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoc2VsZiAhPT0gZXhjZXB0KSBmKHNlbGYpO1xyXG5cclxuICAgICAgICBmYXN0LmZvckVhY2goc2VsZi5nZXRLZXlzKCksIGZ1bmN0aW9uIChmaWVsZE5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBzZWxmW2ZpZWxkTmFtZV07XHJcbiAgICAgICAgICAgIGlmIChmaWVsZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5pc0FycmF5KGZpZWxkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZS5mb3JFYWNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgQWN0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouX2ZvckVhY2goZiwgdmlzaXRlZCwgZXhjZXB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmaWVsZFZhbHVlIGluc3RhbmNlb2YgQWN0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlLl9mb3JFYWNoKGYsIHZpc2l0ZWQsIGV4Y2VwdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKiBmb3JFYWNoICovXHJcblxyXG4vKiBSVU4gKi9cclxuQWN0aXZpdHkucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0KSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgaWYgKCEoY2FsbENvbnRleHQgaW5zdGFuY2VvZiBDYWxsQ29udGV4dCkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCAnY29udGV4dCcgaXMgbm90IGFuIGluc3RhbmNlIG9mIEFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGFyZ3MgPSBzZWxmLmFyZ3M7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBteUNhbGxDb250ZXh0ID0gY2FsbENvbnRleHQubmV4dChzZWxmKTtcclxuICAgIHZhciBzdGF0ZSA9IG15Q2FsbENvbnRleHQuZXhlY3V0aW9uU3RhdGU7XHJcbiAgICBpZiAoc3RhdGUuaXNSdW5uaW5nKSB0aHJvdyBuZXcgRXJyb3IoXCJBY3Rpdml0eSBpcyBhbHJlYWR5IHJ1bm5pbmcuXCIpO1xyXG5cclxuICAgIHZhciBlID0gZmFzdC50cnkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHN0YXRlLnJlcG9ydFN0YXRlKEFjdGl2aXR5LnN0YXRlcy5ydW4pO1xyXG4gICAgICAgIHNlbGYucnVuLmNhbGwobXlDYWxsQ29udGV4dC5zY29wZSwgbXlDYWxsQ29udGV4dCwgYXJncyk7XHJcbiAgICB9KTtcclxuICAgIGlmIChlKSB0aHJvdyBlO1xyXG59XHJcblxyXG5BY3Rpdml0eS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCBhcmdzKSB7XHJcbiAgICB0aGlzLmNvbXBsZXRlKGNhbGxDb250ZXh0LCBhcmdzKTtcclxufVxyXG5cclxuQWN0aXZpdHkucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZXN1bHQpIHtcclxuICAgIHRoaXMuZW5kKGNhbGxDb250ZXh0LCBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUsIHJlc3VsdCk7XHJcbn1cclxuXHJcbkFjdGl2aXR5LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQpIHtcclxuICAgIHRoaXMuZW5kKGNhbGxDb250ZXh0LCBBY3Rpdml0eS5zdGF0ZXMuY2FuY2VsKTtcclxufVxyXG5cclxuQWN0aXZpdHkucHJvdG90eXBlLmlkbGUgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQpIHtcclxuICAgIHRoaXMuZW5kKGNhbGxDb250ZXh0LCBBY3Rpdml0eS5zdGF0ZXMuaWRsZSk7XHJcbn1cclxuXHJcbkFjdGl2aXR5LnByb3RvdHlwZS5mYWlsID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCBlKSB7XHJcbiAgICB0aGlzLmVuZChjYWxsQ29udGV4dCwgQWN0aXZpdHkuc3RhdGVzLmZhaWwsIGUpO1xyXG59XHJcblxyXG5BY3Rpdml0eS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgdmFyIHN0YXRlID0gY2FsbENvbnRleHQuZXhlY3V0aW9uU3RhdGU7XHJcblxyXG4gICAgaWYgKHN0YXRlLmV4ZWNTdGF0ZSA9PT0gQWN0aXZpdHkuc3RhdGVzLmNhbmNlbCB8fCBzdGF0ZS5leGVjU3RhdGUgPT09IEFjdGl2aXR5LnN0YXRlcy5mYWlsKSB7XHJcbiAgICAgICAgLy8gSXQgd2FzIGNhbmNlbGxlZCBvciBmYWlsZWQ6XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRlLmV4ZWNTdGF0ZSA9IHJlYXNvbjtcclxuXHJcbiAgICB2YXIgaW5JZGxlID0gcmVhc29uID09PSBBY3Rpdml0eS5zdGF0ZXMuaWRsZTtcclxuICAgIHZhciBleGVjQ29udGV4dCA9IGNhbGxDb250ZXh0LmV4ZWN1dGlvbkNvbnRleHQ7XHJcbiAgICBjYWxsQ29udGV4dCA9IGNhbGxDb250ZXh0LmJhY2soaW5JZGxlKTtcclxuXHJcbiAgICBpZiAoY2FsbENvbnRleHQpIHtcclxuICAgICAgICB2YXIgYm1OYW1lID0gc3BlY1N0cmluZ3MuYWN0aXZpdGllcy5jcmVhdGVWYWx1ZUNvbGxlY3RlZEJNTmFtZSh0aGlzKTtcclxuICAgICAgICBpZiAoZXhlY0NvbnRleHQuaXNCb29rbWFya0V4aXN0cyhibU5hbWUpKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmVtaXRTdGF0ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICBleGVjQ29udGV4dC5yZXN1bWVCb29rbWFya0luU2NvcGUoY2FsbENvbnRleHQsIGJtTmFtZSwgcmVhc29uLCByZXN1bHQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gV2UncmUgb24gcm9vdCwgZG9uZS5cclxuICAgICAgICAvLyBJZiB3ZiBpbiBpZGxlLCBidXQgdGhlcmUgYXJlIGludGVybmFsIGJvb2ttYXJrIHJldW1lIHJlcXVlc3QsXHJcbiAgICAgICAgLy8gdGhlbiBpbnN0ZWFkIG9mIGVtaXR0aW5nIGRvbmUsIHdlIGhhdmUgdG8gY29udGludWUgdGhlbS5cclxuICAgICAgICBpZiAoaW5JZGxlICYmIGV4ZWNDb250ZXh0LnByb2Nlc3NSZXN1bWVCb29rbWFya1F1ZXVlKCkpIHtcclxuICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIG5vdCBlbW1pdCBpZGxlIGV2ZW50LCBiZWNhdXNlIHRoZXJlIHdhcyBpbnRlcm5hbCBib29rbWFyayBjb250aW51dGF0aW9ucywgc28gd2UncmUgZG9uZS5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0ZS5lbWl0U3RhdGUocmVzdWx0KTtcclxufVxyXG5cclxuQWN0aXZpdHkucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCBvYmosIGVuZENhbGxiYWNrKSB7XHJcbiAgICAvLyBUT0RPOiBWYWxpZGF0ZSBjYWxsYmFjayBpbiBzY29wZVxyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBzY29wZSA9IGNhbGxDb250ZXh0LnNjb3BlO1xyXG4gICAgdmFyIGV4ZWNDb250ZXh0ID0gY2FsbENvbnRleHQuZXhlY3V0aW9uQ29udGV4dDtcclxuXHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopICYmIG9iai5sZW5ndGgpIHtcclxuICAgICAgICBzY29wZS5zZXQoXCJfX2NvbGxlY3RWYWx1ZXNcIiwgW10pO1xyXG4gICAgICAgIHZhciBhY3Rpdml0aWVzID0gW107XHJcbiAgICAgICAgb2JqLmZvckVhY2goXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodiBpbnN0YW5jZW9mIEFjdGl2aXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuZ2V0KFwiX19jb2xsZWN0VmFsdWVzXCIpLnB1c2goc3BlY1N0cmluZ3MuYWN0aXZpdGllcy5hc1ZhbHVlVG9Db2xsZWN0KHYpKTtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpdml0aWVzLnB1c2godik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS5nZXQoXCJfX2NvbGxlY3RWYWx1ZXNcIikucHVzaCh2KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGFjdGl2aXRpZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLnNldChcIl9fY29sbGVjdFBpY2tSb3VuZDJcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICBzY29wZS5zZXQoXCJfX2NvbGxlY3RFcnJvcnNcIiwgW10pO1xyXG4gICAgICAgICAgICBzY29wZS5zZXQoXCJfX2NvbGxlY3RDYW5jZWxDb3VudHNcIiwgMCk7XHJcbiAgICAgICAgICAgIHNjb3BlLnNldChcIl9fY29sbGVjdElkbGVDb3VudHNcIiwgMCk7XHJcbiAgICAgICAgICAgIHNjb3BlLnNldChcIl9fY29sbGVjdFJlbWFpbmluZ1wiLCBhY3Rpdml0aWVzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHZhciBlbmRCTSA9IHNjb3BlLnNldChcIl9fY29sbGVjdEVuZEJvb2ttYXJrTmFtZVwiLCBzcGVjU3RyaW5ncy5hY3Rpdml0aWVzLmNyZWF0ZUNvbGxlY3RpbmdDb21wbGV0ZWRCTU5hbWUoc2VsZikpO1xyXG4gICAgICAgICAgICBleGVjQ29udGV4dC5jcmVhdGVCb29rbWFyayhzZWxmLmlkLCBzY29wZS5nZXQoXCJfX2NvbGxlY3RFbmRCb29rbWFya05hbWVcIiksIGVuZENhbGxiYWNrKTtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IGFjdGl2aXRpZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRBY3Rpdml0eSA9IGFjdGl2aXRpZXNbaV07XHJcbiAgICAgICAgICAgICAgICBleGVjQ29udGV4dC5jcmVhdGVCb29rbWFyayhzZWxmLmlkLCBzcGVjU3RyaW5ncy5hY3Rpdml0aWVzLmNyZWF0ZVZhbHVlQ29sbGVjdGVkQk1OYW1lKGNoaWxkQWN0aXZpdHkpLCBcInJlc3VsdENvbGxlY3RlZFwiKTtcclxuICAgICAgICAgICAgICAgIGNoaWxkQWN0aXZpdHkuc3RhcnQoY2FsbENvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFleGVjQ29udGV4dC5pc0Jvb2ttYXJrRXhpc3RzKGVuZEJNKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGN1cnJlbnQgYWN0aXZpdHkgaGFzIGJlZW4gZW5kZWQgKGJ5IFBpY2sgZm9yIGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2NvcGUuZ2V0KFwiX19jb2xsZWN0VmFsdWVzXCIpO1xyXG4gICAgICAgICAgICBzY29wZS5kZWxldGUoXCJfX2NvbGxlY3RWYWx1ZXNcIik7XHJcbiAgICAgICAgICAgIHNjb3BlLmdldChlbmRDYWxsYmFjaykuY2FsbChzY29wZSwgY2FsbENvbnRleHQsIEFjdGl2aXR5LnN0YXRlcy5jb21wbGV0ZSwgcmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBBY3Rpdml0eSkge1xyXG4gICAgICAgIGV4ZWNDb250ZXh0LmNyZWF0ZUJvb2ttYXJrKHNlbGYuaWQsIHNwZWNTdHJpbmdzLmFjdGl2aXRpZXMuY3JlYXRlVmFsdWVDb2xsZWN0ZWRCTU5hbWUob2JqKSwgZW5kQ2FsbGJhY2spO1xyXG4gICAgICAgIG9iai5zdGFydChjYWxsQ29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBzY29wZS5nZXQoZW5kQ2FsbGJhY2spLmNhbGwoc2NvcGUsIGNhbGxDb250ZXh0LCBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUsIG9iaik7XHJcbiAgICB9XHJcbn1cclxuXHJcbkFjdGl2aXR5LnByb3RvdHlwZS5yZXN1bHRDb2xsZWN0ZWQgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0LCBib29rbWFyaykge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHZhciBleGVjQ29udGV4dCA9IGNhbGxDb250ZXh0LmV4ZWN1dGlvbkNvbnRleHQ7XHJcbiAgICB2YXIgY2hpbGRJZCA9IHNwZWNTdHJpbmdzLmdldFN0cmluZyhib29rbWFyay5uYW1lKTtcclxuICAgIHZhciBhcmdNYXJrZXIgPSBzcGVjU3RyaW5ncy5hY3Rpdml0aWVzLmFzVmFsdWVUb0NvbGxlY3QoY2hpbGRJZCk7XHJcbiAgICB2YXIgcmVzdWx0SW5kZXggPSBzZWxmLmdldChcIl9fY29sbGVjdFZhbHVlc1wiKS5pbmRleE9mKGFyZ01hcmtlcik7XHJcbiAgICB2YXIgcGlja0N1cnJlbnQgPSBmYWxzZTtcclxuICAgIGlmIChyZXN1bHRJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICBzZWxmLmdldChcIl9fY29sbGVjdEVycm9yc1wiKS5wdXNoKG5ldyBlcnJvcnMuQWN0aXZpdHlTdGF0ZUV4Y2VwdGlvbkVycm9yKFwiQWN0aXZpdHkgJ1wiICsgY2hpbGRJZCArIFwiJyBpcyBub3QgZm91bmQgaW4gX19jb2xsZWN0VmFsdWVzLlwiKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoc2VsZi5nZXQoXCJfX2NvbGxlY3RQaWNrXCIpICYmIChyZWFzb24gIT09IEFjdGl2aXR5LnN0YXRlcy5pZGxlIHx8IHNlbGYuZ2V0KFwiX19jb2xsZWN0UGlja1JvdW5kMlwiKSkpIHtcclxuICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIHBpY2sgY3VycmVudCByZXN1bHQsIGFuZCBzaHV0IGRvd24gb3RoZXJzOlxyXG4gICAgICAgICAgICB2YXIgaWRzID0gW107XHJcbiAgICAgICAgICAgIGZhc3QuZm9yRWFjaChzZWxmLmdldChcIl9fY29sbGVjdFZhbHVlc1wiKSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjdikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHNwZWNTdHJpbmdzLmdldFN0cmluZyhjdik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkICYmIGlkICE9IGNoaWxkSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRzLnB1c2goaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGVjQ29udGV4dC5kZWxldGVTY29wZU9mQWN0aXZpdHkoY2FsbENvbnRleHQsIGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlibU5hbWUgPSBzcGVjU3RyaW5ncy5hY3Rpdml0aWVzLmNyZWF0ZVZhbHVlQ29sbGVjdGVkQk1OYW1lKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0NvbnRleHQuZGVsZXRlQm9va21hcmsoaWJtTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGV4ZWNDb250ZXh0LmNhbmNlbEV4ZWN1dGlvbihpZHMpO1xyXG4gICAgICAgICAgICBwaWNrQ3VycmVudCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGU6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nZXQoXCJfX2NvbGxlY3RWYWx1ZXNcIilbcmVzdWx0SW5kZXhdID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpdml0eS5zdGF0ZXMuY2FuY2VsOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5jKFwiX19jb2xsZWN0Q2FuY2VsQ291bnRzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0KFwiX19jb2xsZWN0VmFsdWVzXCIpW3Jlc3VsdEluZGV4XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGl2aXR5LnN0YXRlcy5pZGxlOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5jKFwiX19jb2xsZWN0SWRsZUNvdW50c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aXZpdHkuc3RhdGVzLmZhaWw6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IG5ldyBlcnJvcnMuQWN0aXZpdHlTdGF0ZUV4Y2VwdGlvbkVycm9yKFwiVW5rbm93biBlcnJvci5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nZXQoXCJfX2NvbGxlY3RFcnJvcnNcIikucHVzaChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0KFwiX19jb2xsZWN0VmFsdWVzXCIpW3Jlc3VsdEluZGV4XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0KFwiX19jb2xsZWN0RXJyb3JzXCIpLnB1c2gobmV3IGVycm9ycy5BY3Rpdml0eVN0YXRlRXhjZXB0aW9uRXJyb3IoXCJCb29rbWFyayBzaG91bGQgbm90IGJlIGNvbnRpbnVlZCB3aXRoIHJlYXNvbiAnXCIgKyByZWFzb24gKyBcIicuXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmdldChcIl9fY29sbGVjdFZhbHVlc1wiKVtyZXN1bHRJbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuZGVjKFwiX19jb2xsZWN0UmVtYWluaW5nXCIpID09PSAwIHx8IHBpY2tDdXJyZW50KSB7XHJcbiAgICAgICAgdmFyIGVuZEJvb2ttYXJrTmFtZSA9IHNlbGYuZ2V0KFwiX19jb2xsZWN0RW5kQm9va21hcmtOYW1lXCIpO1xyXG5cclxuICAgICAgICBpZiAoIXBpY2tDdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHZhciByZWFzb247XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5nZXQoXCJfX2NvbGxlY3RFcnJvcnNcIikubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZWFzb24gPSBBY3Rpdml0eS5zdGF0ZXMuZmFpbDtcclxuICAgICAgICAgICAgICAgIHZhciBfX2NvbGxlY3RFcnJvcnMgPSBzZWxmLmdldChcIl9fY29sbGVjdEVycm9yc1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChfX2NvbGxlY3RFcnJvcnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX19jb2xsZWN0RXJyb3JzWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGVycm9ycy5BZ2dyZWdhdGVFcnJvcihfX2NvbGxlY3RFcnJvcnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuZ2V0KFwiX19jb2xsZWN0Q2FuY2VsQ291bnRzXCIpKSB7XHJcbiAgICAgICAgICAgICAgICByZWFzb24gPSBBY3Rpdml0eS5zdGF0ZXMuY2FuY2VsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuZ2V0KFwiX19jb2xsZWN0SWRsZUNvdW50c1wiKSkge1xyXG4gICAgICAgICAgICAgICAgcmVhc29uID0gQWN0aXZpdHkuc3RhdGVzLmlkbGU7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNldChcIl9fY29sbGVjdFJlbWFpbmluZ1wiLCAxKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuZGVjKFwiX19jb2xsZWN0SWRsZUNvdW50c1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmdldChcIl9fY29sbGVjdFBpY2tcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSdyZSBpbiBwaWNrIG1vZGUsIGFuZCBhbGwgcmVzdWx0IHdhcyBpZGxlXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXQoXCJfX2NvbGxlY3RQaWNrUm91bmQyXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVhc29uID0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5nZXQoXCJfX2NvbGxlY3RWYWx1ZXNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc2VsZi5nZXQoXCJfX2NvbGxlY3RSZW1haW5pbmdcIikpIHtcclxuICAgICAgICAgICAgc2VsZi5kZWxldGUoXCJfX2NvbGxlY3RWYWx1ZXNcIik7XHJcbiAgICAgICAgICAgIHNlbGYuZGVsZXRlKFwiX19jb2xsZWN0UmVtYWluaW5nXCIpO1xyXG4gICAgICAgICAgICBzZWxmLmRlbGV0ZShcIl9fY29sbGVjdElkbGVDb3VudHNcIik7XHJcbiAgICAgICAgICAgIHNlbGYuZGVsZXRlKFwiX19jb2xsZWN0RW5kQm9va21hcmtOYW1lXCIpO1xyXG4gICAgICAgICAgICBzZWxmLmRlbGV0ZShcIl9fY29sbGVjdENhbmNlbENvdW50c1wiKTtcclxuICAgICAgICAgICAgc2VsZi5kZWxldGUoXCJfX2NvbGxlY3RFcnJvcnNcIik7XHJcbiAgICAgICAgICAgIHNlbGYuZGVsZXRlKFwiX19jb2xsZWN0UGlja1wiKTtcclxuICAgICAgICAgICAgc2VsZi5kZWxldGUoXCJfX2NvbGxlY3RQaWNrUm91bmQyXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhlY0NvbnRleHQucmVzdW1lQm9va21hcmtJblNjb3BlKGNhbGxDb250ZXh0LCBlbmRCb29rbWFya05hbWUsIHJlYXNvbiwgcmVzdWx0KTtcclxuICAgIH1cclxufVxyXG4vKiBSVU4gKi9cclxuXHJcbi8qIFNDT1BFICovXHJcbkFjdGl2aXR5LnByb3RvdHlwZS5fZ2V0U2NvcGVLZXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgaWYgKCFzZWxmLl9zY29wZUtleXMpIHtcclxuICAgICAgICBzZWxmLl9zY29wZUtleXMgPSBbXTtcclxuICAgICAgICBmYXN0LmZvckVhY2goc2VsZi5nZXRLZXlzKCksIGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYubm9uU2NvcGVkUHJvcGVydGllcy5leGlzdHMoa2V5KSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoQWN0aXZpdHkucHJvdG90eXBlW2tleV0pIHJldHVybjtcclxuICAgICAgICAgICAgc2VsZi5fc2NvcGVLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBzZWxmLl9zY29wZUtleXM7XHJcbn1cclxuXHJcbkFjdGl2aXR5LnByb3RvdHlwZS5jcmVhdGVTY29wZVBhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgaWYgKHRoaXMuX2NyZWF0ZVNjb3BlUGFydEltcGwgPT09IG51bGwpIHtcclxuICAgICAgICB2YXIgZmlyc3QgPSB0cnVlO1xyXG4gICAgICAgIHZhciBzcmMgPSBcInJldHVybiB7XCI7XHJcbiAgICAgICAgZmFzdC5mb3JFYWNoKHNlbGYuX2dldFNjb3BlS2V5cygpLCBmdW5jdGlvbiAoZmllbGROYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChmaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNyYyArPSBcIixcXG5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHNlbGZbZmllbGROYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgIHNyYyArPSBmaWVsZE5hbWUgKyBcIjpfLmNsb25lKGEuXCIgKyBmaWVsZE5hbWUgKyBcIiwgdHJ1ZSlcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNyYyArPSBmaWVsZE5hbWUgKyBcIjphLlwiICsgZmllbGROYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc3JjICs9IFwifVwiO1xyXG5cclxuICAgICAgICB0aGlzLl9jcmVhdGVTY29wZVBhcnRJbXBsID0gbmV3IEZ1bmN0aW9uKFwiYSxfXCIsIHNyYyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZVNjb3BlUGFydEltcGwodGhpcywgXyk7XHJcbn1cclxuLyogU0NPUEUgKi9cclxuXHJcbkFjdGl2aXR5LnN0YXRlcyA9IGVudW1zLkFjdGl2aXR5U3RhdGVzO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBY3Rpdml0eTtcclxuIl19
