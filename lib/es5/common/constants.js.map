{"version":3,"names":[],"mappings":"","sources":["common/constants.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet _ = require(\"lodash\");\r\n\r\nconst maxLen = \"collectingCompletedBookmark\".length;\r\nconst identity = \"-:\\|$WF4N$|/:-\";\r\n\r\nfunction make(name) {\r\n    let inner = _.snakeCase(name).toUpperCase();\r\n    if (inner.length > maxLen) {\r\n        inner = inner.substr(0, maxLen);\r\n    }\r\n    else while (inner.length < maxLen) {\r\n        inner += \"_\";\r\n    }\r\n    return identity + inner;\r\n}\r\n\r\nlet constants = {\r\n    identity: identity,\r\n    markers: {\r\n        valueCollectedBookmark: make(\"mValueCollectedBookmark\"),\r\n        collectingCompletedBookmark: make(\"mCollectingCompletedBookmark\"),\r\n        beginMethodBookmark: make(\"mBeginMethodBookmark\"),\r\n        activityProperty: make(\"mActivityProperty\"),\r\n        activityInstance: make(\"mActivityInstance\"),\r\n        keySeparator: make(\"mKeySeparator\"),\r\n        nope: make(\"mNope\"),\r\n        delayToMethodNamePrefix: make(\"mDelayToMethodNamePrefix\"),\r\n        $parent: make(\"mParent\")\r\n    },\r\n    ids: {\r\n        initialScope: make(\"mInitialScope\")\r\n    },\r\n    types: {\r\n        error: make(\"mError\"),\r\n        schedulingState: make(\"mSchedulingState\"),\r\n        date: make(\"mDate\"),\r\n        set: make(\"mSet\"),\r\n        map: make(\"mMap\"),\r\n        rex: make(\"mRex\"),\r\n        object: make(\"mObject\")\r\n    }\r\n};\r\n\r\nmodule.exports = constants;\r\n"],"file":"common/constants.js","sourceRoot":"/source/"}