{"version":3,"names":[],"mappings":"","sources":["common/simpleProxy.js"],"sourcesContent":["\"use strict\";\r\nlet _ = require(\"lodash\");\r\nlet assert = require(\"better-assert\");\r\n\r\nfunction SimpleProxy(backend) {\r\n    assert(_.isObject(backend));\r\n    let self = this;\r\n\r\n    Object.defineProperty(this, \"_backend\", {\r\n        enumerable: false,\r\n        value: backend\r\n    });\r\n    Object.defineProperty(this, \"_backendKeys\", {\r\n        enumerable: false,\r\n        writable: false,\r\n        value: []\r\n    });\r\n    Object.defineProperty(this, \"$keys\", {\r\n        enumerable: false,\r\n        get: function () {\r\n            return backend.getKeys(self);\r\n        }\r\n    });\r\n    this.update(SimpleProxy.updateMode.init);\r\n}\r\n\r\nSimpleProxy.updateMode = {\r\n    twoWay: 0,\r\n    oneWay: 1,\r\n    init: 2\r\n};\r\n\r\nObject.defineProperties(SimpleProxy.prototype, {\r\n    _skipKeys: {\r\n        enumerable: false,\r\n        writable: false,\r\n        value: new Set([\"getKeys\", \"getValue\", \"setValue\"])\r\n    },\r\n    update: {\r\n        enumerable: false,\r\n        writable: false,\r\n        value: function(mode) {\r\n            let self = this;\r\n            if (mode === SimpleProxy.updateMode.init) {\r\n                for (let newKey of this._backend.getKeys(this)) {\r\n                    if (_.isUndefined(this[newKey])) { // This makes the list as unique\r\n                        this._backendKeys.push(newKey);\r\n                        Object.defineProperty(\r\n                            self,\r\n                            newKey,\r\n                            {\r\n                                enumerable: true,\r\n                                configurable: true,\r\n                                get: function () {\r\n                                    return self._backend.getValue(self, newKey);\r\n                                },\r\n                                set: function (value) {\r\n                                    self._backend.setValue(self, newKey, value);\r\n                                }\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            else if (mode === SimpleProxy.updateMode.oneWay) {\r\n                let currBackendKeys = new Set(this._backend.getKeys(this));\r\n                for (let key in this) {\r\n                    if (!currBackendKeys.has(key)) {\r\n                        // new key on proxy, and not defined on backend:\r\n                        this._backend.setValue(self, key, this[key]);\r\n                        Object.defineProperty(\r\n                            self,\r\n                            key,\r\n                            {\r\n                                enumerable: true,\r\n                                configurable: true,\r\n                                get: function () {\r\n                                    return self._backend.getValue(self, key);\r\n                                },\r\n                                set: function (value) {\r\n                                    self._backend.setValue(self, key, value);\r\n                                }\r\n                            }\r\n                        );\r\n                        this._backendKeys.push(key);\r\n                    }\r\n                    else {\r\n                        currBackendKeys.delete(key);\r\n                    }\r\n                }\r\n                for (let oldKey of currBackendKeys) {\r\n                    delete this[oldKey];\r\n                }\r\n            }\r\n            else {\r\n                let prevBackendKeys = new Set(this._backendKeys);\r\n                let currBackendKeys = new Set(this._backend.getKeys(this));\r\n                let backedKeys = new Set();\r\n\r\n                for (let key in this) {\r\n                    if (!prevBackendKeys.has(key) && !currBackendKeys.has(key)) {\r\n                        // new key on proxy, and not defined on backend:\r\n                        this._backend.setValue(self, key, this[key]);\r\n                        Object.defineProperty(\r\n                            self,\r\n                            key,\r\n                            {\r\n                                enumerable: true,\r\n                                configurable: true,\r\n                                get: function () {\r\n                                    return self._backend.getValue(self, key);\r\n                                },\r\n                                set: function (value) {\r\n                                    self._backend.setValue(self, key, value);\r\n                                }\r\n                            }\r\n                        );\r\n                        backedKeys.add(key);\r\n                    }\r\n                }\r\n\r\n                this._backendKeys.length = 0;\r\n                for (let newKey of currBackendKeys) {\r\n                    if (!this._skipKeys.has(newKey)) {\r\n                        this._backendKeys.push(newKey);\r\n                        if (!prevBackendKeys.has(newKey) && !backedKeys.has(newKey)) {\r\n                            Object.defineProperty(\r\n                                self,\r\n                                newKey,\r\n                                {\r\n                                    enumerable: true,\r\n                                    configurable: true,\r\n                                    get: function () {\r\n                                        return self._backend.getValue(self, newKey);\r\n                                    },\r\n                                    set: function (value) {\r\n                                        self._backend.setValue(self, newKey, value);\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                        else {\r\n                            prevBackendKeys.delete(newKey);\r\n                        }\r\n                    }\r\n                }\r\n                for (let oldKey of prevBackendKeys) {\r\n                    delete this[oldKey];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    delete: {\r\n        enumerable: false,\r\n        writable: false,\r\n        value: function(key) {\r\n            delete this[key];\r\n            this._backend.delete(this, key);\r\n        }\r\n    }\r\n});\r\n\r\nmodule.exports = SimpleProxy;"],"file":"common/simpleProxy.js","sourceRoot":"/source/"}