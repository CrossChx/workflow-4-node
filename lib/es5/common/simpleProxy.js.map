{"version":3,"names":[],"mappings":"","sources":["common/simpleProxy.js"],"sourcesContent":["\"use strict\";\nlet _ = require(\"lodash\");\nlet assert = require(\"better-assert\");\n\nfunction SimpleProxy(backend) {\n    assert(_.isObject(backend));\n    let self = this;\n\n    Object.defineProperty(this, \"_backend\", {\n        enumerable: false,\n        value: backend\n    });\n    Object.defineProperty(this, \"_backendKeys\", {\n        enumerable: false,\n        writable: false,\n        value: []\n    });\n    Object.defineProperty(this, \"$keys\", {\n        enumerable: false,\n        get: function () {\n            return backend.getKeys(self);\n        }\n    });\n    this.update(SimpleProxy.updateMode.init);\n}\n\nSimpleProxy.updateMode = {\n    twoWay: 0,\n    oneWay: 1,\n    init: 2\n};\n\nObject.defineProperties(SimpleProxy.prototype, {\n    _skipKeys: {\n        enumerable: false,\n        writable: false,\n        value: new Set([\"getKeys\", \"getValue\", \"setValue\"])\n    },\n    update: {\n        enumerable: false,\n        writable: false,\n        value: function(mode) {\n            let self = this;\n            if (mode === SimpleProxy.updateMode.init) {\n                for (let newKey of this._backend.getKeys(this)) {\n                    if (_.isUndefined(this[newKey])) { // This makes the list as unique\n                        this._backendKeys.push(newKey);\n                        Object.defineProperty(\n                            self,\n                            newKey,\n                            {\n                                enumerable: true,\n                                configurable: true,\n                                get: function () {\n                                    return self._backend.getValue(self, newKey);\n                                },\n                                set: function (value) {\n                                    self._backend.setValue(self, newKey, value);\n                                }\n                            }\n                        );\n                    }\n                }\n            }\n            else if (mode === SimpleProxy.updateMode.oneWay) {\n                let currBackendKeys = new Set(this._backend.getKeys(this));\n                for (let key in this) {\n                    if (!currBackendKeys.has(key)) {\n                        // new key on proxy, and not defined on backend:\n                        this._backend.setValue(self, key, this[key]);\n                        Object.defineProperty(\n                            self,\n                            key,\n                            {\n                                enumerable: true,\n                                configurable: true,\n                                get: function () {\n                                    return self._backend.getValue(self, key);\n                                },\n                                set: function (value) {\n                                    self._backend.setValue(self, key, value);\n                                }\n                            }\n                        );\n                        this._backendKeys.push(key);\n                    }\n                    else {\n                        currBackendKeys.delete(key);\n                    }\n                }\n                for (let oldKey of currBackendKeys) {\n                    delete this[oldKey];\n                }\n            }\n            else {\n                let prevBackendKeys = new Set(this._backendKeys);\n                let currBackendKeys = new Set(this._backend.getKeys(this));\n                let backedKeys = new Set();\n\n                for (let key in this) {\n                    if (!prevBackendKeys.has(key) && !currBackendKeys.has(key)) {\n                        // new key on proxy, and not defined on backend:\n                        this._backend.setValue(self, key, this[key]);\n                        Object.defineProperty(\n                            self,\n                            key,\n                            {\n                                enumerable: true,\n                                configurable: true,\n                                get: function () {\n                                    return self._backend.getValue(self, key);\n                                },\n                                set: function (value) {\n                                    self._backend.setValue(self, key, value);\n                                }\n                            }\n                        );\n                        backedKeys.add(key);\n                    }\n                }\n\n                this._backendKeys.length = 0;\n                for (let newKey of currBackendKeys) {\n                    if (!this._skipKeys.has(newKey)) {\n                        this._backendKeys.push(newKey);\n                        if (!prevBackendKeys.has(newKey) && !backedKeys.has(newKey)) {\n                            Object.defineProperty(\n                                self,\n                                newKey,\n                                {\n                                    enumerable: true,\n                                    configurable: true,\n                                    get: function () {\n                                        return self._backend.getValue(self, newKey);\n                                    },\n                                    set: function (value) {\n                                        self._backend.setValue(self, newKey, value);\n                                    }\n                                }\n                            );\n                        }\n                        else {\n                            prevBackendKeys.delete(newKey);\n                        }\n                    }\n                }\n                for (let oldKey of prevBackendKeys) {\n                    delete this[oldKey];\n                }\n            }\n        }\n    },\n    delete: {\n        enumerable: false,\n        writable: false,\n        value: function(key) {\n            delete this[key];\n            this._backend.delete(this, key);\n        }\n    }\n});\n\nmodule.exports = SimpleProxy;"],"file":"common/simpleProxy.js","sourceRoot":"/source/"}