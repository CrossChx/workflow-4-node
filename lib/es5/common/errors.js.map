{"version":3,"names":[],"mappings":"","sources":["common/errors.js"],"sourcesContent":["\"use strict\";\n\nlet util = require(\"util\");\nlet constants = require(\"./constants\");\n\nfunction ActivityStateExceptionError(message) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(ActivityStateExceptionError, Error);\n\nfunction Cancelled() {\n    ActivityStateExceptionError.call(this, \"Activity execution has been cancelled.\");\n}\n\nutil.inherits(Cancelled, ActivityStateExceptionError);\n\nfunction Idle(message) {\n    ActivityStateExceptionError.call(this, message || \"Activity is idle.\");\n}\n\nutil.inherits(Idle, ActivityStateExceptionError);\n\nfunction ActivityMarkupError(message) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(ActivityMarkupError, Error);\n\nfunction ActivityRuntimeError(message) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(ActivityRuntimeError, Error);\n\nfunction BookmarkNotFoundError(message) {\n    ActivityRuntimeError.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(BookmarkNotFoundError, ActivityRuntimeError);\n\nfunction AggregateError(errors) {\n    let message = \"\";\n    if (errors.length) {\n        message = \" First: \" + errors[0].message;\n    }\n    ActivityRuntimeError.call(this, \"Many errors occurred.\" + message);\n    this.errors = errors;\n}\n\nutil.inherits(AggregateError, ActivityRuntimeError);\n\nfunction ValidationError(message) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(ValidationError, Error);\n\nfunction TimeoutError(message) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(TimeoutError, Error);\n\nfunction WorkflowError(message) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(WorkflowError, Error);\n\nfunction MethodNotFoundError(message) {\n    WorkflowError.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(MethodNotFoundError, WorkflowError);\n\nfunction MethodIsNotAccessibleError(message) {\n    WorkflowError.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(MethodIsNotAccessibleError, WorkflowError);\n\nfunction WorkflowNotFoundError(message) {\n    WorkflowError.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n}\n\nutil.inherits(WorkflowNotFoundError, WorkflowError);\n\nmodule.exports.ActivityStateExceptionError = ActivityStateExceptionError;\nmodule.exports.ActivityExceptionError = ActivityStateExceptionError;\nmodule.exports.Cancelled = Cancelled;\nmodule.exports.Idle = Idle;\nmodule.exports.AggregateError = AggregateError;\nmodule.exports.ActivityMarkupError = ActivityMarkupError;\nmodule.exports.ActivityRuntimeError = ActivityRuntimeError;\nmodule.exports.ValidationError = ValidationError;\nmodule.exports.TimeoutError = TimeoutError;\nmodule.exports.WorkflowError = WorkflowError;\nmodule.exports.MethodNotFoundError = MethodNotFoundError;\nmodule.exports.MethodIsNotAccessibleError = MethodIsNotAccessibleError;\nmodule.exports.WorkflowNotFoundError = WorkflowNotFoundError;\nmodule.exports.BookmarkNotFoundError = BookmarkNotFoundError;"],"file":"common/errors.js","sourceRoot":"/source/"}