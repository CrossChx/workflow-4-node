{"version":3,"names":[],"mappings":"","sources":["common/specStrings.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet constants = require(\"./constants\");\r\nlet _ = require(\"lodash\");\r\n\r\nlet guidLength = constants.markers.activityInstance.length;\r\n\r\nfunction makeSpecString(guid, str) {\r\n    return guid + \":\" + str;\r\n}\r\n\r\nfunction isSpecString(specString) {\r\n    if (_.isString(specString) && specString.length > guidLength + 1 && specString[guidLength] === \":\") {\r\n        let il = constants.identity.length;\r\n        for (let i = 0; i < il; i++) {\r\n            if (constants.identity[i] !== specString[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getGuid(specString) {\r\n    if (!isSpecString(specString)) {\r\n        return null;\r\n    }\r\n    return specString.substr(0, guidLength);\r\n}\r\n\r\nfunction getString(specString) {\r\n    if (!isSpecString(specString)) {\r\n        return null;\r\n    }\r\n    return specString.substr(guidLength + 1);\r\n}\r\n\r\nfunction splitSpecString(specString) {\r\n    if (!isSpecString(specString)) {\r\n        return null;\r\n    }\r\n    return {\r\n        guid: specString.substr(0, guidLength),\r\n        str: specString.substr(guidLength + 1)\r\n    };\r\n}\r\n\r\nfunction makSpecForActivity(guid, activityId) {\r\n    if (!_.isString(activityId)) {\r\n        throw new TypeError(`Activity id '${activityId}' is not a string.`);\r\n    }\r\n    return makeSpecString(guid, activityId);\r\n}\r\n\r\nlet specStrings = {\r\n    is: isSpecString,\r\n    getGuid: getGuid,\r\n    getString: getString,\r\n    split: splitSpecString,\r\n    activities: {\r\n        createCollectingCompletedBMName: function (activityId) {\r\n            return makSpecForActivity(constants.markers.collectingCompletedBookmark, activityId);\r\n        },\r\n        createValueCollectedBMName: function (activityId) {\r\n            return makSpecForActivity(constants.markers.valueCollectedBookmark, activityId);\r\n        }\r\n    },\r\n    hosting: {\r\n        createBeginMethodBMName: function (methodName) {\r\n            return makeSpecString(constants.markers.beginMethodBookmark, methodName);\r\n        },\r\n        createDelayToMethodName: function (id) {\r\n            return makeSpecString(constants.markers.delayToMethodNamePrefix, id);\r\n        },\r\n        createActivityPropertyPart: function (methodName) {\r\n            return makeSpecString(constants.markers.activityProperty, methodName);\r\n        },\r\n        createActivityInstancePart: function (activityId) {\r\n            return constants.markers.activityInstance + \":\" + activityId;\r\n        },\r\n        getActivityPropertyName: function (obj) {\r\n            let parts = splitSpecString(obj);\r\n            if (parts && parts.guid === constants.markers.activityProperty) {\r\n                return parts.str;\r\n            }\r\n            return null;\r\n        },\r\n        getInstanceId: function (obj) {\r\n            let parts = splitSpecString(obj);\r\n            if (parts && parts.guid === constants.markers.activityInstance) {\r\n                return parts.str;\r\n            }\r\n            return null;\r\n        },\r\n        isDelayToMethodName: function (obj) {\r\n            let parts = splitSpecString(obj);\r\n            return parts && parts.guid === constants.markers.delayToMethodNamePrefix;\r\n        },\r\n        doubleKeys: function (key1, key2) {\r\n            return key1 + constants.markers.keySeparator + key2;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = specStrings;\r\n"],"file":"common/specStrings.js","sourceRoot":"/source/"}