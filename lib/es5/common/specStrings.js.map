{"version":3,"names":[],"mappings":"","sources":["common/specStrings.js"],"sourcesContent":["\"use strict\";\n\nlet constants = require(\"./constants\");\nlet _ = require(\"lodash\");\n\nlet guidLength = constants.markers.activityInstance.length;\n\nfunction makeSpecString(guid, str) {\n    return guid + \":\" + str;\n}\n\nfunction isSpecString(specString) {\n    if (_.isString(specString) && specString.length > guidLength + 1 && specString[guidLength] === \":\") {\n        let il = constants.identity.length;\n        for (let i = 0; i < il; i++) {\n            if (constants.identity[i] !== specString[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction getGuid(specString) {\n    if (!isSpecString(specString)) {\n        return null;\n    }\n    return specString.substr(0, guidLength);\n}\n\nfunction getString(specString) {\n    if (!isSpecString(specString)) {\n        return null;\n    }\n    return specString.substr(guidLength + 1);\n}\n\nfunction splitSpecString(specString) {\n    if (!isSpecString(specString)) {\n        return null;\n    }\n    return {\n        guid: specString.substr(0, guidLength),\n        str: specString.substr(guidLength + 1)\n    };\n}\n\nfunction makSpecForActivity(guid, activityId) {\n    if (!_.isString(activityId)) {\n        throw new TypeError(`Activity id '${activityId}' is not a string.`);\n    }\n    return makeSpecString(guid, activityId);\n}\n\nlet specStrings = {\n    is: isSpecString,\n    getGuid: getGuid,\n    getString: getString,\n    split: splitSpecString,\n    activities: {\n        createCollectingCompletedBMName: function (activityId) {\n            return makSpecForActivity(constants.markers.collectingCompletedBookmark, activityId);\n        },\n        createValueCollectedBMName: function (activityId) {\n            return makSpecForActivity(constants.markers.valueCollectedBookmark, activityId);\n        }\n    },\n    hosting: {\n        createBeginMethodBMName: function (methodName) {\n            return makeSpecString(constants.markers.beginMethodBookmark, methodName);\n        },\n        createDelayToMethodName: function (id) {\n            return makeSpecString(constants.markers.delayToMethodNamePrefix, id);\n        },\n        createActivityPropertyPart: function (methodName) {\n            return makeSpecString(constants.markers.activityProperty, methodName);\n        },\n        createActivityInstancePart: function (activityId) {\n            return constants.markers.activityInstance + \":\" + activityId;\n        },\n        getActivityPropertyName: function (obj) {\n            let parts = splitSpecString(obj);\n            if (parts && parts.guid === constants.markers.activityProperty) {\n                return parts.str;\n            }\n            return null;\n        },\n        getInstanceId: function (obj) {\n            let parts = splitSpecString(obj);\n            if (parts && parts.guid === constants.markers.activityInstance) {\n                return parts.str;\n            }\n            return null;\n        },\n        isDelayToMethodName: function (obj) {\n            let parts = splitSpecString(obj);\n            return parts && parts.guid === constants.markers.delayToMethodNamePrefix;\n        },\n        doubleKeys: function (key1, key2) {\n            return key1 + constants.markers.keySeparator + key2;\n        }\n    }\n}\n\nmodule.exports = specStrings;\n"],"file":"common/specStrings.js","sourceRoot":"/source/"}