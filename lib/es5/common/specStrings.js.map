{"version":3,"sources":["common/specStrings.js"],"names":[],"mappings":"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","file":"common/specStrings.js","sourcesContent":["\"use strict\";\n\nlet constants = require(\"./constants\");\nlet _ = require(\"lodash\");\n\nlet guidLength = constants.markers.activityInstance.length;\n\nfunction makeSpecString(guid, str) {\n    return guid + \":\" + str;\n}\n\nfunction isSpecString(specString) {\n    if (_.isString(specString) && specString.length > guidLength + 1 && specString[guidLength] === \":\") {\n        let il = constants.identity.length;\n        for (let i = 0; i < il; i++) {\n            if (constants.identity[i] !== specString[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction getGuid(specString) {\n    if (!isSpecString(specString)) {\n        return null;\n    }\n    return specString.substr(0, guidLength);\n}\n\nfunction getString(specString) {\n    if (!isSpecString(specString)) {\n        return null;\n    }\n    return specString.substr(guidLength + 1);\n}\n\nfunction splitSpecString(specString) {\n    if (!isSpecString(specString)) {\n        return null;\n    }\n    return {\n        guid: specString.substr(0, guidLength),\n        str: specString.substr(guidLength + 1)\n    };\n}\n\nfunction makSpecForActivity(guid, activityId) {\n    if (!_.isString(activityId)) {\n        throw new TypeError(`Activity id '${activityId}' is not a string.`);\n    }\n    return makeSpecString(guid, activityId);\n}\n\nlet specStrings = {\n    is: isSpecString,\n    getGuid: getGuid,\n    getString: getString,\n    split: splitSpecString,\n    activities: {\n        createCollectingCompletedBMName: function (activityId) {\n            return makSpecForActivity(constants.markers.collectingCompletedBookmark, activityId);\n        },\n        createValueCollectedBMName: function (activityId) {\n            return makSpecForActivity(constants.markers.valueCollectedBookmark, activityId);\n        }\n    },\n    hosting: {\n        createBeginMethodBMName: function (methodName) {\n            return makeSpecString(constants.markers.beginMethodBookmark, methodName);\n        },\n        createDelayToMethodName: function (id) {\n            return makeSpecString(constants.markers.delayToMethodNamePrefix, id);\n        },\n        createActivityPropertyPart: function (methodName) {\n            return makeSpecString(constants.markers.activityProperty, methodName);\n        },\n        createActivityInstancePart: function (activityId) {\n            return constants.markers.activityInstance + \":\" + activityId;\n        },\n        getActivityPropertyName: function (obj) {\n            let parts = splitSpecString(obj);\n            if (parts && parts.guid === constants.markers.activityProperty) {\n                return parts.str;\n            }\n            return null;\n        },\n        getInstanceId: function (obj) {\n            let parts = splitSpecString(obj);\n            if (parts && parts.guid === constants.markers.activityInstance) {\n                return parts.str;\n            }\n            return null;\n        },\n        isDelayToMethodName: function (obj) {\n            let parts = splitSpecString(obj);\n            return parts && parts.guid === constants.markers.delayToMethodNamePrefix;\n        },\n        doubleKeys: function (key1, key2) {\n            return key1 + constants.markers.keySeparator + key2;\n        }\n    }\n}\n\nmodule.exports = specStrings;\n"],"sourceRoot":"/source/"}