{"version":3,"sources":["common/converters.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AACb,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACtC,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE1B,MAAM,CAAC,OAAO,GAAG;AACb,cAAU,EAAE,oBAAU,GAAG,EAAE;AACvB,YAAI,CAAC,GAAG,EAAE;AACN,mBAAO,IAAI,CAAC;SACf;AACD,cAAM,CAAC,GAAG,YAAY,GAAG,CAAC,CAAC;AAC3B,YAAI,IAAI,GAAG,EAAE,CAAC;;;;;;AACd,iCAAgB,GAAG,CAAC,OAAO,EAAE,8HAAE;oBAAtB,GAAG;;AACR,oBAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAClB;;;;;;;;;;;;;;;;AACD,eAAO,IAAI,CAAC;KACf;AACD,cAAU,EAAE,oBAAU,IAAI,EAAE;AACxB,YAAI,CAAC,IAAI,EAAE;AACP,mBAAO,IAAI,CAAC;SACf;AACD,cAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACxB,YAAI,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;;;;;;AACpB,kCAAgB,IAAI,mIAAE;oBAAb,GAAG;;AACR,mBAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;aAC3B;;;;;;;;;;;;;;;;AACD,eAAO,GAAG,CAAC;KACd;AACD,cAAU,EAAE,oBAAU,GAAG,EAAE;AACvB,YAAI,CAAC,GAAG,EAAE;AACN,mBAAO,IAAI,CAAC;SACf;AACD,cAAM,CAAC,GAAG,YAAY,GAAG,CAAC,CAAC;AAC3B,YAAI,IAAI,GAAG,EAAE,CAAC;;;;;;AACd,kCAAgB,GAAG,CAAC,MAAM,EAAE,mIAAE;oBAArB,GAAG;;AACR,oBAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAClB;;;;;;;;;;;;;;;;AACD,eAAO,IAAI,CAAC;KACf;AACD,cAAU,EAAE,oBAAU,IAAI,EAAE;AACxB,YAAI,CAAC,IAAI,EAAE;AACP,mBAAO,IAAI,CAAC;SACf;AACD,cAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACxB,YAAI,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;;;;;;AACpB,kCAAgB,IAAI,mIAAE;oBAAb,GAAG;;AACR,mBAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aAChB;;;;;;;;;;;;;;;;AACD,eAAO,GAAG,CAAC;KACd;CACJ,CAAC","file":"common/converters.js","sourcesContent":["\"use strict\";\nlet assert = require(\"better-assert\");\nlet _ = require(\"lodash\");\n\nmodule.exports = {\n    mapToArray: function (map) {\n        if (!map) {\n            return null;\n        }\n        assert(map instanceof Map);\n        let json = [];\n        for (let kvp of map.entries()) {\n            json.push(kvp);\n        }\n        return json;\n    },\n    arrayToMap: function (json) {\n        if (!json) {\n            return null;\n        }\n        assert(_.isArray(json));\n        let map = new Map();\n        for (let kvp of json) {\n            map.set(kvp[0], kvp[1]);\n        }\n        return map;\n    },\n    setToArray: function (set) {\n        if (!set) {\n            return null;\n        }\n        assert(set instanceof Set);\n        let json = [];\n        for (let val of set.values()) {\n            json.push(val);\n        }\n        return json;\n    },\n    arrayToSet: function (json) {\n        if (!json) {\n            return null;\n        }\n        assert(_.isArray(json));\n        let set = new Set();\n        for (let val of json) {\n            set.add(val);\n        }\n        return set;\n    }\n};"],"sourceRoot":"/source/"}