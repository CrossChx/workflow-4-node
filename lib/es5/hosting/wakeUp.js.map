{"version":3,"names":[],"mappings":"","sources":["hosting/wakeUp.js"],"sourcesContent":["\"use strict\";\n\nlet EventEmitter = require(\"events\").EventEmitter;\nlet Bluebird = require(\"bluebird\");\nlet async = require(\"../common\").asyncHelpers.async;\nlet debug = require(\"debug\")(\"wf4node:WakeUp\");\nlet util = require(\"util\");\n\nfunction WakeUp(knownInstaStore, persistence, options) {\n    EventEmitter.call(this);\n\n    this.knownInstaStore = knownInstaStore;\n    this.persistence = persistence;\n    this.options = options || {};\n    this._working = false;\n    this._timeout = null;\n    this._batchSize = this.options.batchSize || 10;\n}\n\nutil.inherits(WakeUp, EventEmitter);\n\nWakeUp.prototype.start = function () {\n    if (!this._timeout) {\n        debug(\"Start.\");\n        let self = this;\n        this._timeout = setTimeout(function () { self._step(); }, this.options.interval || 5000);\n    }\n};\n\nWakeUp.prototype.stop = function () {\n    if (this._timeout) {\n        debug(\"Stop.\");\n        clearTimeout(this._timeout);\n        this._timeout = null;\n    }\n};\n\nWakeUp.prototype._step = async(function*() {\n    let self = this;\n    try {\n        if (this._working) {\n            debug(\"Skipping current step because work in progress.\");\n            return;\n        }\n        debug(\"Starting next step.\");\n        this._working = true;\n        try {\n            let wakeupables = yield this._getNextWakeupables();\n            if (wakeupables && wakeupables.length) {\n                debug(\"%d selected to wake up.\", wakeupables.length);\n                let tasks = [];\n                let count = 0;\n                for (let wakeupable of wakeupables) {\n                    tasks.push(async(function*() {\n                        if (count >= self._batchSize) {\n                            return;\n                        }\n                        debug(\"Waking up workflow %s, id: %s\", wakeupable.workflowName, wakeupable.instanceId);\n                        wakeupable.result = {};\n                        let promise = new Bluebird(function (resolve, reject) {\n                            wakeupable.result.resolve = resolve;\n                            wakeupable.result.reject = reject;\n                        });\n                        self.emit(\"continue\", wakeupable);\n                        try {\n                            yield promise;\n                            count++;\n                            debug(\"Processing delay completed.\");\n                        }\n                        catch (e) {\n                            debug(\"Processing delay error: %s\", e.stack);\n                            self.emit(\"error\", e);\n                        }\n                    })());\n                }\n\n                let results = yield Bluebird.settle(tasks);\n                for (let result of results) {\n                    if (result.isRejected()) {\n                        throw result.reason();\n                    }\n                }\n            }\n            else {\n                debug(\"There is no instance to wake up.\");\n            }\n        }\n        catch (e) {\n            this.emit(\"error\", e);\n        }\n        finally {\n            debug(\"Next step completed.\");\n            this._working = false;\n        }\n    }\n    finally {\n        if (this._timeout) {\n            this._timeout = setTimeout(function () { self._step(); }, this.options.interval || 5000);\n        }\n    }\n});\n\nWakeUp.prototype._getNextWakeupables = async(function* () {\n    if (this.persistence) {\n        return yield this.persistence.getNextWakeupables(this._batchSize * 1.5);\n    }\n    else {\n        return this.knownInstaStore.getNextWakeupables(this._batchSize * 1.5);\n    }\n});\n\nmodule.exports = WakeUp;"],"file":"hosting/wakeUp.js","sourceRoot":"/source/"}