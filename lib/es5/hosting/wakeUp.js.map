{"version":3,"names":[],"mappings":"","sources":["hosting/wakeUp.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet EventEmitter = require(\"events\").EventEmitter;\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = require(\"../common\").asyncHelpers.async;\r\nlet debug = require(\"debug\")(\"wf4node:WakeUp\");\r\nlet util = require(\"util\");\r\n\r\nfunction WakeUp(knownInstaStore, persistence, options) {\r\n    EventEmitter.call(this);\r\n\r\n    this.knownInstaStore = knownInstaStore;\r\n    this.persistence = persistence;\r\n    this.options = options || {};\r\n    this._working = false;\r\n    this._timeout = null;\r\n    this._batchSize = this.options.batchSize || 10;\r\n}\r\n\r\nutil.inherits(WakeUp, EventEmitter);\r\n\r\nWakeUp.prototype.start = function () {\r\n    if (!this._timeout) {\r\n        debug(\"Start.\");\r\n        let self = this;\r\n        this._timeout = setTimeout(function () { self._step(); }, this.options.interval || 5000);\r\n    }\r\n};\r\n\r\nWakeUp.prototype.stop = function () {\r\n    if (this._timeout) {\r\n        debug(\"Stop.\");\r\n        clearTimeout(this._timeout);\r\n        this._timeout = null;\r\n    }\r\n};\r\n\r\nWakeUp.prototype._step = async(function*() {\r\n    let self = this;\r\n    try {\r\n        if (this._working) {\r\n            debug(\"Skipping current step because work in progress.\");\r\n            return;\r\n        }\r\n        debug(\"Starting next step.\");\r\n        this._working = true;\r\n        try {\r\n            let wakeupables = yield this._getNextWakeupables();\r\n            if (wakeupables && wakeupables.length) {\r\n                debug(\"%d selected to wake up.\", wakeupables.length);\r\n                let tasks = [];\r\n                let count = 0;\r\n                for (let wakeupable of wakeupables) {\r\n                    tasks.push(async(function*() {\r\n                        if (count >= self._batchSize) {\r\n                            return;\r\n                        }\r\n                        debug(\"Waking up workflow %s, id: %s\", wakeupable.workflowName, wakeupable.instanceId);\r\n                        wakeupable.result = {};\r\n                        let promise = new Bluebird(function (resolve, reject) {\r\n                            wakeupable.result.resolve = resolve;\r\n                            wakeupable.result.reject = reject;\r\n                        });\r\n                        self.emit(\"continue\", wakeupable);\r\n                        try {\r\n                            yield promise;\r\n                            count++;\r\n                            debug(\"Processing delay completed.\");\r\n                        }\r\n                        catch (e) {\r\n                            debug(\"Processing delay error: %s\", e.stack);\r\n                            self.emit(\"error\", e);\r\n                        }\r\n                    })());\r\n                }\r\n\r\n                let results = yield Bluebird.settle(tasks);\r\n                for (let result of results) {\r\n                    if (result.isRejected()) {\r\n                        throw result.reason();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                debug(\"There is no instance to wake up.\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.emit(\"error\", e);\r\n        }\r\n        finally {\r\n            debug(\"Next step completed.\");\r\n            this._working = false;\r\n        }\r\n    }\r\n    finally {\r\n        if (this._timeout) {\r\n            this._timeout = setTimeout(function () { self._step(); }, this.options.interval || 5000);\r\n        }\r\n    }\r\n});\r\n\r\nWakeUp.prototype._getNextWakeupables = async(function* () {\r\n    if (this.persistence) {\r\n        return yield this.persistence.getNextWakeupables(this._batchSize * 1.5);\r\n    }\r\n    else {\r\n        return this.knownInstaStore.getNextWakeupables(this._batchSize * 1.5);\r\n    }\r\n});\r\n\r\nmodule.exports = WakeUp;"],"file":"hosting/wakeUp.js","sourceRoot":"/source/"}