"use strict";
var uuid = require('node-uuid');
require('date-utils');
var specStrings = require("../common/specStrings");
var InstIdPaths = require("./instIdPaths");
var is = require("../common/is");
var _ = require("lodash");
var debug = require("debug")("wf4node:MemoryPersistence");
function MemoryPersistence() {
  this._instanceData = new Map();
  this._locksById = new Map();
  this._locksByName = new Map();
}
MemoryPersistence.prototype.enterLock = function(lockName, inLockTimeoutMs) {
  debug("enterLock(%s, %d)", lockName, inLockTimeoutMs);
  var now = new Date();
  debug("Searching for lock by name %s", lockName);
  var cLock = this._locksByName.get(lockName);
  debug("Lock info: %j", cLock);
  if (!cLock || cLock.heldTo.getTime() < now.getTime()) {
    var lockInfo = {
      id: uuid.v4(),
      name: lockName,
      heldTo: now.addMilliseconds(inLockTimeoutMs)
    };
    this._locksById.set(lockInfo.id, lockInfo);
    this._locksByName.set(lockInfo.name, lockInfo);
    debug("LOCKED: %s", lockInfo.name);
    return lockInfo;
  }
  debug("It is already held.");
  return null;
};
MemoryPersistence.prototype.renewLock = function(lockId, inLockTimeoutMs) {
  debug("renewLock(%s, %d)", lockId, inLockTimeoutMs);
  var cLock = this._getLockById(lockId);
  cLock.heldTo = new Date().addMilliseconds(inLockTimeoutMs);
  debug("Lock %s extended to %s", lockId, cLock.heldTo);
};
MemoryPersistence.prototype.exitLock = function(lockId) {
  debug("exitLock(%s)", lockId);
  var cLock = this._getLockById(lockId);
  this._locksByName.delete(cLock.name);
  this._locksById.delete(cLock.id);
  debug("UNLOCKED: %s", cLock.name);
};
MemoryPersistence.prototype._getLockById = function(lockId) {
  var cLock = this._locksById.get(lockId);
  var now = new Date();
  if (!cLock || now.compareTo(cLock.heldTo) > 0) {
    throw new Error("Lock by id '" + lockId + "' doesn't exists.");
  }
  return cLock;
};
MemoryPersistence.prototype.isRunning = function(workflowName, instanceId) {
  debug("isRunning(%s, %s)", workflowName, instanceId);
  return this._instanceData.has(specStrings.hosting.doubleKeys(workflowName, instanceId));
};
MemoryPersistence.prototype.persistState = function(state) {
  debug("persistState(%j)", state);
  this._instanceData.set(specStrings.hosting.doubleKeys(state.workflowName, state.instanceId), state);
};
MemoryPersistence.prototype.getRunningInstanceIdHeader = function(workflowName, instanceId) {
  debug("getRunningInstanceIdHeader(%s, %s)", workflowName, instanceId);
  var state = this._loadState(workflowName, instanceId);
  return {
    updatedOn: state.updatedOn,
    workflowName: state.workflowName,
    workflowVersion: state.workflowVersion,
    instanceId: state.instanceId
  };
};
MemoryPersistence.prototype.loadState = function(workflowName, instanceId) {
  debug("loadState(%s, %s)", workflowName, instanceId);
  return this._loadState(workflowName, instanceId);
};
MemoryPersistence.prototype.removeState = function(workflowName, instanceId) {
  debug("removeState(%s, %s)", workflowName, instanceId);
  this._instanceData.delete(specStrings.hosting.doubleKeys(workflowName, instanceId));
};
MemoryPersistence.prototype._loadState = function(workflowName, instanceId) {
  var state = this._instanceData.get(specStrings.hosting.doubleKeys(workflowName, instanceId));
  if (!state) {
    throw new errors.WorkflowNotFoundError("Instance data of workflow '" + workflowName + "' by id '" + instanceId + "' is not found.");
  }
  return state;
};
MemoryPersistence.prototype.loadPromotedProperties = function(workflowName, instanceId) {
  debug("loadPromotedProperties(%s, %s)", workflowName, instanceId);
  var state = this._instanceData.get(specStrings.hosting.doubleKeys(workflowName, instanceId));
  return state ? state.promotedProperties : null;
};
MemoryPersistence.prototype.getNextWakeupables = function(count) {
  debug("getNextWakeupables(%d)", count);
  var now = new Date();
  var result = [];
  var $__11 = true;
  var $__12 = false;
  var $__13 = undefined;
  try {
    for (var $__9 = void 0,
        $__8 = (this._instanceData.values())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__11 = ($__9 = $__8.next()).done); $__11 = true) {
      var data = $__9.value;
      {
        if (data.activeDelays) {
          var $__4 = true;
          var $__5 = false;
          var $__6 = undefined;
          try {
            for (var $__2 = void 0,
                $__1 = (data.activeDelays)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
              var ad = $__2.value;
              {
                if (ad.delayTo <= now) {
                  result.push({
                    instanceId: data.instanceId,
                    workflowName: data.workflowName,
                    updatedOn: data.updatedOn,
                    activeDelay: {
                      methodName: ad.methodName,
                      delayTo: ad.delayTo
                    }
                  });
                }
              }
            }
          } catch ($__7) {
            $__5 = true;
            $__6 = $__7;
          } finally {
            try {
              if (!$__4 && $__1.return != null) {
                $__1.return();
              }
            } finally {
              if ($__5) {
                throw $__6;
              }
            }
          }
        }
      }
    }
  } catch ($__14) {
    $__12 = true;
    $__13 = $__14;
  } finally {
    try {
      if (!$__11 && $__8.return != null) {
        $__8.return();
      }
    } finally {
      if ($__12) {
        throw $__13;
      }
    }
  }
  result.sort(function(i1, i2) {
    if (i1.updatedOn < i2.updatedOn) {
      return -1;
    } else if (i1.updatedOn > i2.updatedOn) {
      return 1;
    } else if (i1.activeDelay.delayTo < i2.activeDelay.delayTo) {
      return -1;
    } else if (i1.activeDelay.delayTo > i2.activeDelay.delayTo) {
      return 1;
    }
    return 0;
  });
  return _.take(result, count);
};
MemoryPersistence.prototype.getRunningInstanceHeadersForOtherVersion = function(workflowName, version) {
  var result = [];
  var $__4 = true;
  var $__5 = false;
  var $__6 = undefined;
  try {
    for (var $__2 = void 0,
        $__1 = (this._instanceData.values())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
      var data = $__2.value;
      {
        if (data.workflowName === workflowName && data.version !== version) {
          result.push({
            workflowName: data.workflowName,
            workflowVersion: data.workflowVersion,
            instanceId: data.instanceId
          });
        }
      }
    }
  } catch ($__7) {
    $__5 = true;
    $__6 = $__7;
  } finally {
    try {
      if (!$__4 && $__1.return != null) {
        $__1.return();
      }
    } finally {
      if ($__5) {
        throw $__6;
      }
    }
  }
  return result;
};
module.exports = MemoryPersistence;
//# sourceMappingURL=data:application/json;base64,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YUFBYSxJQUFNLGFBQVcsQ0FBQSxFQUFLLENBQUEsSUFBRyxRQUFRLElBQU0sUUFBTSxDQUFHO0FBQ2hFLGVBQUssS0FBSyxBQUFDLENBQUM7QUFDUix1QkFBVyxDQUFHLENBQUEsSUFBRyxhQUFhO0FBQzlCLDBCQUFjLENBQUcsQ0FBQSxJQUFHLGdCQUFnQjtBQUNwQyxxQkFBUyxDQUFHLENBQUEsSUFBRyxXQUFXO0FBQUEsVUFDOUIsQ0FBQyxDQUFDO1FBQ047QUFBQSxNQUNKO0lBaktJO0FBQUEsRUFGQSxDQUFFLFlBQTBCO0FBQzFCLFNBQW9CLEtBQUcsQ0FBQztBQUN4QixjQUFvQyxDQUFDO0VBQ3ZDLENBQUUsT0FBUTtBQUNSLE1BQUk7QUFDRixTQUFJLEtBQWlCLEdBQUssQ0FBQSxXQUF1QixHQUFLLEtBQUcsQ0FBRztBQUMxRCxrQkFBd0IsQUFBQyxFQUFDLENBQUM7TUFDN0I7QUFBQSxJQUNGLENBQUUsT0FBUTtBQUNSLGNBQXdCO0FBQ3RCLGtCQUF3QjtNQUMxQjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsQUF1SkosT0FBTyxPQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELEtBQUssUUFBUSxFQUFJLGtCQUFnQixDQUFDO0FBQUEiLCJmaWxlIjoiaG9zdGluZy9tZW1vcnlQZXJzaXN0ZW5jZS5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCB1dWlkID0gcmVxdWlyZSgnbm9kZS11dWlkJyk7XG5yZXF1aXJlKCdkYXRlLXV0aWxzJyk7XG5sZXQgc3BlY1N0cmluZ3MgPSByZXF1aXJlKFwiLi4vY29tbW9uL3NwZWNTdHJpbmdzXCIpO1xubGV0IEluc3RJZFBhdGhzID0gcmVxdWlyZShcIi4vaW5zdElkUGF0aHNcIik7XG5sZXQgaXMgPSByZXF1aXJlKFwiLi4vY29tbW9uL2lzXCIpO1xubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xubGV0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwid2Y0bm9kZTpNZW1vcnlQZXJzaXN0ZW5jZVwiKTtcblxuZnVuY3Rpb24gTWVtb3J5UGVyc2lzdGVuY2UoKSB7XG4gICAgdGhpcy5faW5zdGFuY2VEYXRhID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2xvY2tzQnlJZCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9sb2Nrc0J5TmFtZSA9IG5ldyBNYXAoKTtcbn1cblxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLmVudGVyTG9jayA9IGZ1bmN0aW9uIChsb2NrTmFtZSwgaW5Mb2NrVGltZW91dE1zKSB7XG4gICAgZGVidWcoXCJlbnRlckxvY2soJXMsICVkKVwiLCBsb2NrTmFtZSwgaW5Mb2NrVGltZW91dE1zKTtcblxuICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGRlYnVnKFwiU2VhcmNoaW5nIGZvciBsb2NrIGJ5IG5hbWUgJXNcIiwgbG9ja05hbWUpO1xuICAgIGxldCBjTG9jayA9IHRoaXMuX2xvY2tzQnlOYW1lLmdldChsb2NrTmFtZSk7XG4gICAgZGVidWcoXCJMb2NrIGluZm86ICVqXCIsIGNMb2NrKTtcbiAgICBpZiAoIWNMb2NrIHx8IGNMb2NrLmhlbGRUby5nZXRUaW1lKCkgPCBub3cuZ2V0VGltZSgpKSB7XG4gICAgICAgIGxldCBsb2NrSW5mbyA9IHtcbiAgICAgICAgICAgIGlkOiB1dWlkLnY0KCksXG4gICAgICAgICAgICBuYW1lOiBsb2NrTmFtZSxcbiAgICAgICAgICAgIGhlbGRUbzogbm93LmFkZE1pbGxpc2Vjb25kcyhpbkxvY2tUaW1lb3V0TXMpXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fbG9ja3NCeUlkLnNldChsb2NrSW5mby5pZCwgbG9ja0luZm8pO1xuICAgICAgICB0aGlzLl9sb2Nrc0J5TmFtZS5zZXQobG9ja0luZm8ubmFtZSwgbG9ja0luZm8pO1xuXG4gICAgICAgIGRlYnVnKFwiTE9DS0VEOiAlc1wiLCBsb2NrSW5mby5uYW1lKTtcblxuICAgICAgICByZXR1cm4gbG9ja0luZm87XG4gICAgfVxuICAgIGRlYnVnKFwiSXQgaXMgYWxyZWFkeSBoZWxkLlwiKTtcbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbk1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5yZW5ld0xvY2sgPSBmdW5jdGlvbiAobG9ja0lkLCBpbkxvY2tUaW1lb3V0TXMpIHtcbiAgICBkZWJ1ZyhcInJlbmV3TG9jayglcywgJWQpXCIsIGxvY2tJZCwgaW5Mb2NrVGltZW91dE1zKTtcblxuICAgIGxldCBjTG9jayA9IHRoaXMuX2dldExvY2tCeUlkKGxvY2tJZCk7XG4gICAgY0xvY2suaGVsZFRvID0gbmV3IERhdGUoKS5hZGRNaWxsaXNlY29uZHMoaW5Mb2NrVGltZW91dE1zKTtcbiAgICBkZWJ1ZyhcIkxvY2sgJXMgZXh0ZW5kZWQgdG8gJXNcIiwgbG9ja0lkLCBjTG9jay5oZWxkVG8pO1xufTtcblxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLmV4aXRMb2NrID0gZnVuY3Rpb24gKGxvY2tJZCkge1xuICAgIGRlYnVnKFwiZXhpdExvY2soJXMpXCIsIGxvY2tJZCk7XG5cbiAgICBsZXQgY0xvY2sgPSB0aGlzLl9nZXRMb2NrQnlJZChsb2NrSWQpO1xuICAgIHRoaXMuX2xvY2tzQnlOYW1lLmRlbGV0ZShjTG9jay5uYW1lKTtcbiAgICB0aGlzLl9sb2Nrc0J5SWQuZGVsZXRlKGNMb2NrLmlkKTtcblxuICAgIGRlYnVnKFwiVU5MT0NLRUQ6ICVzXCIsIGNMb2NrLm5hbWUpO1xufTtcblxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLl9nZXRMb2NrQnlJZCA9IGZ1bmN0aW9uIChsb2NrSWQpIHtcbiAgICBsZXQgY0xvY2sgPSB0aGlzLl9sb2Nrc0J5SWQuZ2V0KGxvY2tJZCk7XG4gICAgbGV0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgaWYgKCFjTG9jayB8fCBub3cuY29tcGFyZVRvKGNMb2NrLmhlbGRUbykgPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvY2sgYnkgaWQgJ1wiICsgbG9ja0lkICsgXCInIGRvZXNuJ3QgZXhpc3RzLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGNMb2NrO1xufTtcblxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLmlzUnVubmluZyA9IGZ1bmN0aW9uICh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpIHtcbiAgICBkZWJ1ZyhcImlzUnVubmluZyglcywgJXMpXCIsIHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCk7XG5cbiAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VEYXRhLmhhcyhzcGVjU3RyaW5ncy5ob3N0aW5nLmRvdWJsZUtleXMod29ya2Zsb3dOYW1lLCBpbnN0YW5jZUlkKSk7XG59O1xuXG5NZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUucGVyc2lzdFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgZGVidWcoXCJwZXJzaXN0U3RhdGUoJWopXCIsIHN0YXRlKTtcblxuICAgIHRoaXMuX2luc3RhbmNlRGF0YS5zZXQoc3BlY1N0cmluZ3MuaG9zdGluZy5kb3VibGVLZXlzKHN0YXRlLndvcmtmbG93TmFtZSwgc3RhdGUuaW5zdGFuY2VJZCksIHN0YXRlKTtcbn07XG5cbk1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5nZXRSdW5uaW5nSW5zdGFuY2VJZEhlYWRlciA9IGZ1bmN0aW9uICh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpIHtcbiAgICBkZWJ1ZyhcImdldFJ1bm5pbmdJbnN0YW5jZUlkSGVhZGVyKCVzLCAlcylcIiwgd29ya2Zsb3dOYW1lLCBpbnN0YW5jZUlkKTtcblxuICAgIGxldCBzdGF0ZSA9IHRoaXMuX2xvYWRTdGF0ZSh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVwZGF0ZWRPbjogc3RhdGUudXBkYXRlZE9uLFxuICAgICAgICB3b3JrZmxvd05hbWU6IHN0YXRlLndvcmtmbG93TmFtZSxcbiAgICAgICAgd29ya2Zsb3dWZXJzaW9uOiBzdGF0ZS53b3JrZmxvd1ZlcnNpb24sXG4gICAgICAgIGluc3RhbmNlSWQ6IHN0YXRlLmluc3RhbmNlSWRcbiAgICB9O1xufTtcblxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLmxvYWRTdGF0ZSA9IGZ1bmN0aW9uICh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpIHtcbiAgICBkZWJ1ZyhcImxvYWRTdGF0ZSglcywgJXMpXCIsIHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCk7XG5cbiAgICByZXR1cm4gdGhpcy5fbG9hZFN0YXRlKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCk7XG59O1xuXG5NZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUucmVtb3ZlU3RhdGUgPSBmdW5jdGlvbiAod29ya2Zsb3dOYW1lLCBpbnN0YW5jZUlkKSB7XG4gICAgZGVidWcoXCJyZW1vdmVTdGF0ZSglcywgJXMpXCIsIHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCk7XG5cbiAgICB0aGlzLl9pbnN0YW5jZURhdGEuZGVsZXRlKHNwZWNTdHJpbmdzLmhvc3RpbmcuZG91YmxlS2V5cyh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpKTtcbn07XG5cbk1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5fbG9hZFN0YXRlID0gZnVuY3Rpb24gKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCkge1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuX2luc3RhbmNlRGF0YS5nZXQoc3BlY1N0cmluZ3MuaG9zdGluZy5kb3VibGVLZXlzKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCkpO1xuICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5Xb3JrZmxvd05vdEZvdW5kRXJyb3IoXCJJbnN0YW5jZSBkYXRhIG9mIHdvcmtmbG93ICdcIiArIHdvcmtmbG93TmFtZSArIFwiJyBieSBpZCAnXCIgKyBpbnN0YW5jZUlkICsgXCInIGlzIG5vdCBmb3VuZC5cIik7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTtcbn07XG5cbk1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5sb2FkUHJvbW90ZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCkge1xuICAgIGRlYnVnKFwibG9hZFByb21vdGVkUHJvcGVydGllcyglcywgJXMpXCIsIHdvcmtmbG93TmFtZSwgaW5zdGFuY2VJZCk7XG5cbiAgICBsZXQgc3RhdGUgPSB0aGlzLl9pbnN0YW5jZURhdGEuZ2V0KHNwZWNTdHJpbmdzLmhvc3RpbmcuZG91YmxlS2V5cyh3b3JrZmxvd05hbWUsIGluc3RhbmNlSWQpKTtcbiAgICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5wcm9tb3RlZFByb3BlcnRpZXMgOiBudWxsO1xufTtcblxuTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLmdldE5leHRXYWtldXBhYmxlcyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgIGRlYnVnKFwiZ2V0TmV4dFdha2V1cGFibGVzKCVkKVwiLCBjb3VudCk7XG5cbiAgICBsZXQgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgZGF0YSBvZiB0aGlzLl9pbnN0YW5jZURhdGEudmFsdWVzKCkpIHtcbiAgICAgICAgaWYgKGRhdGEuYWN0aXZlRGVsYXlzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBhZCBvZiBkYXRhLmFjdGl2ZURlbGF5cykge1xuICAgICAgICAgICAgICAgIGlmIChhZC5kZWxheVRvIDw9IG5vdykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkOiBkYXRhLmluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZmxvd05hbWU6IGRhdGEud29ya2Zsb3dOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZE9uOiBkYXRhLnVwZGF0ZWRPbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZURlbGF5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kTmFtZTogYWQubWV0aG9kTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheVRvOiBhZC5kZWxheVRvXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuc29ydChmdW5jdGlvbiAoaTEsIGkyKSB7XG4gICAgICAgIGlmIChpMS51cGRhdGVkT24gPCBpMi51cGRhdGVkT24pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpMS51cGRhdGVkT24gPiBpMi51cGRhdGVkT24pIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGkxLmFjdGl2ZURlbGF5LmRlbGF5VG8gPCBpMi5hY3RpdmVEZWxheS5kZWxheVRvKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaTEuYWN0aXZlRGVsYXkuZGVsYXlUbyA+IGkyLmFjdGl2ZURlbGF5LmRlbGF5VG8pIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuICAgIHJldHVybiBfLnRha2UocmVzdWx0LCBjb3VudCk7XG59O1xuXG5NZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUuZ2V0UnVubmluZ0luc3RhbmNlSGVhZGVyc0Zvck90aGVyVmVyc2lvbiA9IGZ1bmN0aW9uKHdvcmtmbG93TmFtZSwgdmVyc2lvbikge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBkYXRhIG9mIHRoaXMuX2luc3RhbmNlRGF0YS52YWx1ZXMoKSkge1xuICAgICAgICBpZiAoZGF0YS53b3JrZmxvd05hbWUgPT09IHdvcmtmbG93TmFtZSAmJiBkYXRhLnZlcnNpb24gIT09IHZlcnNpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICB3b3JrZmxvd05hbWU6IGRhdGEud29ya2Zsb3dOYW1lLFxuICAgICAgICAgICAgICAgIHdvcmtmbG93VmVyc2lvbjogZGF0YS53b3JrZmxvd1ZlcnNpb24sXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VJZDogZGF0YS5pbnN0YW5jZUlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZW1vcnlQZXJzaXN0ZW5jZTsiXX0=
