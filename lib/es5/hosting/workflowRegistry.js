"use strict";
var Workflow = require("../activities/workflow");
var _ = require("lodash");
var BeginMethod = require("../activities/beginMethod");
var EndMethod = require("../activities/endMethod");
var is = require("../common/is");
var ActivityExecutionContext = require("../activities/activityExecutionContext");
function WorkflowRegistry() {
  this._workflows = new Map();
}
WorkflowRegistry.prototype.register = function(workflow) {
  if (workflow instanceof Workflow) {
    if (!_(workflow.name).isString()) {
      throw new TypeError("Workflow name is not a string.");
    }
    var name = workflow.name.trim();
    if (!name) {
      throw new TypeError("Workflow name is empty.");
    }
    if (!_(workflow.version).isNumber()) {
      throw new TypeError("Workflow version is not a number.");
    }
    var version = workflow.version;
    var entry = this._workflows.get(name);
    if (entry) {
      var desc = entry.get(version);
      if (desc) {
        throw new Error("Workflow " + name + " " + version + " already registered.");
      } else {
        entry.set(version, this._createDesc(workflow, name, workflow.version));
      }
    } else {
      entry = new Map();
      entry.set(version, this._createDesc(workflow, name, workflow.version));
      this._workflows.set(name, entry);
    }
  } else {
    throw new TypeError("Workflow instance argument expected.");
  }
};
WorkflowRegistry.prototype.getDesc = function(name, version) {
  var entry = this._workflows.get(name);
  if (entry) {
    if (!_.isUndefined(version)) {
      version = version.toString();
      var desc = entry.get(version);
      if (desc) {
        return desc;
      }
      throw new Error("Workflow " + name + " of version " + version + " has not been registered.");
    } else {
      var maxV = -10000000;
      var desc$__15 = null;
      var $__4 = true;
      var $__5 = false;
      var $__6 = undefined;
      try {
        for (var $__2 = void 0,
            $__1 = (entry.values())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
          var d = $__2.value;
          {
            if (d.version > maxV) {
              desc$__15 = d;
              break;
            }
          }
        }
      } catch ($__7) {
        $__5 = true;
        $__6 = $__7;
      } finally {
        try {
          if (!$__4 && $__1.return != null) {
            $__1.return();
          }
        } finally {
          if ($__5) {
            throw $__6;
          }
        }
      }
      if (desc$__15) {
        return desc$__15;
      }
      throw new Error("Workflow " + name + " has not been registered.");
    }
  }
};
WorkflowRegistry.prototype.getTopVersion = function(workflowName) {
  var result = [];
  var entry = this._workflows.get(workflowName);
  if (entry) {
    var $__4 = true;
    var $__5 = false;
    var $__6 = undefined;
    try {
      for (var $__2 = void 0,
          $__1 = (entry.keys())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
        var version = $__2.value;
        {
          result.push(version);
        }
      }
    } catch ($__7) {
      $__5 = true;
      $__6 = $__7;
    } finally {
      try {
        if (!$__4 && $__1.return != null) {
          $__1.return();
        }
      } finally {
        if ($__5) {
          throw $__6;
        }
      }
    }
  }
  if (result.length === 0) {
    return null;
  }
  result.sort();
  return result[result.length - 1];
};
WorkflowRegistry.prototype._createDesc = function(workflow, name, version) {
  return {
    workflow: workflow,
    name: name,
    version: version,
    methods: this._collectMethodInfos(workflow)
  };
};
WorkflowRegistry.prototype._collectMethodInfos = function(workflow) {
  var self = this;
  var infos = new Map();
  var execContext = new ActivityExecutionContext();
  execContext.initialize(workflow);
  var $__4 = true;
  var $__5 = false;
  var $__6 = undefined;
  try {
    for (var $__2 = void 0,
        $__1 = (workflow.children(execContext))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
      var child = $__2.value;
      {
        var isBM = child instanceof BeginMethod;
        var isEM = child instanceof EndMethod;
        if (isBM || isEM) {
          var methodName = _.isString(child.methodName) ? child.methodName.trim() : null;
          var instanceIdPath = _.isString(child.instanceIdPath) ? child.instanceIdPath.trim() : null;
          if (methodName) {
            var info = infos.get(methodName);
            if (!info) {
              info = {
                workflow: workflow,
                canCreateInstance: false,
                instanceIdPath: null
              };
              infos.set(methodName, info);
            }
            if (isBM && child.canCreateInstance) {
              info.canCreateInstance = true;
            }
            if (instanceIdPath) {
              if (info.instanceIdPath) {
                if (info.instanceIdPath !== instanceIdPath) {
                  throw new Error("Method '" + methodName + "' in workflow '" + workflow.name + "' has multiple different instanceIdPath value which is not supported.");
                }
              } else {
                info.instanceIdPath = instanceIdPath;
              }
            }
          }
        }
      }
    }
  } catch ($__7) {
    $__5 = true;
    $__6 = $__7;
  } finally {
    try {
      if (!$__4 && $__1.return != null) {
        $__1.return();
      }
    } finally {
      if ($__5) {
        throw $__6;
      }
    }
  }
  var result = new Map();
  var $__11 = true;
  var $__12 = false;
  var $__13 = undefined;
  try {
    for (var $__9 = void 0,
        $__8 = (infos.entries())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__11 = ($__9 = $__8.next()).done); $__11 = true) {
      var kvp = $__9.value;
      {
        if (kvp[1].instanceIdPath) {
          result.set(kvp[0], kvp[1]);
        }
      }
    }
  } catch ($__14) {
    $__12 = true;
    $__13 = $__14;
  } finally {
    try {
      if (!$__11 && $__8.return != null) {
        $__8.return();
      }
    } finally {
      if ($__12) {
        throw $__13;
      }
    }
  }
  return result;
};
WorkflowRegistry.prototype.methodInfos = $traceurRuntime.initGeneratorFunction(function $__16(workflowName, methodName) {
  var entry,
      $__4,
      $__5,
      $__6,
      $__2,
      $__1,
      desc,
      info,
      $__7;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          entry = this._workflows.get(workflowName);
          $ctx.state = 30;
          break;
        case 30:
          $ctx.state = (entry) ? 26 : -2;
          break;
        case 26:
          $__4 = true;
          $__5 = false;
          $__6 = undefined;
          $ctx.state = 27;
          break;
        case 27:
          $ctx.pushTry(13, 14);
          $ctx.state = 16;
          break;
        case 16:
          $__2 = void 0, $__1 = (entry.values())[$traceurRuntime.toProperty(Symbol.iterator)]();
          $ctx.state = 12;
          break;
        case 12:
          $ctx.state = (!($__4 = ($__2 = $__1.next()).done)) ? 8 : 10;
          break;
        case 4:
          $__4 = true;
          $ctx.state = 12;
          break;
        case 8:
          desc = $__2.value;
          $ctx.state = 9;
          break;
        case 9:
          info = desc.methods.get(methodName);
          $ctx.state = 7;
          break;
        case 7:
          $ctx.state = (info) ? 1 : 4;
          break;
        case 1:
          $ctx.state = 2;
          return info;
        case 2:
          $ctx.maybeThrow();
          $ctx.state = 4;
          break;
        case 10:
          $ctx.popTry();
          $ctx.state = 14;
          $ctx.finallyFallThrough = -2;
          break;
        case 13:
          $ctx.popTry();
          $ctx.maybeUncatchable();
          $__7 = $ctx.storedException;
          $ctx.state = 19;
          break;
        case 19:
          $__5 = true;
          $__6 = $__7;
          $ctx.state = 14;
          $ctx.finallyFallThrough = -2;
          break;
        case 14:
          $ctx.popTry();
          $ctx.state = 25;
          break;
        case 25:
          try {
            if (!$__4 && $__1.return != null) {
              $__1.return();
            }
          } finally {
            if ($__5) {
              throw $__6;
            }
          }
          $ctx.state = 23;
          break;
        case 23:
          $ctx.state = $ctx.finallyFallThrough;
          break;
        default:
          return $ctx.end();
      }
  }, $__16, this);
});
module.exports = WorkflowRegistry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndvcmtmbG93UmVnaXN0cnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxBQUFJLEVBQUEsQ0FBQSxRQUFPLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyx3QkFBdUIsQ0FBQyxDQUFDO0FBQ2hELEFBQUksRUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQ3pCLEFBQUksRUFBQSxDQUFBLFdBQVUsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLDJCQUEwQixDQUFDLENBQUM7QUFDdEQsQUFBSSxFQUFBLENBQUEsU0FBUSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMseUJBQXdCLENBQUMsQ0FBQztBQUNsRCxBQUFJLEVBQUEsQ0FBQSxFQUFDLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxjQUFhLENBQUMsQ0FBQztBQUNoQyxBQUFJLEVBQUEsQ0FBQSx3QkFBdUIsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLHdDQUF1QyxDQUFDLENBQUM7QUFFaEYsT0FBUyxpQkFBZSxDQUFFLEFBQUQsQ0FBRztBQUN4QixLQUFHLFdBQVcsRUFBSSxJQUFJLElBQUUsQUFBQyxFQUFDLENBQUM7QUFDL0I7QUFBQSxBQUVBLGVBQWUsVUFBVSxTQUFTLEVBQUksVUFBVSxRQUFPLENBQUc7QUFDdEQsS0FBSSxRQUFPLFdBQWEsU0FBTyxDQUFHO0FBQzlCLE9BQUksQ0FBQyxDQUFBLEFBQUMsQ0FBQyxRQUFPLEtBQUssQ0FBQyxTQUFTLEFBQUMsRUFBQyxDQUFHO0FBQzlCLFVBQU0sSUFBSSxVQUFRLEFBQUMsQ0FBQyxnQ0FBK0IsQ0FBQyxDQUFDO0lBQ3pEO0FBQUEsQUFDSSxNQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsUUFBTyxLQUFLLEtBQUssQUFBQyxFQUFDLENBQUM7QUFDL0IsT0FBSSxDQUFDLElBQUcsQ0FBRztBQUNQLFVBQU0sSUFBSSxVQUFRLEFBQUMsQ0FBQyx5QkFBd0IsQ0FBQyxDQUFDO0lBQ2xEO0FBQUEsQUFDQSxPQUFJLENBQUMsQ0FBQSxBQUFDLENBQUMsUUFBTyxRQUFRLENBQUMsU0FBUyxBQUFDLEVBQUMsQ0FBRztBQUNqQyxVQUFNLElBQUksVUFBUSxBQUFDLENBQUMsbUNBQWtDLENBQUMsQ0FBQztJQUM1RDtBQUFBLEFBQ0ksTUFBQSxDQUFBLE9BQU0sRUFBSSxDQUFBLFFBQU8sUUFBUSxDQUFDO0FBRTlCLEFBQUksTUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLElBQUcsV0FBVyxJQUFJLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUNyQyxPQUFJLEtBQUksQ0FBRztBQUNQLEFBQUksUUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLEtBQUksSUFBSSxBQUFDLENBQUMsT0FBTSxDQUFDLENBQUM7QUFDN0IsU0FBSSxJQUFHLENBQUc7QUFDTixZQUFNLElBQUksTUFBSSxBQUFDLENBQUMsV0FBVSxFQUFJLEtBQUcsQ0FBQSxDQUFJLElBQUUsQ0FBQSxDQUFJLFFBQU0sQ0FBQSxDQUFJLHVCQUFxQixDQUFDLENBQUM7TUFDaEYsS0FDSztBQUNELFlBQUksSUFBSSxBQUFDLENBQUMsT0FBTSxDQUFHLENBQUEsSUFBRyxZQUFZLEFBQUMsQ0FBQyxRQUFPLENBQUcsS0FBRyxDQUFHLENBQUEsUUFBTyxRQUFRLENBQUMsQ0FBQyxDQUFDO01BQzFFO0FBQUEsSUFDSixLQUNLO0FBQ0QsVUFBSSxFQUFJLElBQUksSUFBRSxBQUFDLEVBQUMsQ0FBQztBQUNqQixVQUFJLElBQUksQUFBQyxDQUFDLE9BQU0sQ0FBRyxDQUFBLElBQUcsWUFBWSxBQUFDLENBQUMsUUFBTyxDQUFHLEtBQUcsQ0FBRyxDQUFBLFFBQU8sUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN0RSxTQUFHLFdBQVcsSUFBSSxBQUFDLENBQUMsSUFBRyxDQUFHLE1BQUksQ0FBQyxDQUFDO0lBQ3BDO0FBQUEsRUFDSixLQUNLO0FBQ0QsUUFBTSxJQUFJLFVBQVEsQUFBQyxDQUFDLHNDQUFxQyxDQUFDLENBQUM7RUFDL0Q7QUFBQSxBQUNKLENBQUM7QUFFRCxlQUFlLFVBQVUsUUFBUSxFQUFJLFVBQVUsSUFBRyxDQUFHLENBQUEsT0FBTTtBQUN2RCxBQUFJLElBQUEsQ0FBQSxLQUFJLEVBQUksQ0FBQSxJQUFHLFdBQVcsSUFBSSxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7QUFDckMsS0FBSSxLQUFJLENBQUc7QUFDUCxPQUFJLENBQUMsQ0FBQSxZQUFZLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBRztBQUN6QixZQUFNLEVBQUksQ0FBQSxPQUFNLFNBQVMsQUFBQyxFQUFDLENBQUM7QUFDNUIsQUFBSSxRQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsS0FBSSxJQUFJLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQztBQUM3QixTQUFJLElBQUcsQ0FBRztBQUNOLGFBQU8sS0FBRyxDQUFDO01BQ2Y7QUFBQSxBQUNBLFVBQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyxXQUFVLEVBQUksS0FBRyxDQUFBLENBQUksZUFBYSxDQUFBLENBQUksUUFBTSxDQUFBLENBQUksNEJBQTBCLENBQUMsQ0FBQztJQUNoRyxLQUNLO0FBRUQsQUFBSSxRQUFBLENBQUEsSUFBRyxFQUFJLEVBQUMsUUFBTyxDQUFDO0FBQ3BCLEFBQUksUUFBQSxDQUFBLFNBQUcsRUFBSSxLQUFHLENBQUM7QUE3RG5CLEFBQUksUUFBQSxPQUFvQixLQUFHLENBQUM7QUFDNUIsQUFBSSxRQUFBLE9BQW9CLE1BQUksQ0FBQztBQUM3QixBQUFJLFFBQUEsT0FBb0IsVUFBUSxDQUFDO0FBQ2pDLFFBQUk7QUFISixZQUFTLEdBQUEsT0FEakIsS0FBSyxFQUFBLEFBQzRCO0FBQ2hCLGlCQUFvQixDQUFBLENBNkRYLEtBQUksT0FBTyxBQUFDLEVBQUMsQ0E3RGdCLENBQ2xDLGVBQWMsV0FBVyxBQUFDLENBQUMsTUFBSyxTQUFTLENBQUMsQ0FBQyxBQUFDLEVBQUMsQ0FDckQsRUFBQyxDQUFDLE1BQW9CLENBQUEsQ0FBQyxNQUFvQixDQUFBLFNBQXFCLEFBQUMsRUFBQyxDQUFDLEtBQUssQ0FBQyxDQUN6RSxPQUFvQixLQUFHLENBQUc7WUEwRGxCLEVBQUE7QUFBcUI7QUFDMUIsZUFBSSxDQUFBLFFBQVEsRUFBSSxLQUFHLENBQUc7QUFDbEIsd0JBQU8sRUFBQSxDQUFDO0FBQ1IsbUJBQUs7WUFDVDtBQUFBLFVBQ0o7UUE1REo7QUFBQSxNQUZBLENBQUUsWUFBMEI7QUFDMUIsYUFBb0IsS0FBRyxDQUFDO0FBQ3hCLGtCQUFvQyxDQUFDO01BQ3ZDLENBQUUsT0FBUTtBQUNSLFVBQUk7QUFDRixhQUFJLEtBQWlCLEdBQUssQ0FBQSxXQUF1QixHQUFLLEtBQUcsQ0FBRztBQUMxRCxzQkFBd0IsQUFBQyxFQUFDLENBQUM7VUFDN0I7QUFBQSxRQUNGLENBQUUsT0FBUTtBQUNSLGtCQUF3QjtBQUN0QixzQkFBd0I7VUFDMUI7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLEFBa0RJLG1CQUFVO0FBQ04sd0JBQVc7TUFDZjtBQUFBLEFBQ0EsVUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLFdBQVUsRUFBSSxLQUFHLENBQUEsQ0FBSSw0QkFBMEIsQ0FBQyxDQUFDO0lBQ3JFO0FBQUEsRUFDSjtBQUFBLEFBQ0osQ0FBQztBQUVELGVBQWUsVUFBVSxjQUFjLEVBQUksVUFBVSxZQUFXO0FBQzVELEFBQUksSUFBQSxDQUFBLE1BQUssRUFBSSxHQUFDLENBQUM7QUFDZixBQUFJLElBQUEsQ0FBQSxLQUFJLEVBQUksQ0FBQSxJQUFHLFdBQVcsSUFBSSxBQUFDLENBQUMsWUFBVyxDQUFDLENBQUM7QUFDN0MsS0FBSSxLQUFJLENBQUc7QUEvRVAsQUFBSSxNQUFBLE9BQW9CLEtBQUcsQ0FBQztBQUM1QixBQUFJLE1BQUEsT0FBb0IsTUFBSSxDQUFDO0FBQzdCLEFBQUksTUFBQSxPQUFvQixVQUFRLENBQUM7QUFDakMsTUFBSTtBQUhKLFVBQVMsR0FBQSxPQURqQixLQUFLLEVBQUEsQUFDNEI7QUFDaEIsZUFBb0IsQ0FBQSxDQStFVCxLQUFJLEtBQUssQUFBQyxFQUFDLENBL0VnQixDQUNsQyxlQUFjLFdBQVcsQUFBQyxDQUFDLE1BQUssU0FBUyxDQUFDLENBQUMsQUFBQyxFQUFDLENBQ3JELEVBQUMsQ0FBQyxNQUFvQixDQUFBLENBQUMsTUFBb0IsQ0FBQSxTQUFxQixBQUFDLEVBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDekUsT0FBb0IsS0FBRyxDQUFHO1VBNEV0QixRQUFNO0FBQW1CO0FBQzlCLGVBQUssS0FBSyxBQUFDLENBQUMsT0FBTSxDQUFDLENBQUM7UUFDeEI7TUEzRUE7QUFBQSxJQUZBLENBQUUsWUFBMEI7QUFDMUIsV0FBb0IsS0FBRyxDQUFDO0FBQ3hCLGdCQUFvQyxDQUFDO0lBQ3ZDLENBQUUsT0FBUTtBQUNSLFFBQUk7QUFDRixXQUFJLEtBQWlCLEdBQUssQ0FBQSxXQUF1QixHQUFLLEtBQUcsQ0FBRztBQUMxRCxvQkFBd0IsQUFBQyxFQUFDLENBQUM7UUFDN0I7QUFBQSxNQUNGLENBQUUsT0FBUTtBQUNSLGdCQUF3QjtBQUN0QixvQkFBd0I7UUFDMUI7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBaUVKO0FBQUEsQUFDQSxLQUFJLE1BQUssT0FBTyxJQUFNLEVBQUEsQ0FBRztBQUNyQixTQUFPLEtBQUcsQ0FBQztFQUNmO0FBQUEsQUFDQSxPQUFLLEtBQUssQUFBQyxFQUFDLENBQUM7QUFDYixPQUFPLENBQUEsTUFBSyxDQUFFLE1BQUssT0FBTyxFQUFJLEVBQUEsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxlQUFlLFVBQVUsWUFBWSxFQUFJLFVBQVUsUUFBTyxDQUFHLENBQUEsSUFBRyxDQUFHLENBQUEsT0FBTSxDQUFHO0FBQ3hFLE9BQU87QUFDSCxXQUFPLENBQUcsU0FBTztBQUNqQixPQUFHLENBQUcsS0FBRztBQUNULFVBQU0sQ0FBRyxRQUFNO0FBQ2YsVUFBTSxDQUFHLENBQUEsSUFBRyxvQkFBb0IsQUFBQyxDQUFDLFFBQU8sQ0FBQztBQUFBLEVBQzlDLENBQUM7QUFDTCxDQUFDO0FBRUQsZUFBZSxVQUFVLG9CQUFvQixFQUFJLFVBQVUsUUFBTztBQUM5RCxBQUFJLElBQUEsQ0FBQSxJQUFHLEVBQUksS0FBRyxDQUFDO0FBQ2YsQUFBSSxJQUFBLENBQUEsS0FBSSxFQUFJLElBQUksSUFBRSxBQUFDLEVBQUMsQ0FBQztBQUNyQixBQUFJLElBQUEsQ0FBQSxXQUFVLEVBQUksSUFBSSx5QkFBdUIsQUFBQyxFQUFDLENBQUM7QUFDaEQsWUFBVSxXQUFXLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQXhHNUIsQUFBSSxJQUFBLE9BQW9CLEtBQUcsQ0FBQztBQUM1QixBQUFJLElBQUEsT0FBb0IsTUFBSSxDQUFDO0FBQzdCLEFBQUksSUFBQSxPQUFvQixVQUFRLENBQUM7QUFDakMsSUFBSTtBQUhKLFFBQVMsR0FBQSxPQURqQixLQUFLLEVBQUEsQUFDNEI7QUFDaEIsYUFBb0IsQ0FBQSxDQXdHZixRQUFPLFNBQVMsQUFBQyxDQUFDLFdBQVUsQ0FBQyxDQXhHSSxDQUNsQyxlQUFjLFdBQVcsQUFBQyxDQUFDLE1BQUssU0FBUyxDQUFDLENBQUMsQUFBQyxFQUFDLENBQ3JELEVBQUMsQ0FBQyxNQUFvQixDQUFBLENBQUMsTUFBb0IsQ0FBQSxTQUFxQixBQUFDLEVBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDekUsT0FBb0IsS0FBRyxDQUFHO1FBcUcxQixNQUFJO0FBQXFDO0FBQzlDLEFBQUksVUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLEtBQUksV0FBYSxZQUFVLENBQUM7QUFDdkMsQUFBSSxVQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsS0FBSSxXQUFhLFVBQVEsQ0FBQztBQUNyQyxXQUFJLElBQUcsR0FBSyxLQUFHLENBQUc7QUFDZCxBQUFJLFlBQUEsQ0FBQSxVQUFTLEVBQUksQ0FBQSxDQUFBLFNBQVMsQUFBQyxDQUFDLEtBQUksV0FBVyxDQUFDLENBQUEsQ0FBSSxDQUFBLEtBQUksV0FBVyxLQUFLLEFBQUMsRUFBQyxDQUFBLENBQUksS0FBRyxDQUFDO0FBQzlFLEFBQUksWUFBQSxDQUFBLGNBQWEsRUFBSSxDQUFBLENBQUEsU0FBUyxBQUFDLENBQUMsS0FBSSxlQUFlLENBQUMsQ0FBQSxDQUFJLENBQUEsS0FBSSxlQUFlLEtBQUssQUFBQyxFQUFDLENBQUEsQ0FBSSxLQUFHLENBQUM7QUFDMUYsYUFBSSxVQUFTLENBQUc7QUFDWixBQUFJLGNBQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxLQUFJLElBQUksQUFBQyxDQUFDLFVBQVMsQ0FBQyxDQUFDO0FBQ2hDLGVBQUksQ0FBQyxJQUFHLENBQUc7QUFDUCxpQkFBRyxFQUFJO0FBQ0gsdUJBQU8sQ0FBRyxTQUFPO0FBQ2pCLGdDQUFnQixDQUFHLE1BQUk7QUFDdkIsNkJBQWEsQ0FBRyxLQUFHO0FBQUEsY0FDdkIsQ0FBQztBQUNELGtCQUFJLElBQUksQUFBQyxDQUFDLFVBQVMsQ0FBRyxLQUFHLENBQUMsQ0FBQztZQUMvQjtBQUFBLEFBQ0EsZUFBSSxJQUFHLEdBQUssQ0FBQSxLQUFJLGtCQUFrQixDQUFHO0FBQ2pDLGlCQUFHLGtCQUFrQixFQUFJLEtBQUcsQ0FBQztZQUNqQztBQUFBLEFBQ0EsZUFBSSxjQUFhLENBQUc7QUFDaEIsaUJBQUksSUFBRyxlQUFlLENBQUc7QUFDckIsbUJBQUksSUFBRyxlQUFlLElBQU0sZUFBYSxDQUFHO0FBQ3hDLHNCQUFNLElBQUksTUFBSSxBQUFDLENBQUMsVUFBUyxFQUFJLFdBQVMsQ0FBQSxDQUFJLGtCQUFnQixDQUFBLENBQUksQ0FBQSxRQUFPLEtBQUssQ0FBQSxDQUFJLHdFQUFzRSxDQUFDLENBQUM7Z0JBQzFKO0FBQUEsY0FDSixLQUNLO0FBQ0QsbUJBQUcsZUFBZSxFQUFJLGVBQWEsQ0FBQztjQUN4QztBQUFBLFlBQ0o7QUFBQSxVQUNKO0FBQUEsUUFDSjtBQUFBLE1BQ0o7SUFqSUk7QUFBQSxFQUZBLENBQUUsWUFBMEI7QUFDMUIsU0FBb0IsS0FBRyxDQUFDO0FBQ3hCLGNBQW9DLENBQUM7RUFDdkMsQ0FBRSxPQUFRO0FBQ1IsTUFBSTtBQUNGLFNBQUksS0FBaUIsR0FBSyxDQUFBLFdBQXVCLEdBQUssS0FBRyxDQUFHO0FBQzFELGtCQUF3QixBQUFDLEVBQUMsQ0FBQztNQUM3QjtBQUFBLElBQ0YsQ0FBRSxPQUFRO0FBQ1IsY0FBd0I7QUFDdEIsa0JBQXdCO01BQzFCO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxBQXVIQSxJQUFBLENBQUEsTUFBSyxFQUFJLElBQUksSUFBRSxBQUFDLEVBQUMsQ0FBQztBQXpJbEIsQUFBSSxJQUFBLFFBQW9CLEtBQUcsQ0FBQztBQUM1QixBQUFJLElBQUEsUUFBb0IsTUFBSSxDQUFDO0FBQzdCLEFBQUksSUFBQSxRQUFvQixVQUFRLENBQUM7QUFDakMsSUFBSTtBQUhKLFFBQVMsR0FBQSxPQURqQixLQUFLLEVBQUEsQUFDNEI7QUFDaEIsYUFBb0IsQ0FBQSxDQXlJakIsS0FBSSxRQUFRLEFBQUMsRUFBQyxDQXpJcUIsQ0FDbEMsZUFBYyxXQUFXLEFBQUMsQ0FBQyxNQUFLLFNBQVMsQ0FBQyxDQUFDLEFBQUMsRUFBQyxDQUNyRCxFQUFDLENBQUMsT0FBb0IsQ0FBQSxDQUFDLE1BQW9CLENBQUEsU0FBcUIsQUFBQyxFQUFDLENBQUMsS0FBSyxDQUFDLENBQ3pFLFFBQW9CLEtBQUcsQ0FBRztRQXNJMUIsSUFBRTtBQUFzQjtBQUM3QixXQUFJLEdBQUUsQ0FBRSxDQUFBLENBQUMsZUFBZSxDQUFHO0FBQ3ZCLGVBQUssSUFBSSxBQUFDLENBQUMsR0FBRSxDQUFFLENBQUEsQ0FBQyxDQUFHLENBQUEsR0FBRSxDQUFFLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDOUI7QUFBQSxNQUNKO0lBdklJO0FBQUEsRUFGQSxDQUFFLGFBQTBCO0FBQzFCLFVBQW9CLEtBQUcsQ0FBQztBQUN4QixnQkFBb0MsQ0FBQztFQUN2QyxDQUFFLE9BQVE7QUFDUixNQUFJO0FBQ0YsU0FBSSxNQUFpQixHQUFLLENBQUEsV0FBdUIsR0FBSyxLQUFHLENBQUc7QUFDMUQsa0JBQXdCLEFBQUMsRUFBQyxDQUFDO01BQzdCO0FBQUEsSUFDRixDQUFFLE9BQVE7QUFDUixlQUF3QjtBQUN0QixtQkFBd0I7TUFDMUI7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEFBNkhKLE9BQU8sT0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxlQUFlLFVBQVUsWUFBWSxFQW5KckMsQ0FBQSxlQUFjLHNCQUFzQixBQUFDLENBbUpJLGVBQVcsWUFBVyxDQUFHLENBQUEsVUFBUzs7Ozs7Ozs7OztBQW5KM0UsT0FBTyxDQUFQLGVBQWMsd0JBQXdCLEFBQWQsQ0FBeEIsU0FBUyxJQUFHLENBQUc7QUFDVCxVQUFPLElBQUc7OztnQkFtSkEsQ0FBQSxJQUFHLFdBQVcsSUFBSSxBQUFDLENBQUMsWUFBVyxDQUFDOzs7O0FBcEpoRCxhQUFHLE1BQU0sRUFBSSxDQUFBLENBcUpMLEtBQUksQ0FySm1CLFVBQXdDLENBQUM7QUFDaEUsZUFBSTs7ZUFBb0IsS0FBRztlQUNILE1BQUk7ZUFDSixVQUFROzs7O0FBSHhDLGFBQUcsUUFBUSxBQUFDLFFBRWlCLENBQUM7Ozs7ZUFGOUIsS0FBSyxFQUFBLFFBRWdDLENBQUEsQ0FvSlosS0FBSSxPQUFPLEFBQUMsRUFBQyxDQXBKaUIsQ0FDbEMsZUFBYyxXQUFXLEFBQUMsQ0FBQyxNQUFLLFNBQVMsQ0FBQyxDQUFDLEFBQUMsRUFBQzs7OztBQUhsRSxhQUFHLE1BQU0sRUFBSSxDQUFBLENBSUEsQ0FBQyxDQUFDLE1BQW9CLENBQUEsQ0FBQyxNQUFvQixDQUFBLFNBQXFCLEFBQUMsRUFBQyxDQUFDLEtBQUssQ0FBQyxDQUp2RCxTQUF3QyxDQUFDO0FBQ2hFLGVBQUk7O0FBSUMsZUFBb0IsS0FBRzs7Ozs7Ozs7ZUFrSmIsQ0FBQSxJQUFHLFFBQVEsSUFBSSxBQUFDLENBQUMsVUFBUyxDQUFDOzs7O0FBdkpsRCxhQUFHLE1BQU0sRUFBSSxDQUFBLENBd0pHLElBQUcsQ0F4SlksUUFBd0MsQ0FBQztBQUNoRSxlQUFJOzs7ZUF3SlUsS0FBRzs7QUF6SnpCLGFBQUcsV0FBVyxBQUFDLEVBQUMsQ0FBQTs7OztBQUFoQixhQUFHLE9BQU8sQUFBQyxFQUFDLENBQUM7O0FBQWIsYUFBRyxtQkFBbUIsS0FBb0IsQ0FBQTs7O0FBQzVCLGFBQUcsT0FBTyxBQUFDLEVBQUMsQ0FBQztBQUNiLGFBQUcsaUJBQWlCLEFBQUMsRUFBQyxDQUFDO0FBQ3ZCLGVBQW9CLENBQUEsSUFBRyxnQkFBZ0IsQ0FBQzs7OztBQUk1QyxlQUFvQixLQUFHLENBQUM7QUFDeEIsb0JBQW9DLENBQUM7O0FBUi9DLGFBQUcsbUJBQW1CLEtBQW9CLENBQUE7OztBQUExQyxhQUFHLE9BQU8sQUFBQyxFQUFDLENBQUM7Ozs7QUFVSCxZQUFJO0FBQ0YsZUFBSSxLQUFpQixHQUFLLENBQUEsV0FBdUIsR0FBSyxLQUFHLENBQUc7QUFDMUQsd0JBQXdCLEFBQUMsRUFBQyxDQUFDO1lBQzdCO0FBQUEsVUFDRixDQUFFLE9BQVE7QUFDUixvQkFBd0I7QUFDdEIsd0JBQXdCO1lBQzFCO0FBQUEsVUFDRjtBQUFBOzs7QUFqQlksYUFBRyxNQUFNLEVBQUksQ0FBQSxJQUFHLG1CQUFtQixDQUFDO0FBQ3BDLGVBQUs7O0FBRjNCLGVBQU8sQ0FBQSxJQUFHLElBQUksQUFBQyxFQUFDLENBQUE7O0FBQ21CLEVBQy9CLFFBQTZCLEtBQUcsQ0FBQyxDQUFDO0FBMkp0QyxDQTdKdUQsQUE2SnZELENBQUM7QUFFRCxLQUFLLFFBQVEsRUFBSSxpQkFBZSxDQUFDO0FBQ2pDIiwiZmlsZSI6Imhvc3Rpbmcvd29ya2Zsb3dSZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBXb3JrZmxvdyA9IHJlcXVpcmUoXCIuLi9hY3Rpdml0aWVzL3dvcmtmbG93XCIpO1xubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xubGV0IEJlZ2luTWV0aG9kID0gcmVxdWlyZShcIi4uL2FjdGl2aXRpZXMvYmVnaW5NZXRob2RcIik7XG5sZXQgRW5kTWV0aG9kID0gcmVxdWlyZShcIi4uL2FjdGl2aXRpZXMvZW5kTWV0aG9kXCIpO1xubGV0IGlzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pc1wiKTtcbmxldCBBY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQgPSByZXF1aXJlKFwiLi4vYWN0aXZpdGllcy9hY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHRcIik7XG5cbmZ1bmN0aW9uIFdvcmtmbG93UmVnaXN0cnkoKSB7XG4gICAgdGhpcy5fd29ya2Zsb3dzID0gbmV3IE1hcCgpO1xufVxuXG5Xb3JrZmxvd1JlZ2lzdHJ5LnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh3b3JrZmxvdykge1xuICAgIGlmICh3b3JrZmxvdyBpbnN0YW5jZW9mIFdvcmtmbG93KSB7XG4gICAgICAgIGlmICghXyh3b3JrZmxvdy5uYW1lKS5pc1N0cmluZygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiV29ya2Zsb3cgbmFtZSBpcyBub3QgYSBzdHJpbmcuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuYW1lID0gd29ya2Zsb3cubmFtZS50cmltKCk7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIldvcmtmbG93IG5hbWUgaXMgZW1wdHkuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghXyh3b3JrZmxvdy52ZXJzaW9uKS5pc051bWJlcigpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiV29ya2Zsb3cgdmVyc2lvbiBpcyBub3QgYSBudW1iZXIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB2ZXJzaW9uID0gd29ya2Zsb3cudmVyc2lvbjtcblxuICAgICAgICBsZXQgZW50cnkgPSB0aGlzLl93b3JrZmxvd3MuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGxldCBkZXNjID0gZW50cnkuZ2V0KHZlcnNpb24pO1xuICAgICAgICAgICAgaWYgKGRlc2MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXb3JrZmxvdyBcIiArIG5hbWUgKyBcIiBcIiArIHZlcnNpb24gKyBcIiBhbHJlYWR5IHJlZ2lzdGVyZWQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW50cnkuc2V0KHZlcnNpb24sIHRoaXMuX2NyZWF0ZURlc2Mod29ya2Zsb3csIG5hbWUsIHdvcmtmbG93LnZlcnNpb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVudHJ5ID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgZW50cnkuc2V0KHZlcnNpb24sIHRoaXMuX2NyZWF0ZURlc2Mod29ya2Zsb3csIG5hbWUsIHdvcmtmbG93LnZlcnNpb24pKTtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtmbG93cy5zZXQobmFtZSwgZW50cnkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiV29ya2Zsb3cgaW5zdGFuY2UgYXJndW1lbnQgZXhwZWN0ZWQuXCIpO1xuICAgIH1cbn07XG5cbldvcmtmbG93UmVnaXN0cnkucHJvdG90eXBlLmdldERlc2MgPSBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbikge1xuICAgIGxldCBlbnRyeSA9IHRoaXMuX3dvcmtmbG93cy5nZXQobmFtZSk7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGlmICghXy5pc1VuZGVmaW5lZCh2ZXJzaW9uKSkge1xuICAgICAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGxldCBkZXNjID0gZW50cnkuZ2V0KHZlcnNpb24pO1xuICAgICAgICAgICAgaWYgKGRlc2MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldvcmtmbG93IFwiICsgbmFtZSArIFwiIG9mIHZlcnNpb24gXCIgKyB2ZXJzaW9uICsgXCIgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gR2V0IHRvcCB2ZXJzaW9uXG4gICAgICAgICAgICBsZXQgbWF4ViA9IC0xMDAwMDAwMDtcbiAgICAgICAgICAgIGxldCBkZXNjID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAobGV0IGQgb2YgZW50cnkudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZC52ZXJzaW9uID4gbWF4Vikge1xuICAgICAgICAgICAgICAgICAgICBkZXNjID0gZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlc2MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldvcmtmbG93IFwiICsgbmFtZSArIFwiIGhhcyBub3QgYmVlbiByZWdpc3RlcmVkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbldvcmtmbG93UmVnaXN0cnkucHJvdG90eXBlLmdldFRvcFZlcnNpb24gPSBmdW5jdGlvbiAod29ya2Zsb3dOYW1lKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBlbnRyeSA9IHRoaXMuX3dvcmtmbG93cy5nZXQod29ya2Zsb3dOYW1lKTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgZm9yIChsZXQgdmVyc2lvbiBvZiBlbnRyeS5rZXlzKCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZlcnNpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuc29ydCgpO1xuICAgIHJldHVybiByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdO1xufTtcblxuV29ya2Zsb3dSZWdpc3RyeS5wcm90b3R5cGUuX2NyZWF0ZURlc2MgPSBmdW5jdGlvbiAod29ya2Zsb3csIG5hbWUsIHZlcnNpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB3b3JrZmxvdzogd29ya2Zsb3csXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgICAgIG1ldGhvZHM6IHRoaXMuX2NvbGxlY3RNZXRob2RJbmZvcyh3b3JrZmxvdylcbiAgICB9O1xufTtcblxuV29ya2Zsb3dSZWdpc3RyeS5wcm90b3R5cGUuX2NvbGxlY3RNZXRob2RJbmZvcyA9IGZ1bmN0aW9uICh3b3JrZmxvdykge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgaW5mb3MgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGV4ZWNDb250ZXh0ID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dCgpO1xuICAgIGV4ZWNDb250ZXh0LmluaXRpYWxpemUod29ya2Zsb3cpO1xuICAgIGZvciAobGV0IGNoaWxkIG9mIHdvcmtmbG93LmNoaWxkcmVuKGV4ZWNDb250ZXh0KSkge1xuICAgICAgICBsZXQgaXNCTSA9IGNoaWxkIGluc3RhbmNlb2YgQmVnaW5NZXRob2Q7XG4gICAgICAgIGxldCBpc0VNID0gY2hpbGQgaW5zdGFuY2VvZiBFbmRNZXRob2Q7XG4gICAgICAgIGlmIChpc0JNIHx8IGlzRU0pIHtcbiAgICAgICAgICAgIGxldCBtZXRob2ROYW1lID0gXy5pc1N0cmluZyhjaGlsZC5tZXRob2ROYW1lKSA/IGNoaWxkLm1ldGhvZE5hbWUudHJpbSgpIDogbnVsbDtcbiAgICAgICAgICAgIGxldCBpbnN0YW5jZUlkUGF0aCA9IF8uaXNTdHJpbmcoY2hpbGQuaW5zdGFuY2VJZFBhdGgpID8gY2hpbGQuaW5zdGFuY2VJZFBhdGgudHJpbSgpIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZm8gPSBpbmZvcy5nZXQobWV0aG9kTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZmxvdzogd29ya2Zsb3csXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5DcmVhdGVJbnN0YW5jZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkUGF0aDogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpbmZvcy5zZXQobWV0aG9kTmFtZSwgaW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0JNICYmIGNoaWxkLmNhbkNyZWF0ZUluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZm8uY2FuQ3JlYXRlSW5zdGFuY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2VJZFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uaW5zdGFuY2VJZFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmluc3RhbmNlSWRQYXRoICE9PSBpbnN0YW5jZUlkUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCAnXCIgKyBtZXRob2ROYW1lICsgXCInIGluIHdvcmtmbG93ICdcIiArIHdvcmtmbG93Lm5hbWUgKyBcIicgaGFzIG11bHRpcGxlIGRpZmZlcmVudCBpbnN0YW5jZUlkUGF0aCB2YWx1ZSB3aGljaCBpcyBub3Qgc3VwcG9ydGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uaW5zdGFuY2VJZFBhdGggPSBpbnN0YW5jZUlkUGF0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IGt2cCBvZiBpbmZvcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKGt2cFsxXS5pbnN0YW5jZUlkUGF0aCkge1xuICAgICAgICAgICAgcmVzdWx0LnNldChrdnBbMF0sIGt2cFsxXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbldvcmtmbG93UmVnaXN0cnkucHJvdG90eXBlLm1ldGhvZEluZm9zID0gZnVuY3Rpb24qICh3b3JrZmxvd05hbWUsIG1ldGhvZE5hbWUpIHtcbiAgICBsZXQgZW50cnkgPSB0aGlzLl93b3JrZmxvd3MuZ2V0KHdvcmtmbG93TmFtZSk7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGZvciAobGV0IGRlc2Mgb2YgZW50cnkudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGxldCBpbmZvID0gZGVzYy5tZXRob2RzLmdldChtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgaW5mbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV29ya2Zsb3dSZWdpc3RyeTtcbiJdfQ==
