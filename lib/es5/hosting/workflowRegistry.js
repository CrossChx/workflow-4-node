"use strict";
"use strict";
var Workflow = require("../activities/workflow");
var _ = require("lodash");
var BeginMethod = require("../activities/beginMethod");
var EndMethod = require("../activities/endMethod");
var is = require("../common/is");
function WorkflowRegistry() {
  this._workflows = new Map();
}
WorkflowRegistry.prototype.register = function(workflow) {
  if (workflow instanceof Workflow) {
    if (!_(workflow.name).isString()) {
      throw new TypeError("Workflow name is not a string.");
    }
    var name = workflow.name.trim();
    if (!name) {
      throw new TypeError("Workflow name is empty.");
    }
    if (!_(workflow.version).isNumber()) {
      throw new TypeError("Workflow version is not a number.");
    }
    var version = workflow.version.toString();
    var entry = this._workflows.get(name);
    if (entry) {
      var desc = entry.get(version);
      if (desc) {
        throw new Error("Workflow " + name + " " + version + " already registered.");
      } else {
        entry.set(version, this._createDesc(workflow, name, workflow.version));
      }
    } else {
      entry = new Map();
      entry.set(version, this._createDesc(workflow, name, workflow.version));
      this._workflows.set(name, entry);
    }
  } else {
    throw new TypeError("Workflow instance argument expected.");
  }
};
WorkflowRegistry.prototype.getDesc = function(name, version) {
  var entry = this._workflows.get(name);
  if (entry) {
    if (is.defined(version)) {
      version = version.toString();
      var desc = entry.get(version);
      if (desc) {
        return desc;
      }
      throw new Error("Workflow " + name + " " + version + " has not been registered.");
    } else {
      var maxV = -10000000;
      var desc$__7 = null;
      var $__3 = true;
      var $__4 = false;
      var $__5 = undefined;
      try {
        for (var $__1 = void 0,
            $__0 = (entry.values())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
          var d = $__1.value;
          {
            if (d.version > maxV) {
              desc$__7 = d;
              break;
            }
          }
        }
      } catch ($__6) {
        $__4 = true;
        $__5 = $__6;
      } finally {
        try {
          if (!$__3 && $__0.return != null) {
            $__0.return();
          }
        } finally {
          if ($__4) {
            throw $__5;
          }
        }
      }
      if (desc$__7) {
        return desc$__7;
      }
      throw new Error("Workflow " + name + " has not been registered.");
    }
  }
};
WorkflowRegistry.prototype._createDesc = function(workflow, name, version) {
  return {
    workflow: workflow,
    name: name,
    version: version,
    methods: this._collectMethodInfos(workflow)
  };
};
WorkflowRegistry.prototype._collectMethodInfos = function(workflow) {
  var self = this;
  var infos = new Map();
  workflow.forEachChild(function(child) {
    var isBM = child instanceof BeginMethod;
    var isEM = child instanceof EndMethod;
    if (isBM || isEM) {
      var methodName = _(child.methodName).isString() ? child.methodName.trim() : null;
      var instanceIdPath = _(child.instanceIdPath).isString() ? child.instanceIdPath.trim() : null;
      if (methodName) {
        var info = infos.get(methodName);
        if (!info) {
          info = {
            workflow: workflow,
            canCreateInstance: false,
            instanceIdPath: null
          };
          infos.set(methodName, info);
        }
        if (isBM && child.canCreateInstance) {
          info.canCreateInstance = true;
        }
        if (instanceIdPath) {
          if (info.instanceIdPath) {
            if (info.instanceIdPath !== instanceIdPath) {
              throw new Error("Method '" + methodName + "' in workflow '" + workflow.name + "' has multiple different instanceIdPath value which is not supported.");
            }
          } else {
            info.instanceIdPath = instanceIdPath;
          }
        }
      }
    }
  });
  var result = new Map();
  infos.forEach(function(value, key) {
    if (value.instanceIdPath) {
      result.set(key, value);
    }
  });
  return result;
};
WorkflowRegistry.prototype.forEachMethodInfo = function(workflowName, methodName, f) {
  var entry = this._workflows.get(workflowName);
  if (entry) {
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (entry.values())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var desc = $__1.value;
        {
          var info = desc.methods.get(methodName);
          if (info) {
            f(info);
          }
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
  }
};
module.exports = WorkflowRegistry;
//# sourceMappingURL=data:application/json;base64,
