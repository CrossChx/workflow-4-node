{"version":3,"sources":["hosting/workflowRegistry.js"],"names":[],"mappings":"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","file":"hosting/workflowRegistry.js","sourcesContent":["\"use strict\";\n\nlet Workflow = require(\"../activities/workflow\");\nlet _ = require(\"lodash\");\nlet BeginMethod = require(\"../activities/beginMethod\");\nlet EndMethod = require(\"../activities/endMethod\");\nlet is = require(\"../common/is\");\nlet ActivityExecutionContext = require(\"../activities/activityExecutionContext\");\nlet activityMarkup = require(\"../activities/activityMarkup\");\nlet Serializer = require(\"backpack-node\").system.Serializer;\nlet crypto = require(\"crypto\");\nlet assert = require(\"better-assert\");\n\nfunction WorkflowRegistry(serializer) {\n    this._workflows = new Map();\n    this._serializer = serializer || new Serializer();\n}\n\nWorkflowRegistry.prototype.register = function (workflow, deprecated) {\n    if (_.isPlainObject(workflow)) {\n        workflow = activityMarkup.parse(workflow);\n    }\n    if (workflow instanceof Workflow) {\n        if (!_(workflow.name).isString()) {\n            throw new TypeError(\"Workflow name is not a string.\");\n        }\n        let name = workflow.name.trim();\n        if (!name) {\n            throw new TypeError(\"Workflow name is empty.\");\n        }\n        let execContext = new ActivityExecutionContext();\n        execContext.initialize(workflow);\n        let version = this._computeVersion(execContext);\n        let entry = this._workflows.get(name);\n        let desc;\n        if (entry) {\n            desc = entry.get(version);\n            if (desc) {\n                throw new Error(\"Workflow \" + name + \" (\" + version + \") already registered.\");\n            }\n            else {\n                if (!deprecated) {\n                    for (desc of entry.values()) {\n                        if (!desc.deprecated) {\n                            throw new Error(\"Workflow \" + name + \" (\" + version + \") has an already registered undeprecated version.\");\n                        }\n                    }\n                }\n                desc = this._createDesc(execContext, name, version, deprecated);\n                entry.set(version, desc);\n            }\n        }\n        else {\n            entry = new Map();\n            desc = this._createDesc(execContext, name, version, deprecated);\n            entry.set(version, desc);\n            this._workflows.set(name, entry);\n        }\n        return desc;\n    }\n    else {\n        throw new TypeError(\"Workflow instance argument expected.\");\n    }\n};\n\nWorkflowRegistry.prototype.getDesc = function (name, version) {\n    let entry = this._workflows.get(name);\n    if (entry) {\n        if (!_.isUndefined(version)) {\n            let desc = entry.get(version);\n            if (desc) {\n                return desc;\n            }\n            throw new Error(\"Workflow \" + name + \" of version \" + version + \" has not been registered.\");\n        }\n        else {\n            // Get undeprecated\n            let desc = null;\n            for (let d of entry.values()) {\n                if (!d.deprecated) {\n                    desc = d;\n                    break;\n                }\n            }\n            if (desc) {\n                return desc;\n            }\n            throw new Error(\"Workflow \" + name + \" hasn't got an undeprecated version registered.\");\n        }\n    }\n};\n\nWorkflowRegistry.prototype.getCurrentVersion = function (workflowName) {\n    let result = [];\n    let entry = this._workflows.get(workflowName);\n    if (entry) {\n        let desc = null;\n        for (let d of entry.values()) {\n            if (!d.deprecated) {\n                desc = d;\n                break;\n            }\n        }\n        if (desc) {\n            return desc.version;\n        }\n    }\n    return null;\n};\n\nWorkflowRegistry.prototype._createDesc = function (execContext, name, version, deprecated) {\n    return {\n        execContext: execContext,\n        name: name,\n        version: version,\n        methods: this._collectMethodInfos(execContext, version),\n        deprecated: deprecated\n    };\n};\n\nWorkflowRegistry.prototype._collectMethodInfos = function (execContext, version) {\n    let self = this;\n    let infos = new Map();\n    let workflow = execContext.rootActivity;\n    for (let child of workflow.children(execContext)) {\n        let isBM = child instanceof BeginMethod;\n        let isEM = child instanceof EndMethod;\n        if (isBM || isEM) {\n            let methodName = _.isString(child.methodName) ? child.methodName.trim() : null;\n            let instanceIdPath = _.isString(child.instanceIdPath) ? child.instanceIdPath.trim() : null;\n            if (methodName) {\n                let info = infos.get(methodName);\n                if (!info) {\n                    info = {\n                        execContext: execContext,\n                        version: version,\n                        canCreateInstance: false,\n                        instanceIdPath: null\n                    };\n                    infos.set(methodName, info);\n                }\n                if (isBM && child.canCreateInstance) {\n                    info.canCreateInstance = true;\n                }\n                if (instanceIdPath) {\n                    if (info.instanceIdPath) {\n                        if (info.instanceIdPath !== instanceIdPath) {\n                            throw new Error(\"Method '\" + methodName + \"' in workflow '\" + workflow.name + \"' has multiple different instanceIdPath value which is not supported.\");\n                        }\n                    }\n                    else {\n                        info.instanceIdPath = instanceIdPath;\n                    }\n                }\n            }\n        }\n    }\n    let result = new Map();\n    for (let kvp of infos.entries()) {\n        if (kvp[1].instanceIdPath) {\n            result.set(kvp[0], kvp[1]);\n        }\n    }\n    return result;\n};\n\nWorkflowRegistry.prototype.methodInfos = function* (workflowName, methodName) {\n    let entry = this._workflows.get(workflowName);\n    if (entry) {\n        for (let desc of entry.values()) {\n            let info = desc.methods.get(methodName);\n            if (info) {\n                yield info;\n            }\n        }\n    }\n};\n\nWorkflowRegistry.prototype._computeVersion = function(execContext) {\n    let self = this;\n    let workflow = execContext.rootActivity;\n    let sha = crypto.createHash(\"sha256\");\n    function add(value) {\n        if (!_.isNull(value)) {\n            value = self._serializer.stringify(value);\n            sha.update(value);\n        }\n    }\n    for (let activity of workflow.all(execContext)) {\n        let alias = activityMarkup.getAlias(activity);\n        assert(alias);\n        add(alias);\n        for (let key in activity) {\n            if (activity.hasOwnProperty(key) &&\n                !activity.nonScopedProperties.has(key) &&\n                !activity.nonSerializedProperties.has(key)) {\n                let value = activity[key];\n                if (!is.activity(value)) {\n                    if (_.isArray(value)) {\n                        for (let item of value) {\n                            if (!is.activity(item)) {\n                                add(value);\n                            }\n                        }\n                    }\n                    else {\n                        add(value);\n                    }\n                }\n            }\n        }\n    }\n    return sha.digest(\"hex\");\n};\n\nmodule.exports = WorkflowRegistry;\n"],"sourceRoot":"/source/"}