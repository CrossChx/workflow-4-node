"use strict";
var _ = require("lodash");
var Promise = require("bluebird");
function KeepAlive(repeatFunc, repeatPeriod) {
  if (!_.isFunction(repeatFunc))
    throw new TypeError("Function argument expected.");
  this._repeatFunc = repeatFunc;
  this._repeatPeriod = repeatPeriod;
  this._isRunning = true;
  this._toId = null;
  var self = this;
  process.nextTick(function() {
    self._start.call(self);
  });
}
KeepAlive.prototype._start = function() {
  var self = this;
  self._toId = setTimeout(function() {
    if (self._isRunning) {
      Promise.resolve(self._repeatFunc()).catch(function(e) {
        console.error("Keep alive failed:\n" + e.stack);
      }).finally(function() {
        if (self._isRunning)
          self._start();
      });
    }
  }, self._repeatPeriod);
};
KeepAlive.prototype.end = function() {
  if (!this._isRunning)
    throw new Error("Keep alive has already ended.");
  this._isRunning = false;
  if (this._toId)
    clearTimeout(this._toId);
};
module.exports = KeepAlive;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImtlZXBBbGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLEFBQUksRUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQ3pCLEFBQUksRUFBQSxDQUFBLE9BQU0sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxDQUFDO0FBRWpDLE9BQVMsVUFBUSxDQUFFLFVBQVMsQ0FBRyxDQUFBLFlBQVcsQ0FBRztBQUN6QyxLQUFJLENBQUMsQ0FBQSxXQUFXLEFBQUMsQ0FBQyxVQUFTLENBQUM7QUFBRyxRQUFNLElBQUksVUFBUSxBQUFDLENBQUMsNkJBQTRCLENBQUMsQ0FBQztBQUFBLEFBQ2pGLEtBQUcsWUFBWSxFQUFJLFdBQVMsQ0FBQztBQUM3QixLQUFHLGNBQWMsRUFBSSxhQUFXLENBQUM7QUFDakMsS0FBRyxXQUFXLEVBQUksS0FBRyxDQUFDO0FBQ3RCLEtBQUcsTUFBTSxFQUFJLEtBQUcsQ0FBQztBQUNqQixBQUFJLElBQUEsQ0FBQSxJQUFHLEVBQUksS0FBRyxDQUFDO0FBQ2YsUUFBTSxTQUFTLEFBQUMsQ0FBQyxTQUFVLEFBQUQsQ0FBRztBQUN6QixPQUFHLE9BQU8sS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7RUFDMUIsQ0FBQyxDQUFDO0FBQ047QUFBQSxBQUVBLFFBQVEsVUFBVSxPQUFPLEVBQUksVUFBVSxBQUFELENBQUc7QUFDckMsQUFBSSxJQUFBLENBQUEsSUFBRyxFQUFJLEtBQUcsQ0FBQztBQUNmLEtBQUcsTUFBTSxFQUFJLENBQUEsVUFBUyxBQUFDLENBQ25CLFNBQVUsQUFBRCxDQUFHO0FBQ1IsT0FBSSxJQUFHLFdBQVcsQ0FBRztBQUNqQixZQUFNLFFBQVEsQUFBQyxDQUFDLElBQUcsWUFBWSxBQUFDLEVBQUMsQ0FBQyxNQUN6QixBQUFDLENBQUMsU0FBVSxDQUFBLENBQUc7QUFDaEIsY0FBTSxNQUFNLEFBQUMsQ0FBQyxzQkFBcUIsRUFBSSxDQUFBLENBQUEsTUFBTSxDQUFDLENBQUM7TUFDbkQsQ0FBQyxRQUNNLEFBQUMsQ0FBQyxTQUFVLEFBQUQsQ0FBRztBQUNqQixXQUFJLElBQUcsV0FBVztBQUFHLGFBQUcsT0FBTyxBQUFDLEVBQUMsQ0FBQztBQUFBLE1BQ3RDLENBQUMsQ0FBQztJQUNWO0FBQUEsRUFDSixDQUNBLENBQUEsSUFBRyxjQUFjLENBQUMsQ0FBQztBQUMzQixDQUFBO0FBRUEsUUFBUSxVQUFVLElBQUksRUFBSSxVQUFVLEFBQUQsQ0FBRztBQUNsQyxLQUFJLENBQUMsSUFBRyxXQUFXO0FBQUcsUUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLCtCQUE4QixDQUFDLENBQUM7QUFBQSxBQUV0RSxLQUFHLFdBQVcsRUFBSSxNQUFJLENBQUM7QUFDdkIsS0FBSSxJQUFHLE1BQU07QUFBRyxlQUFXLEFBQUMsQ0FBQyxJQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQUEsQUFDNUMsQ0FBQTtBQUVBLEtBQUssUUFBUSxFQUFJLFVBQVEsQ0FBQztBQUFBIiwiZmlsZSI6Imhvc3Rpbmcva2VlcEFsaXZlLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XHJcbnZhciBQcm9taXNlID0gcmVxdWlyZShcImJsdWViaXJkXCIpO1xyXG5cclxuZnVuY3Rpb24gS2VlcEFsaXZlKHJlcGVhdEZ1bmMsIHJlcGVhdFBlcmlvZCkge1xyXG4gICAgaWYgKCFfLmlzRnVuY3Rpb24ocmVwZWF0RnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBhcmd1bWVudCBleHBlY3RlZC5cIik7XHJcbiAgICB0aGlzLl9yZXBlYXRGdW5jID0gcmVwZWF0RnVuYztcclxuICAgIHRoaXMuX3JlcGVhdFBlcmlvZCA9IHJlcGVhdFBlcmlvZDtcclxuICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWU7XHJcbiAgICB0aGlzLl90b0lkID0gbnVsbDtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbGYuX3N0YXJ0LmNhbGwoc2VsZik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuS2VlcEFsaXZlLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLl90b0lkID0gc2V0VGltZW91dChcclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLl9pc1J1bm5pbmcpIHtcclxuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShzZWxmLl9yZXBlYXRGdW5jKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJLZWVwIGFsaXZlIGZhaWxlZDpcXG5cIiArIGUuc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5faXNSdW5uaW5nKSBzZWxmLl9zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWxmLl9yZXBlYXRQZXJpb2QpO1xyXG59XHJcblxyXG5LZWVwQWxpdmUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghdGhpcy5faXNSdW5uaW5nKSB0aHJvdyBuZXcgRXJyb3IoXCJLZWVwIGFsaXZlIGhhcyBhbHJlYWR5IGVuZGVkLlwiKTtcclxuXHJcbiAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcclxuICAgIGlmICh0aGlzLl90b0lkKSBjbGVhclRpbWVvdXQodGhpcy5fdG9JZCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gS2VlcEFsaXZlOyJdfQ==
