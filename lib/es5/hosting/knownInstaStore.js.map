{"version":3,"names":[],"mappings":"","sources":["hosting/knownInstaStore.js"],"sourcesContent":["\"use strict\";\n\nlet specStrings = require(\"../common/specStrings\");\nlet InstIdPaths = require(\"./instIdPaths\");\nlet _ = require(\"lodash\");\nlet debug = require(\"debug\")(\"wf4node:KnownInstaStore\");\nlet enums = require(\"../common/enums\");\n\nfunction KnownInstaStore() {\n    this._instances = new Map();\n}\n\nKnownInstaStore.prototype.add = function (workflowName, insta) {\n    this._instances.set(specStrings.hosting.doubleKeys(workflowName, insta.id), insta);\n};\n\nKnownInstaStore.prototype.get = function (workflowName, instanceId) {\n    return this._instances.get(specStrings.hosting.doubleKeys(workflowName, instanceId));\n};\n\nKnownInstaStore.prototype.exists = function (workflowName, instanceId) {\n    return this._instances.has(specStrings.hosting.doubleKeys(workflowName, instanceId));\n};\n\nKnownInstaStore.prototype.remove = function (workflowName, instanceId) {\n    this._instances.delete(specStrings.hosting.doubleKeys(workflowName, instanceId));\n};\n\nKnownInstaStore.prototype.getNextWakeupables = function (count) {\n    let now = new Date();\n    let result = [];\n    for (let insta of this._instances.values()) {\n        if (insta.execState === enums.activityStates.idle && insta.activeDelays) {\n            for (let ad of insta.activeDelays) {\n                if (ad.delayTo <= now) {\n                    result.push({\n                        instanceId: insta.id,\n                        workflowName: insta.workflowName,\n                        activeDelay: {\n                            methodName: ad.methodName,\n                            delayTo: ad.delayTo\n                        }\n                    });\n                }\n            }\n        }\n    }\n    result.sort(function (i1, i2) {\n        if (i1.updatedOn < i2.updatedOn) {\n            return -1;\n        }\n        else if (i1.updatedOn > i2.updatedOn) {\n            return 1;\n        }\n        else if (i1.activeDelay.delayTo < i2.activeDelay.delayTo) {\n            return -1;\n        }\n        else if (i1.activeDelay.delayTo > i2.activeDelay.delayTo) {\n            return 1;\n        }\n        return 0;\n    });\n    return _.take(result, count);\n};\n\nKnownInstaStore.prototype.getRunningInstanceHeadersForOtherVersion = function(workflowName, version) {\n    let result = [];\n    for (let insta of this._instances.values()) {\n        if (insta.workflowName === workflowName && insta.version !== version) {\n            result.push({\n                workflowName: insta.workflowName,\n                workflowVersion: insta.workflowVersion,\n                instanceId: insta.id\n            });\n        }\n    }\n    return result;\n};\n\nKnownInstaStore.prototype.addTracker = function(tracker) {\n    for (let insta of this._instances.values()) {\n        insta.addTracker(tracker);\n    }\n};\n\nmodule.exports = KnownInstaStore;\n"],"file":"hosting/knownInstaStore.js","sourceRoot":"/source/"}