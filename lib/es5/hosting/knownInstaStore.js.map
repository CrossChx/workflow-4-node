{"version":3,"names":[],"mappings":"","sources":["hosting/knownInstaStore.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet specStrings = require(\"../common/specStrings\");\r\nlet InstIdPaths = require(\"./instIdPaths\");\r\nlet _ = require(\"lodash\");\r\nlet debug = require(\"debug\")(\"wf4node:KnownInstaStore\");\r\nlet enums = require(\"../common/enums\");\r\n\r\nfunction KnownInstaStore() {\r\n    this._instances = new Map();\r\n}\r\n\r\nKnownInstaStore.prototype.add = function (workflowName, insta) {\r\n    this._instances.set(specStrings.hosting.doubleKeys(workflowName, insta.id), insta);\r\n};\r\n\r\nKnownInstaStore.prototype.get = function (workflowName, instanceId) {\r\n    return this._instances.get(specStrings.hosting.doubleKeys(workflowName, instanceId));\r\n};\r\n\r\nKnownInstaStore.prototype.exists = function (workflowName, instanceId) {\r\n    return this._instances.has(specStrings.hosting.doubleKeys(workflowName, instanceId));\r\n};\r\n\r\nKnownInstaStore.prototype.remove = function (workflowName, instanceId) {\r\n    this._instances.delete(specStrings.hosting.doubleKeys(workflowName, instanceId));\r\n};\r\n\r\nKnownInstaStore.prototype.getNextWakeupables = function (count) {\r\n    let now = new Date();\r\n    let result = [];\r\n    for (let insta of this._instances.values()) {\r\n        if (insta.execState === enums.activityStates.idle && insta.activeDelays) {\r\n            for (let ad of insta.activeDelays) {\r\n                if (ad.delayTo <= now) {\r\n                    result.push({\r\n                        instanceId: insta.id,\r\n                        workflowName: insta.workflowName,\r\n                        activeDelay: {\r\n                            methodName: ad.methodName,\r\n                            delayTo: ad.delayTo\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    result.sort(function (i1, i2) {\r\n        if (i1.updatedOn < i2.updatedOn) {\r\n            return -1;\r\n        }\r\n        else if (i1.updatedOn > i2.updatedOn) {\r\n            return 1;\r\n        }\r\n        else if (i1.activeDelay.delayTo < i2.activeDelay.delayTo) {\r\n            return -1;\r\n        }\r\n        else if (i1.activeDelay.delayTo > i2.activeDelay.delayTo) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    });\r\n    return _.take(result, count);\r\n};\r\n\r\nKnownInstaStore.prototype.getRunningInstanceHeadersForOtherVersion = function(workflowName, version) {\r\n    let result = [];\r\n    for (let insta of this._instances.values()) {\r\n        if (insta.workflowName === workflowName && insta.version !== version) {\r\n            result.push({\r\n                workflowName: insta.workflowName,\r\n                workflowVersion: insta.workflowVersion,\r\n                instanceId: insta.id\r\n            });\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nKnownInstaStore.prototype.addTracker = function(tracker) {\r\n    for (let insta of this._instances.values()) {\r\n        insta.addTracker(tracker);\r\n    }\r\n};\r\n\r\nmodule.exports = KnownInstaStore;\r\n"],"file":"hosting/knownInstaStore.js","sourceRoot":"/source/"}