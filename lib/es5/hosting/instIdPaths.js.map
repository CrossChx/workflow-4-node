{"version":3,"names":[],"mappings":"","sources":["hosting/instIdPaths.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet specStrings = require(\"../common/specStrings\");\r\nlet is = require(\"../common/is\");\r\n\r\nfunction InstIdPaths() {\r\n    this._map = new Map();\r\n}\r\n\r\nInstIdPaths.prototype.add = function (workflowName, methodName, instanceIdPath) {\r\n    let key = specStrings.hosting.doubleKeys(workflowName, methodName);\r\n    let inner = this._map.get(key);\r\n    if (!inner) {\r\n        inner = new Map();\r\n        this._map.set(key, inner);\r\n    }\r\n    let count = inner.get(instanceIdPath) || 0;\r\n    inner.set(instanceIdPath, count + 1);\r\n};\r\n\r\nInstIdPaths.prototype.remove = function (workflowName, methodName, instanceIdPath) {\r\n    let key = specStrings.hosting.doubleKeys(workflowName, methodName);\r\n    let inner = this._map.get(key);\r\n    if (inner) {\r\n        let count = inner.get(instanceIdPath);\r\n        if (!_.isUndefined(count)) {\r\n            if (count === 1) {\r\n                this._map.delete(key);\r\n            }\r\n            else {\r\n                inner.set(instanceIdPath, count - 1);\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nInstIdPaths.prototype.items = function* (workflowName, methodName) {\r\n    let key = specStrings.hosting.doubleKeys(workflowName, methodName);\r\n    let inner = this._map.get(key);\r\n    if (inner) {\r\n        for (let ik of inner.keys()) {\r\n            yield ik;\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = InstIdPaths;\r\n"],"file":"hosting/instIdPaths.js","sourceRoot":"/source/"}