{"version":3,"names":[],"mappings":"","sources":["hosting/instIdPaths.js"],"sourcesContent":["\"use strict\";\n\nlet specStrings = require(\"../common/specStrings\");\nlet is = require(\"../common/is\");\n\nfunction InstIdPaths() {\n    this._map = new Map();\n}\n\nInstIdPaths.prototype.add = function (workflowName, methodName, instanceIdPath) {\n    let key = specStrings.hosting.doubleKeys(workflowName, methodName);\n    let inner = this._map.get(key);\n    if (!inner) {\n        inner = new Map();\n        this._map.set(key, inner);\n    }\n    let count = inner.get(instanceIdPath) || 0;\n    inner.set(instanceIdPath, count + 1);\n};\n\nInstIdPaths.prototype.remove = function (workflowName, methodName, instanceIdPath) {\n    let key = specStrings.hosting.doubleKeys(workflowName, methodName);\n    let inner = this._map.get(key);\n    if (inner) {\n        let count = inner.get(instanceIdPath);\n        if (!_.isUndefined(count)) {\n            if (count === 1) {\n                this._map.delete(key);\n            }\n            else {\n                inner.set(instanceIdPath, count - 1);\n            }\n        }\n    }\n    return false;\n};\n\nInstIdPaths.prototype.items = function* (workflowName, methodName) {\n    let key = specStrings.hosting.doubleKeys(workflowName, methodName);\n    let inner = this._map.get(key);\n    if (inner) {\n        for (let ik of inner.keys()) {\n            yield ik;\n        }\n    }\n};\n\nmodule.exports = InstIdPaths;\n"],"file":"hosting/instIdPaths.js","sourceRoot":"/source/"}