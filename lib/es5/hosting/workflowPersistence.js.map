{"version":3,"names":[],"mappings":"","sources":["hosting/workflowPersistence.js"],"sourcesContent":["\"use strict\";\n\nlet _ = require(\"lodash\");\nlet WorkflowInstance = require(\"./workflowInstance\");\nlet errors = require(\"../common/errors\");\nlet asyncHelpers = require(\"../common/asyncHelpers\");\nlet Bluebird = require(\"bluebird\");\nlet async = asyncHelpers.async;\nlet assert = require(\"better-assert\");\n\nfunction WorkflowPersistence(impl) {\n    assert(_.isObject(impl));\n\n    this._impl = impl;\n}\n\nWorkflowPersistence.prototype.enterLock = function (lockName, enterLockTimeoutMs, inLockTimeoutMs) {\n    assert(_.isString(lockName));\n    assert(_.isNumber(enterLockTimeoutMs));\n    assert(enterLockTimeoutMs >= 1000);\n    assert(_.isNumber(inLockTimeoutMs));\n    assert(inLockTimeoutMs >= 1000);\n\n    let self = this;\n    return asyncHelpers.aggressiveRetry(\n        function () {\n            return Bluebird.resolve(self._impl.enterLock(lockName, inLockTimeoutMs));\n        },\n        function (lockInfo) {\n            return !!lockInfo;\n        },\n        enterLockTimeoutMs,\n        function () {\n            return new errors.TimeoutError(\"Entering lock '\" + lockName + \"' has timed out.\");\n        }\n    );\n};\n\nWorkflowPersistence.prototype.renewLock = function (lockId, inLockTimeoutMs) {\n    assert(!!lockId);\n    assert(inLockTimeoutMs > 0);\n\n    return Bluebird.resolve(this._impl.renewLock(lockId, inLockTimeoutMs));\n};\n\nWorkflowPersistence.prototype.exitLock = function (lockId) {\n    assert(!!lockId);\n\n    return Bluebird.resolve(this._impl.exitLock(lockId));\n};\n\nWorkflowPersistence.prototype.isRunning = function (workflowName, instanceId) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n\n    return Bluebird.resolve(this._impl.isRunning(workflowName, instanceId));\n};\n\nWorkflowPersistence.prototype.persistState = function (instance) {\n    assert(instance instanceof WorkflowInstance);\n\n    let data = instance.getStateToPersist();\n    return Bluebird.resolve(this._impl.persistState(data));\n};\n\nWorkflowPersistence.prototype.getRunningInstanceIdHeader = function (workflowName, instanceId) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n\n    return Bluebird.resolve(this._impl.getRunningInstanceIdHeader(workflowName, instanceId));\n};\n\nWorkflowPersistence.prototype.loadState = async(function* (workflowName, instanceId) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n\n    // Without: idleMethods, promotedProperties\n    let state = yield (Bluebird.resolve(this._impl.loadState(workflowName, instanceId)));\n    if (!state) {\n        throw new Error(\"Instance state of workflow '\" + workflowName + \"' by id '\" + instanceId + \"' is not found.\");\n    }\n    return state;\n});\n\nWorkflowPersistence.prototype.removeState = function (workflowName, instanceId, succeeded, error) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n    assert(_.isBoolean(succeeded));\n\n    return Bluebird.resolve(this._impl.removeState(workflowName, instanceId, succeeded, error));\n};\n\nWorkflowPersistence.prototype.loadPromotedProperties = function (workflowName, instanceId) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n\n    return Bluebird.resolve(this._impl.loadPromotedProperties(workflowName, instanceId));\n};\n\nWorkflowPersistence.prototype.getNextWakeupables = function (count) {\n    assert(count > 0);\n\n    return Bluebird.resolve(this._impl.getNextWakeupables(count));\n};\n\nWorkflowPersistence.prototype.getRunningInstanceHeadersForOtherVersion = function(workflowName, version) {\n    assert(_.isString(workflowName));\n    assert(_.isString(version));\n\n    return Bluebird.resolve(this._impl.getRunningInstanceHeadersForOtherVersion(workflowName, version));\n};\n\nmodule.exports = WorkflowPersistence;\n"],"file":"hosting/workflowPersistence.js","sourceRoot":"/source/"}