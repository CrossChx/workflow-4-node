{"version":3,"sources":["hosting/workflowPersistence.js"],"names":[],"mappings":"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","file":"hosting/workflowPersistence.js","sourcesContent":["\"use strict\";\n\nlet _ = require(\"lodash\");\nlet WorkflowInstance = require(\"./workflowInstance\");\nlet errors = require(\"../common/errors\");\nlet asyncHelpers = require(\"../common/asyncHelpers\");\nlet Bluebird = require(\"bluebird\");\nlet async = asyncHelpers.async;\nlet assert = require(\"better-assert\");\n\nfunction WorkflowPersistence(impl) {\n    assert(_.isObject(impl));\n\n    this._impl = impl;\n}\n\nWorkflowPersistence.prototype.enterLock = function (lockName, enterLockTimeoutMs, inLockTimeoutMs) {\n    assert(_.isString(lockName));\n    assert(_.isNumber(enterLockTimeoutMs));\n    assert(enterLockTimeoutMs >= 1000);\n    assert(_.isNumber(inLockTimeoutMs));\n    assert(inLockTimeoutMs >= 1000);\n\n    let self = this;\n    return asyncHelpers.aggressiveRetry(\n        function () {\n            return Bluebird.resolve(self._impl.enterLock(lockName, inLockTimeoutMs));\n        },\n        function (lockInfo) {\n            return !!lockInfo;\n        },\n        enterLockTimeoutMs,\n        function () {\n            return new errors.TimeoutError(\"Entering lock '\" + lockName + \"' has timed out.\");\n        }\n    );\n};\n\nWorkflowPersistence.prototype.renewLock = function (lockId, inLockTimeoutMs) {\n    assert(!!lockId);\n    assert(inLockTimeoutMs > 0);\n\n    return Bluebird.resolve(this._impl.renewLock(lockId, inLockTimeoutMs));\n};\n\nWorkflowPersistence.prototype.exitLock = function (lockId) {\n    assert(!!lockId);\n\n    return Bluebird.resolve(this._impl.exitLock(lockId));\n};\n\nWorkflowPersistence.prototype.isRunning = function (workflowName, instanceId) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n\n    return Bluebird.resolve(this._impl.isRunning(workflowName, instanceId));\n};\n\nWorkflowPersistence.prototype.persistState = function (instance) {\n    assert(instance instanceof WorkflowInstance);\n\n    let data = instance.getStateToPersist();\n    return Bluebird.resolve(this._impl.persistState(data));\n};\n\nWorkflowPersistence.prototype.getRunningInstanceIdHeader = function (workflowName, instanceId) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n\n    return Bluebird.resolve(this._impl.getRunningInstanceIdHeader(workflowName, instanceId));\n};\n\nWorkflowPersistence.prototype.loadState = async(function* (workflowName, instanceId) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n\n    // Without: idleMethods, promotedProperties\n    let state = yield (Bluebird.resolve(this._impl.loadState(workflowName, instanceId)));\n    if (!state) {\n        throw new Error(\"Instance state of workflow '\" + workflowName + \"' by id '\" + instanceId + \"' is not found.\");\n    }\n    return state;\n});\n\nWorkflowPersistence.prototype.removeState = function (workflowName, instanceId, succeeded, error) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n    assert(_.isBoolean(succeeded));\n\n    return Bluebird.resolve(this._impl.removeState(workflowName, instanceId, succeeded, error));\n};\n\nWorkflowPersistence.prototype.loadPromotedProperties = function (workflowName, instanceId) {\n    assert(_.isString(workflowName));\n    assert(!!instanceId);\n\n    return Bluebird.resolve(this._impl.loadPromotedProperties(workflowName, instanceId));\n};\n\nWorkflowPersistence.prototype.getNextWakeupables = function (count) {\n    assert(count > 0);\n\n    return Bluebird.resolve(this._impl.getNextWakeupables(count));\n};\n\nWorkflowPersistence.prototype.getRunningInstanceHeadersForOtherVersion = function(workflowName, version) {\n    assert(_.isString(workflowName));\n    assert(_.isString(version));\n\n    return Bluebird.resolve(this._impl.getRunningInstanceHeadersForOtherVersion(workflowName, version));\n};\n\nmodule.exports = WorkflowPersistence;\n"],"sourceRoot":"/source/"}