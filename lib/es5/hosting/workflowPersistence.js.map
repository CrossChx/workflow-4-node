{"version":3,"names":[],"mappings":"","sources":["hosting/workflowPersistence.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet _ = require(\"lodash\");\r\nlet WorkflowInstance = require(\"./workflowInstance\");\r\nlet errors = require(\"../common/errors\");\r\nlet asyncHelpers = require(\"../common/asyncHelpers\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = asyncHelpers.async;\r\nlet assert = require(\"better-assert\");\r\n\r\nfunction WorkflowPersistence(impl) {\r\n    assert(_.isObject(impl));\r\n\r\n    this._impl = impl;\r\n}\r\n\r\nWorkflowPersistence.prototype.enterLock = function (lockName, enterLockTimeoutMs, inLockTimeoutMs) {\r\n    assert(_.isString(lockName));\r\n    assert(_.isNumber(enterLockTimeoutMs));\r\n    assert(enterLockTimeoutMs >= 1000);\r\n    assert(_.isNumber(inLockTimeoutMs));\r\n    assert(inLockTimeoutMs >= 1000);\r\n\r\n    let self = this;\r\n    return asyncHelpers.aggressiveRetry(\r\n        function () {\r\n            return Bluebird.resolve(self._impl.enterLock(lockName, inLockTimeoutMs));\r\n        },\r\n        function (lockInfo) {\r\n            return !!lockInfo;\r\n        },\r\n        enterLockTimeoutMs,\r\n        function () {\r\n            return new errors.TimeoutError(\"Entering lock '\" + lockName + \"' has timed out.\");\r\n        }\r\n    );\r\n};\r\n\r\nWorkflowPersistence.prototype.renewLock = function (lockId, inLockTimeoutMs) {\r\n    assert(!!lockId);\r\n    assert(inLockTimeoutMs > 0);\r\n\r\n    return Bluebird.resolve(this._impl.renewLock(lockId, inLockTimeoutMs));\r\n};\r\n\r\nWorkflowPersistence.prototype.exitLock = function (lockId) {\r\n    assert(!!lockId);\r\n\r\n    return Bluebird.resolve(this._impl.exitLock(lockId));\r\n};\r\n\r\nWorkflowPersistence.prototype.isRunning = function (workflowName, instanceId) {\r\n    assert(_.isString(workflowName));\r\n    assert(!!instanceId);\r\n\r\n    return Bluebird.resolve(this._impl.isRunning(workflowName, instanceId));\r\n};\r\n\r\nWorkflowPersistence.prototype.persistState = function (instance) {\r\n    assert(instance instanceof WorkflowInstance);\r\n\r\n    let data = instance.getStateToPersist();\r\n    return Bluebird.resolve(this._impl.persistState(data));\r\n};\r\n\r\nWorkflowPersistence.prototype.getRunningInstanceIdHeader = function (workflowName, instanceId) {\r\n    assert(_.isString(workflowName));\r\n    assert(!!instanceId);\r\n\r\n    return Bluebird.resolve(this._impl.getRunningInstanceIdHeader(workflowName, instanceId));\r\n};\r\n\r\nWorkflowPersistence.prototype.loadState = async(function* (workflowName, instanceId) {\r\n    assert(_.isString(workflowName));\r\n    assert(!!instanceId);\r\n\r\n    // Without: idleMethods, promotedProperties\r\n    let state = yield (Bluebird.resolve(this._impl.loadState(workflowName, instanceId)));\r\n    if (!state) {\r\n        throw new Error(\"Instance state of workflow '\" + workflowName + \"' by id '\" + instanceId + \"' is not found.\");\r\n    }\r\n    return state;\r\n});\r\n\r\nWorkflowPersistence.prototype.removeState = function (workflowName, instanceId, succeeded, error) {\r\n    assert(_.isString(workflowName));\r\n    assert(!!instanceId);\r\n    assert(_.isBoolean(succeeded));\r\n\r\n    return Bluebird.resolve(this._impl.removeState(workflowName, instanceId, succeeded, error));\r\n};\r\n\r\nWorkflowPersistence.prototype.loadPromotedProperties = function (workflowName, instanceId) {\r\n    assert(_.isString(workflowName));\r\n    assert(!!instanceId);\r\n\r\n    return Bluebird.resolve(this._impl.loadPromotedProperties(workflowName, instanceId));\r\n};\r\n\r\nWorkflowPersistence.prototype.getNextWakeupables = function (count) {\r\n    assert(count > 0);\r\n\r\n    return Bluebird.resolve(this._impl.getNextWakeupables(count));\r\n};\r\n\r\nWorkflowPersistence.prototype.getRunningInstanceHeadersForOtherVersion = function(workflowName, version) {\r\n    assert(_.isString(workflowName));\r\n    assert(_.isString(version));\r\n\r\n    return Bluebird.resolve(this._impl.getRunningInstanceHeadersForOtherVersion(workflowName, version));\r\n};\r\n\r\nmodule.exports = WorkflowPersistence;\r\n"],"file":"hosting/workflowPersistence.js","sourceRoot":"/source/"}