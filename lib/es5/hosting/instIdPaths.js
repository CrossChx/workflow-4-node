"use strict";
"use strict";
var specStrings = require("../common/specStrings");
var is = require("../common/is");
function InstIdPaths() {
  this._map = new Map();
}
InstIdPaths.prototype.add = function(workflowName, methodName, instanceIdPath) {
  var key = specStrings.hosting.doubleKeys(workflowName, methodName);
  var inner = this._map.get(key);
  if (!inner) {
    inner = new Map();
    this._map.set(key, inner);
  }
  var count = inner.get(instanceIdPath) || 0;
  inner.set(instanceIdPath, count + 1);
};
InstIdPaths.prototype.remove = function(workflowName, methodName, instanceIdPath) {
  var key = specStrings.hosting.doubleKeys(workflowName, methodName);
  var inner = this._map.get(key);
  if (inner) {
    var count = inner.get(instanceIdPath);
    if (is.defined(count)) {
      if (count === 1) {
        this._map.delete(key);
      } else {
        inner.set(instanceIdPath, count - 1);
      }
    }
  }
  return false;
};
InstIdPaths.prototype.forEach = function(workflowName, methodName, f) {
  var key = specStrings.hosting.doubleKeys(workflowName, methodName);
  var inner = this._map.get(key);
  if (inner) {
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (inner.keys())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var ik = $__1.value;
        {
          f(ik);
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
  }
};
module.exports = InstIdPaths;
//# sourceMappingURL=data:application/json;base64,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NEI7QUFDaEIsZUFBb0IsQ0FBQSxDQXVDZCxLQUFJLEtBQUssQUFBQyxFQUFDLENBdkNxQixDQUNsQyxlQUFjLFdBQVcsQUFBQyxDQUFDLE1BQUssU0FBUyxDQUFDLENBQUMsQUFBQyxFQUFDLENBQ3JELEVBQUMsQ0FBQyxNQUFvQixDQUFBLENBQUMsTUFBb0IsQ0FBQSxTQUFxQixBQUFDLEVBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDekUsT0FBb0IsS0FBRyxDQUFHO1VBb0N0QixHQUFDO0FBQW1CO0FBQ3pCLFVBQUEsQUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ1Q7TUFuQ0E7QUFBQSxJQUZBLENBQUUsWUFBMEI7QUFDMUIsV0FBb0IsS0FBRyxDQUFDO0FBQ3hCLGdCQUFvQyxDQUFDO0lBQ3ZDLENBQUUsT0FBUTtBQUNSLFFBQUk7QUFDRixXQUFJLEtBQWlCLEdBQUssQ0FBQSxXQUF1QixHQUFLLEtBQUcsQ0FBRztBQUMxRCxvQkFBd0IsQUFBQyxFQUFDLENBQUM7UUFDN0I7QUFBQSxNQUNGLENBQUUsT0FBUTtBQUNSLGdCQUF3QjtBQUN0QixvQkFBd0I7UUFDMUI7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBeUJKO0FBQUEsQUFDSixDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksWUFBVSxDQUFDO0FBQzVCIiwiZmlsZSI6Imhvc3RpbmcvaW5zdElkUGF0aHMuanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgc3BlY1N0cmluZ3MgPSByZXF1aXJlKFwiLi4vY29tbW9uL3NwZWNTdHJpbmdzXCIpO1xubGV0IGlzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pc1wiKTtcblxuZnVuY3Rpb24gSW5zdElkUGF0aHMoKSB7XG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xufVxuXG5JbnN0SWRQYXRocy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHdvcmtmbG93TmFtZSwgbWV0aG9kTmFtZSwgaW5zdGFuY2VJZFBhdGgpIHtcbiAgICBsZXQga2V5ID0gc3BlY1N0cmluZ3MuaG9zdGluZy5kb3VibGVLZXlzKHdvcmtmbG93TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgbGV0IGlubmVyID0gdGhpcy5fbWFwLmdldChrZXkpO1xuICAgIGlmICghaW5uZXIpIHtcbiAgICAgICAgaW5uZXIgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX21hcC5zZXQoa2V5LCBpbm5lcik7XG4gICAgfVxuICAgIGxldCBjb3VudCA9IGlubmVyLmdldChpbnN0YW5jZUlkUGF0aCkgfHwgMDtcbiAgICBpbm5lci5zZXQoaW5zdGFuY2VJZFBhdGgsIGNvdW50ICsgMSk7XG59O1xuXG5JbnN0SWRQYXRocy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHdvcmtmbG93TmFtZSwgbWV0aG9kTmFtZSwgaW5zdGFuY2VJZFBhdGgpIHtcbiAgICBsZXQga2V5ID0gc3BlY1N0cmluZ3MuaG9zdGluZy5kb3VibGVLZXlzKHdvcmtmbG93TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgbGV0IGlubmVyID0gdGhpcy5fbWFwLmdldChrZXkpO1xuICAgIGlmIChpbm5lcikge1xuICAgICAgICBsZXQgY291bnQgPSBpbm5lci5nZXQoaW5zdGFuY2VJZFBhdGgpO1xuICAgICAgICBpZiAoaXMuZGVmaW5lZChjb3VudCkpIHtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hcC5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlubmVyLnNldChpbnN0YW5jZUlkUGF0aCwgY291bnQgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5JbnN0SWRQYXRocy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uICh3b3JrZmxvd05hbWUsIG1ldGhvZE5hbWUsIGYpIHtcbiAgICBsZXQga2V5ID0gc3BlY1N0cmluZ3MuaG9zdGluZy5kb3VibGVLZXlzKHdvcmtmbG93TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgbGV0IGlubmVyID0gdGhpcy5fbWFwLmdldChrZXkpO1xuICAgIGlmIChpbm5lcikge1xuICAgICAgICBmb3IgKGxldCBpayBvZiBpbm5lci5rZXlzKCkpIHtcbiAgICAgICAgICAgIGYoaWspO1xuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnN0SWRQYXRocztcbiJdfQ==
