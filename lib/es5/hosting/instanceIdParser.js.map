{"version":3,"sources":["hosting/instanceIdParser.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;AAEb,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;AAEjC,SAAS,gBAAgB,GAAG;AACxB,QAAI,CAAC,MAAM,GAAG,EAAE,CAAC;CACpB;;AAED,gBAAgB,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,IAAI,EAAE,GAAG,EAAE;AACpD,QAAI,CAAC,GAAG,EAAE;AACN,cAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;KAC/C;AACD,QAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AACnB,cAAM,IAAI,SAAS,CAAC,kCAAkC,CAAC,CAAC;KAC3D;;AAED,QAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B,QAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;AACvB,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;KACzD;;AAED,WAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;CAC3B,CAAC;;AAEF,gBAAgB,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,IAAI,EAAE;AACvD,QAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AAC5B,YAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AACjB,gBAAI,GAAG,MAAM,GAAG,IAAI,CAAC;SACxB,MACI;AACD,gBAAI,GAAG,OAAO,GAAG,IAAI,CAAC;SACzB;KACJ;;AAED,WAAO,IAAI,QAAQ,CAAC,UAAU,GAAG,IAAI,GAAG,eAAe,CAAC,CAAC;CAC5D,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,gBAAgB,CAAC","file":"hosting/instanceIdParser.js","sourcesContent":["/* jshint -W054*/\n\"use strict\";\n\nlet _ = require(\"lodash\");\nlet is = require(\"../common/is\");\n\nfunction InstanceIdParser() {\n    this._cache = {};\n}\n\nInstanceIdParser.prototype.parse = function (path, obj) {\n    if (!obj) {\n        throw new Error(\"Argument 'obj' expected.\");\n    }\n    if (!_.isString(path)) {\n        throw new TypeError(\"Argument 'path' is not a string.\");\n    }\n\n    let parser = this._cache[path];\n    if (_.isUndefined(parser)) {\n        this._cache[path] = parser = this._createParser(path);\n    }\n\n    return parser.call(obj);\n};\n\nInstanceIdParser.prototype._createParser = function (path) {\n    if (path.indexOf(\"this\") !== 0) {\n        if (path[0] === \"[\") {\n            path = \"this\" + path;\n        }\n        else {\n            path = \"this.\" + path;\n        }\n    }\n\n    return new Function(\"return (\" + path + \").toString();\");\n};\n\nmodule.exports = InstanceIdParser;\n"],"sourceRoot":"/source/"}