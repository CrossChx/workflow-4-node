{"version":3,"names":[],"mappings":"","sources":["activities/scopeSerializer.js"],"sourcesContent":["\"use strict\";\r\nlet constants = require(\"../common/constants\");\r\nlet specStrings = require(\"../common/specStrings\");\r\nlet _ = require(\"lodash\");\r\nlet is = require(\"../common/is\");\r\nlet ScopeNode = require(\"./scopeNode\");\r\nlet errors = require(\"../common/errors\");\r\nlet converters = require(\"../common/converters\");\r\nlet Serializer = require(\"backpack-node\").system.Serializer;\r\n\r\nlet arrayHandler = {\r\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\r\n        let ser = null;\r\n        if (!serializer) {\r\n            ser = new Serializer(); // It should get serialized internally.\r\n        }\r\n        if (_.isArray(propValue)) {\r\n            let stuff = [];\r\n            for (let pv of propValue) {\r\n                if (is.activity(pv)) {\r\n                    stuff.push(specStrings.hosting.createActivityInstancePart(pv.instanceId));\r\n                }\r\n                else {\r\n                    if (!serializer) {\r\n                        stuff.push(ser.toJSON(pv));\r\n                    }\r\n                    else {\r\n                        stuff.push(pv);\r\n                    }\r\n                }\r\n            }\r\n            result.name = propName;\r\n            result.value = stuff;\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    deserialize: function (serializer, activity, getActivityById, part, result) {\r\n        let ser = null;\r\n        if (!serializer) {\r\n            ser = new Serializer(); // It should get serialized internally.\r\n        }\r\n        if (_.isArray(part.value)) {\r\n            let scopePartValue = [];\r\n            for (let pv of part.value) {\r\n                let activityId = specStrings.hosting.getInstanceId(pv);\r\n                if (activityId) {\r\n                    scopePartValue.push(getActivityById(activityId));\r\n                }\r\n                else {\r\n                    if (!serializer) {\r\n                        scopePartValue.push(ser.fromJSON(pv));\r\n                    }\r\n                    else {\r\n                        scopePartValue.push(pv);\r\n                    }\r\n                }\r\n            }\r\n            result.value = scopePartValue;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\nlet activityHandler = {\r\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\r\n        if (is.activity(propValue)) {\r\n            result.name = propName;\r\n            result.value = specStrings.hosting.createActivityInstancePart(propValue.instanceId);\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    deserialize: function (serializer, activity, getActivityById, part, result) {\r\n        let activityId = specStrings.hosting.getInstanceId(part.value);\r\n        if (activityId) {\r\n            result.value = getActivityById(activityId);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\nlet parentHandler = {\r\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\r\n        if (propValue && propValue.__marker === constants.markers.$parent) {\r\n            result.name = propName;\r\n            result.value = {\r\n                $type: constants.markers.$parent,\r\n                id: propValue.$activity.instanceId\r\n            };\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    deserialize: function (serializer, activity, getActivityById, part, result) {\r\n        return false;\r\n    }\r\n};\r\n\r\nlet activityPropHandler = {\r\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\r\n        if (_.isFunction(propValue) && !activity.hasOwnProperty(propName) &&\r\n            _.isFunction(activity[propName])) {\r\n            result.value = specStrings.hosting.createActivityPropertyPart(propName);\r\n            return true;\r\n        }\r\n        else if (_.isObject(propValue) && propValue === activity[propName]) {\r\n            result.value = specStrings.hosting.createActivityPropertyPart(propName);\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    deserialize: function (serializer, activity, getActivityById, part, result) {\r\n        let activityProperty = specStrings.hosting.getActivityPropertyName(part);\r\n        if (activityProperty) {\r\n            if (_.isUndefined(activity[activityProperty])) {\r\n                throw new errors.ActivityRuntimeError(\"Activity has no property '\" + part + \"'.\");\r\n            }\r\n            result.name = activityProperty;\r\n            result.value = activity[activityProperty];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\nlet errorInstanceHandler = {\r\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\r\n        if (propValue instanceof Error) {\r\n            result.name = propName;\r\n            result.value = {\r\n                type: constants.types.error,\r\n                name: propValue.name,\r\n                stack: propValue.stack\r\n            };\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    deserialize: function (serializer, activity, getActivityById, part, result) {\r\n        if (part.value && part.value.type === constants.types.error) {\r\n            let errorName = part.value.name;\r\n            let ErrorConstructor = global[errorName];\r\n            if (_.isFunction(ErrorConstructor)) {\r\n                result.value = new ErrorConstructor(part.value.stack);\r\n            }\r\n            else {\r\n                result.value = new Error(`Error: ${errorName} Stack: ${part.value.stack}`);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\nlet objectHandler = {\r\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\r\n        if (serializer) {\r\n            return false; // it's handled externally.\r\n        }\r\n        if (propName === \"__schedulingState\") {\r\n            result.name = propName;\r\n            result.value = _.clone(propValue);\r\n            result.value.indices = converters.mapToArray(propValue.indices);\r\n            result.value.$type = constants.types.schedulingState;\r\n            return true;\r\n        }\r\n        if (_.isDate(propValue)) {\r\n            result.name = propName;\r\n            result.value = {\r\n                time: propValue.getTime(),\r\n                $type: constants.types.date\r\n            };\r\n            return true;\r\n        }\r\n        if (propValue instanceof Map) {\r\n            result.name = propName;\r\n            result.value = {\r\n                data: converters.mapToArray(propValue),\r\n                $type: constants.types.map\r\n            };\r\n            return true;\r\n        }\r\n        if (propValue instanceof Set) {\r\n            result.name = propName;\r\n            result.value = {\r\n                data: converters.setToArray(propValue),\r\n                $type: constants.types.set\r\n            };\r\n            return true;\r\n        }\r\n        if (propValue instanceof RegExp) {\r\n            result.name = propName;\r\n            result.value = {\r\n                pattern: propValue.pattern,\r\n                flags: propValue.flags,\r\n                $type: constants.types.rex\r\n            };\r\n            return true;\r\n        }\r\n        if (_.isPlainObject(propValue)) {\r\n            result.name = propName;\r\n            result.value = {\r\n                data: new Serializer().toJSON(propValue),\r\n                $type: constants.types.object\r\n            };\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    deserialize: function (serializer, activity, getActivityById, part, result) {\r\n        if (part.value) {\r\n            if (part.value.$type === constants.types.schedulingState) {\r\n                result.value = _.clone(part.value);\r\n                result.value.indices = converters.arrayToMap(part.value.indices);\r\n                delete result.value.$type;\r\n                return true;\r\n            }\r\n            if (part.value.$type === constants.types.date) {\r\n                result.value = new Date(part.value.time);\r\n                return true;\r\n            }\r\n            if (part.value.$type === constants.types.map) {\r\n                result.value = converters.arrayToMap(part.value.data);\r\n                return true;\r\n            }\r\n            if (part.value.$type === constants.types.set) {\r\n                result.value = converters.arrayToSet(part.value.data);\r\n                return true;\r\n            }\r\n            if (part.value.$type === constants.types.rex) {\r\n                result.value = new RegExp(part.value.pattern, part.value.flags);\r\n                return true;\r\n            }\r\n            if (part.value.$type === constants.types.object) {\r\n                result.value = new Serializer().fromJSON(part.value.data);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\nlet scopeSerializer = {\r\n    handlers: [],\r\n    installHandler: function (handler) {\r\n        this.handlers.push(handler);\r\n    },\r\n    serialize: function (execContext, getActivityById, enablePromotions, nodes, serializer) {\r\n        let state = [];\r\n        let promotedProperties = enablePromotions ? new Map() : null;\r\n\r\n        for (let node of nodes) {\r\n            if (node.instanceId === constants.ids.initialScope) {\r\n                continue;\r\n            }\r\n\r\n            let item = {\r\n                instanceId: node.instanceId,\r\n                userId: node.userId,\r\n                parentId: node.parent ? node.parent.instanceId : null,\r\n                parts: []\r\n            };\r\n\r\n            let activity = getActivityById(node.instanceId);\r\n\r\n            for (let prop of node.properties()) {\r\n                if (!activity.nonSerializedProperties.has(prop.name)) {\r\n                    let done = false;\r\n                    for (let handler of this.handlers) {\r\n                        let result = { name: null, value: null };\r\n                        if (handler.serialize(serializer, activity, execContext, getActivityById, prop.name, prop.value, result)) {\r\n                            if (result.name) {\r\n                                item.parts.push({\r\n                                    name: prop.name,\r\n                                    value: result.value\r\n                                });\r\n                            }\r\n                            else {\r\n                                item.parts.push(result.value);\r\n                            }\r\n                            done = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!done) {\r\n                        item.parts.push({\r\n                            name: prop.name,\r\n                            value: prop.value\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            state.push(item);\r\n\r\n            // Promotions:\r\n            if (promotedProperties && activity.promotedProperties) {\r\n                for (let promotedPropName of activity.promotedProperties) {\r\n                    let pv = node.getPropertyValue(promotedPropName, true);\r\n                    if (!_.isUndefined(pv) && !(is.activity(pv))) {\r\n                        let promotedEntry = promotedProperties.get(promotedPropName);\r\n                        // If an Activity Id greater than other, then we can sure that other below or after in the tree.\r\n                        if (_.isUndefined(promotedEntry) || node.instanceId > promotedEntry.level) {\r\n                            promotedProperties.set(promotedPropName, { level: node.instanceId, value: pv });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let actualPromotions = null;\r\n        if (promotedProperties) {\r\n            actualPromotions = {};\r\n            for (let kvp of promotedProperties.entries()) {\r\n                actualPromotions[kvp[0]] = kvp[1].value;\r\n            }\r\n        }\r\n\r\n        return {\r\n            state: state,\r\n            promotedProperties: actualPromotions\r\n        };\r\n    },\r\n    deserializeNodes: function* (getActivityById, json, serializer) {\r\n        for (let item of json) {\r\n            let scopePart = {};\r\n            let activity = getActivityById(item.instanceId);\r\n            for (let part of item.parts) {\r\n                let done = false;\r\n                for (let handler of this.handlers) {\r\n                    let result = { name: null, value: null };\r\n                    if (handler.deserialize(serializer, activity, getActivityById, part, result)) {\r\n                        scopePart[result.name || part.name] = result.value;\r\n                        done = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!done) {\r\n                    scopePart[part.name] = part.value;\r\n                }\r\n            }\r\n            yield new ScopeNode(item.instanceId, scopePart, item.userId, activity);\r\n        }\r\n    }\r\n};\r\n\r\nscopeSerializer.installHandler(arrayHandler);\r\nscopeSerializer.installHandler(activityHandler);\r\nscopeSerializer.installHandler(parentHandler);\r\nscopeSerializer.installHandler(objectHandler);\r\nscopeSerializer.installHandler(activityPropHandler);\r\nscopeSerializer.installHandler(errorInstanceHandler);\r\n\r\nmodule.exports = scopeSerializer;"],"file":"activities/scopeSerializer.js","sourceRoot":"/source/"}