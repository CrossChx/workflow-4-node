{"version":3,"sources":["activities/scopeSerializer.js"],"names":[],"mappings":"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","file":"activities/scopeSerializer.js","sourcesContent":["\"use strict\";\nlet constants = require(\"../common/constants\");\nlet specStrings = require(\"../common/specStrings\");\nlet _ = require(\"lodash\");\nlet is = require(\"../common/is\");\nlet ScopeNode = require(\"./scopeNode\");\nlet errors = require(\"../common/errors\");\nlet converters = require(\"../common/converters\");\nlet Serializer = require(\"backpack-node\").system.Serializer;\n\nlet arrayHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        let ser = null;\n        if (!serializer) {\n            ser = new Serializer(); // It should get serialized internally.\n        }\n        if (_.isArray(propValue)) {\n            let stuff = [];\n            for (let pv of propValue) {\n                if (is.activity(pv)) {\n                    stuff.push(specStrings.hosting.createActivityInstancePart(pv.instanceId));\n                }\n                else {\n                    if (!serializer) {\n                        stuff.push(ser.toJSON(pv));\n                    }\n                    else {\n                        stuff.push(pv);\n                    }\n                }\n            }\n            result.name = propName;\n            result.value = stuff;\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        let ser = null;\n        if (!serializer) {\n            ser = new Serializer(); // It should get serialized internally.\n        }\n        if (_.isArray(part.value)) {\n            let scopePartValue = [];\n            for (let pv of part.value) {\n                let activityId = specStrings.hosting.getInstanceId(pv);\n                if (activityId) {\n                    scopePartValue.push(getActivityById(activityId));\n                }\n                else {\n                    if (!serializer) {\n                        scopePartValue.push(ser.fromJSON(pv));\n                    }\n                    else {\n                        scopePartValue.push(pv);\n                    }\n                }\n            }\n            result.value = scopePartValue;\n            return true;\n        }\n        return false;\n    }\n};\n\nlet activityHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (is.activity(propValue)) {\n            result.name = propName;\n            result.value = specStrings.hosting.createActivityInstancePart(propValue.instanceId);\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        let activityId = specStrings.hosting.getInstanceId(part.value);\n        if (activityId) {\n            result.value = getActivityById(activityId);\n            return true;\n        }\n        return false;\n    }\n};\n\nlet parentHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (propValue && propValue.__marker === constants.markers.$parent) {\n            result.name = propName;\n            result.value = {\n                $type: constants.markers.$parent,\n                id: propValue.$activity.instanceId\n            };\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        return false;\n    }\n};\n\nlet activityPropHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (_.isFunction(propValue) && !activity.hasOwnProperty(propName) &&\n            _.isFunction(activity[propName])) {\n            result.value = specStrings.hosting.createActivityPropertyPart(propName);\n            return true;\n        }\n        else if (_.isObject(propValue) && propValue === activity[propName]) {\n            result.value = specStrings.hosting.createActivityPropertyPart(propName);\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        let activityProperty = specStrings.hosting.getActivityPropertyName(part);\n        if (activityProperty) {\n            if (_.isUndefined(activity[activityProperty])) {\n                throw new errors.ActivityRuntimeError(\"Activity has no property '\" + part + \"'.\");\n            }\n            result.name = activityProperty;\n            result.value = activity[activityProperty];\n            return true;\n        }\n        return false;\n    }\n};\n\nlet errorInstanceHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (propValue instanceof Error) {\n            result.name = propName;\n            result.value = {\n                type: constants.types.error,\n                name: propValue.name,\n                stack: propValue.stack\n            };\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        if (part.value && part.value.type === constants.types.error) {\n            let errorName = part.value.name;\n            let ErrorConstructor = global[errorName];\n            if (_.isFunction(ErrorConstructor)) {\n                result.value = new ErrorConstructor(part.value.stack);\n            }\n            else {\n                result.value = new Error(`Error: ${errorName} Stack: ${part.value.stack}`);\n            }\n            return true;\n        }\n        return false;\n    }\n};\n\nlet objectHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (serializer) {\n            return false; // it's handled externally.\n        }\n        if (propName === \"__schedulingState\") {\n            result.name = propName;\n            result.value = _.clone(propValue);\n            result.value.indices = converters.mapToArray(propValue.indices);\n            result.value.$type = constants.types.schedulingState;\n            return true;\n        }\n        if (_.isDate(propValue)) {\n            result.name = propName;\n            result.value = {\n                time: propValue.getTime(),\n                $type: constants.types.date\n            };\n            return true;\n        }\n        if (propValue instanceof Map) {\n            result.name = propName;\n            result.value = {\n                data: converters.mapToArray(propValue),\n                $type: constants.types.map\n            };\n            return true;\n        }\n        if (propValue instanceof Set) {\n            result.name = propName;\n            result.value = {\n                data: converters.setToArray(propValue),\n                $type: constants.types.set\n            };\n            return true;\n        }\n        if (propValue instanceof RegExp) {\n            result.name = propName;\n            result.value = {\n                pattern: propValue.pattern,\n                flags: propValue.flags,\n                $type: constants.types.rex\n            };\n            return true;\n        }\n        if (_.isPlainObject(propValue)) {\n            result.name = propName;\n            result.value = {\n                data: new Serializer().toJSON(propValue),\n                $type: constants.types.object\n            };\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        if (part.value) {\n            if (part.value.$type === constants.types.schedulingState) {\n                result.value = _.clone(part.value);\n                result.value.indices = converters.arrayToMap(part.value.indices);\n                delete result.value.$type;\n                return true;\n            }\n            if (part.value.$type === constants.types.date) {\n                result.value = new Date(part.value.time);\n                return true;\n            }\n            if (part.value.$type === constants.types.map) {\n                result.value = converters.arrayToMap(part.value.data);\n                return true;\n            }\n            if (part.value.$type === constants.types.set) {\n                result.value = converters.arrayToSet(part.value.data);\n                return true;\n            }\n            if (part.value.$type === constants.types.rex) {\n                result.value = new RegExp(part.value.pattern, part.value.flags);\n                return true;\n            }\n            if (part.value.$type === constants.types.object) {\n                result.value = new Serializer().fromJSON(part.value.data);\n                return true;\n            }\n        }\n        return false;\n    }\n};\n\nlet scopeSerializer = {\n    handlers: [],\n    installHandler: function (handler) {\n        this.handlers.push(handler);\n    },\n    serialize: function (execContext, getActivityById, enablePromotions, nodes, serializer) {\n        let state = [];\n        let promotedProperties = enablePromotions ? new Map() : null;\n\n        for (let node of nodes) {\n            if (node.instanceId === constants.ids.initialScope) {\n                continue;\n            }\n\n            let item = {\n                instanceId: node.instanceId,\n                userId: node.userId,\n                parentId: node.parent ? node.parent.instanceId : null,\n                parts: []\n            };\n\n            let activity = getActivityById(node.instanceId);\n\n            for (let prop of node.properties()) {\n                if (!activity.nonSerializedProperties.has(prop.name)) {\n                    let done = false;\n                    for (let handler of this.handlers) {\n                        let result = { name: null, value: null };\n                        if (handler.serialize(serializer, activity, execContext, getActivityById, prop.name, prop.value, result)) {\n                            if (result.name) {\n                                item.parts.push({\n                                    name: prop.name,\n                                    value: result.value\n                                });\n                            }\n                            else {\n                                item.parts.push(result.value);\n                            }\n                            done = true;\n                            break;\n                        }\n                    }\n                    if (!done) {\n                        item.parts.push({\n                            name: prop.name,\n                            value: prop.value\n                        });\n                    }\n                }\n            }\n\n            state.push(item);\n\n            // Promotions:\n            if (promotedProperties && activity.promotedProperties) {\n                for (let promotedPropName of activity.promotedProperties) {\n                    let pv = node.getPropertyValue(promotedPropName, true);\n                    if (!_.isUndefined(pv) && !(is.activity(pv))) {\n                        let promotedEntry = promotedProperties.get(promotedPropName);\n                        // If an Activity Id greater than other, then we can sure that other below or after in the tree.\n                        if (_.isUndefined(promotedEntry) || node.instanceId > promotedEntry.level) {\n                            promotedProperties.set(promotedPropName, { level: node.instanceId, value: pv });\n                        }\n                    }\n                }\n            }\n        }\n\n        let actualPromotions = null;\n        if (promotedProperties) {\n            actualPromotions = {};\n            for (let kvp of promotedProperties.entries()) {\n                actualPromotions[kvp[0]] = kvp[1].value;\n            }\n        }\n\n        return {\n            state: state,\n            promotedProperties: actualPromotions\n        };\n    },\n    deserializeNodes: function* (getActivityById, json, serializer) {\n        for (let item of json) {\n            let scopePart = {};\n            let activity = getActivityById(item.instanceId);\n            for (let part of item.parts) {\n                let done = false;\n                for (let handler of this.handlers) {\n                    let result = { name: null, value: null };\n                    if (handler.deserialize(serializer, activity, getActivityById, part, result)) {\n                        scopePart[result.name || part.name] = result.value;\n                        done = true;\n                        break;\n                    }\n                }\n                if (!done) {\n                    scopePart[part.name] = part.value;\n                }\n            }\n            yield new ScopeNode(item.instanceId, scopePart, item.userId, activity);\n        }\n    }\n};\n\nscopeSerializer.installHandler(arrayHandler);\nscopeSerializer.installHandler(activityHandler);\nscopeSerializer.installHandler(parentHandler);\nscopeSerializer.installHandler(objectHandler);\nscopeSerializer.installHandler(activityPropHandler);\nscopeSerializer.installHandler(errorInstanceHandler);\n\nmodule.exports = scopeSerializer;"],"sourceRoot":"/source/"}