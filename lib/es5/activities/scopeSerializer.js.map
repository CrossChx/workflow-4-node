{"version":3,"names":[],"mappings":"","sources":["activities/scopeSerializer.js"],"sourcesContent":["\"use strict\";\nlet constants = require(\"../common/constants\");\nlet specStrings = require(\"../common/specStrings\");\nlet _ = require(\"lodash\");\nlet is = require(\"../common/is\");\nlet ScopeNode = require(\"./scopeNode\");\nlet errors = require(\"../common/errors\");\nlet converters = require(\"../common/converters\");\nlet Serializer = require(\"backpack-node\").system.Serializer;\n\nlet arrayHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        let ser = null;\n        if (!serializer) {\n            ser = new Serializer(); // It should get serialized internally.\n        }\n        if (_.isArray(propValue)) {\n            let stuff = [];\n            for (let pv of propValue) {\n                if (is.activity(pv)) {\n                    stuff.push(specStrings.hosting.createActivityInstancePart(pv.instanceId));\n                }\n                else {\n                    if (!serializer) {\n                        stuff.push(ser.toJSON(pv));\n                    }\n                    else {\n                        stuff.push(pv);\n                    }\n                }\n            }\n            result.name = propName;\n            result.value = stuff;\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        let ser = null;\n        if (!serializer) {\n            ser = new Serializer(); // It should get serialized internally.\n        }\n        if (_.isArray(part.value)) {\n            let scopePartValue = [];\n            for (let pv of part.value) {\n                let activityId = specStrings.hosting.getInstanceId(pv);\n                if (activityId) {\n                    scopePartValue.push(getActivityById(activityId));\n                }\n                else {\n                    if (!serializer) {\n                        scopePartValue.push(ser.fromJSON(pv));\n                    }\n                    else {\n                        scopePartValue.push(pv);\n                    }\n                }\n            }\n            result.value = scopePartValue;\n            return true;\n        }\n        return false;\n    }\n};\n\nlet activityHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (is.activity(propValue)) {\n            result.name = propName;\n            result.value = specStrings.hosting.createActivityInstancePart(propValue.instanceId);\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        let activityId = specStrings.hosting.getInstanceId(part.value);\n        if (activityId) {\n            result.value = getActivityById(activityId);\n            return true;\n        }\n        return false;\n    }\n};\n\nlet parentHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (propValue && propValue.__marker === constants.markers.$parent) {\n            result.name = propName;\n            result.value = {\n                $type: constants.markers.$parent,\n                id: propValue.$activity.instanceId\n            };\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        return false;\n    }\n};\n\nlet activityPropHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (_.isFunction(propValue) && !activity.hasOwnProperty(propName) &&\n            _.isFunction(activity[propName])) {\n            result.value = specStrings.hosting.createActivityPropertyPart(propName);\n            return true;\n        }\n        else if (_.isObject(propValue) && propValue === activity[propName]) {\n            result.value = specStrings.hosting.createActivityPropertyPart(propName);\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        let activityProperty = specStrings.hosting.getActivityPropertyName(part);\n        if (activityProperty) {\n            if (_.isUndefined(activity[activityProperty])) {\n                throw new errors.ActivityRuntimeError(\"Activity has no property '\" + part + \"'.\");\n            }\n            result.name = activityProperty;\n            result.value = activity[activityProperty];\n            return true;\n        }\n        return false;\n    }\n};\n\nlet errorInstanceHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (propValue instanceof Error) {\n            result.name = propName;\n            result.value = {\n                type: constants.types.error,\n                name: propValue.name,\n                stack: propValue.stack\n            };\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        if (part.value && part.value.type === constants.types.error) {\n            let errorName = part.value.name;\n            let ErrorConstructor = global[errorName];\n            if (_.isFunction(ErrorConstructor)) {\n                result.value = new ErrorConstructor(part.value.stack);\n            }\n            else {\n                result.value = new Error(`Error: ${errorName} Stack: ${part.value.stack}`);\n            }\n            return true;\n        }\n        return false;\n    }\n};\n\nlet objectHandler = {\n    serialize: function (serializer, activity, execContext, getActivityById, propName, propValue, result) {\n        if (serializer) {\n            return false; // it's handled externally.\n        }\n        if (propName === \"__schedulingState\") {\n            result.name = propName;\n            result.value = _.clone(propValue);\n            result.value.indices = converters.mapToArray(propValue.indices);\n            result.value.$type = constants.types.schedulingState;\n            return true;\n        }\n        if (_.isDate(propValue)) {\n            result.name = propName;\n            result.value = {\n                time: propValue.getTime(),\n                $type: constants.types.date\n            };\n            return true;\n        }\n        if (propValue instanceof Map) {\n            result.name = propName;\n            result.value = {\n                data: converters.mapToArray(propValue),\n                $type: constants.types.map\n            };\n            return true;\n        }\n        if (propValue instanceof Set) {\n            result.name = propName;\n            result.value = {\n                data: converters.setToArray(propValue),\n                $type: constants.types.set\n            };\n            return true;\n        }\n        if (propValue instanceof RegExp) {\n            result.name = propName;\n            result.value = {\n                pattern: propValue.pattern,\n                flags: propValue.flags,\n                $type: constants.types.rex\n            };\n            return true;\n        }\n        if (_.isPlainObject(propValue)) {\n            result.name = propName;\n            result.value = {\n                data: new Serializer().toJSON(propValue),\n                $type: constants.types.object\n            };\n            return true;\n        }\n        return false;\n    },\n    deserialize: function (serializer, activity, getActivityById, part, result) {\n        if (part.value) {\n            if (part.value.$type === constants.types.schedulingState) {\n                result.value = _.clone(part.value);\n                result.value.indices = converters.arrayToMap(part.value.indices);\n                delete result.value.$type;\n                return true;\n            }\n            if (part.value.$type === constants.types.date) {\n                result.value = new Date(part.value.time);\n                return true;\n            }\n            if (part.value.$type === constants.types.map) {\n                result.value = converters.arrayToMap(part.value.data);\n                return true;\n            }\n            if (part.value.$type === constants.types.set) {\n                result.value = converters.arrayToSet(part.value.data);\n                return true;\n            }\n            if (part.value.$type === constants.types.rex) {\n                result.value = new RegExp(part.value.pattern, part.value.flags);\n                return true;\n            }\n            if (part.value.$type === constants.types.object) {\n                result.value = new Serializer().fromJSON(part.value.data);\n                return true;\n            }\n        }\n        return false;\n    }\n};\n\nlet scopeSerializer = {\n    handlers: [],\n    installHandler: function (handler) {\n        this.handlers.push(handler);\n    },\n    serialize: function (execContext, getActivityById, enablePromotions, nodes, serializer) {\n        let state = [];\n        let promotedProperties = enablePromotions ? new Map() : null;\n\n        for (let node of nodes) {\n            if (node.instanceId === constants.ids.initialScope) {\n                continue;\n            }\n\n            let item = {\n                instanceId: node.instanceId,\n                userId: node.userId,\n                parentId: node.parent ? node.parent.instanceId : null,\n                parts: []\n            };\n\n            let activity = getActivityById(node.instanceId);\n\n            for (let prop of node.properties()) {\n                if (!activity.nonSerializedProperties.has(prop.name)) {\n                    let done = false;\n                    for (let handler of this.handlers) {\n                        let result = { name: null, value: null };\n                        if (handler.serialize(serializer, activity, execContext, getActivityById, prop.name, prop.value, result)) {\n                            if (result.name) {\n                                item.parts.push({\n                                    name: prop.name,\n                                    value: result.value\n                                });\n                            }\n                            else {\n                                item.parts.push(result.value);\n                            }\n                            done = true;\n                            break;\n                        }\n                    }\n                    if (!done) {\n                        item.parts.push({\n                            name: prop.name,\n                            value: prop.value\n                        });\n                    }\n                }\n            }\n\n            state.push(item);\n\n            // Promotions:\n            if (promotedProperties && activity.promotedProperties) {\n                for (let promotedPropName of activity.promotedProperties) {\n                    let pv = node.getPropertyValue(promotedPropName, true);\n                    if (!_.isUndefined(pv) && !(is.activity(pv))) {\n                        let promotedEntry = promotedProperties.get(promotedPropName);\n                        // If an Activity Id greater than other, then we can sure that other below or after in the tree.\n                        if (_.isUndefined(promotedEntry) || node.instanceId > promotedEntry.level) {\n                            promotedProperties.set(promotedPropName, { level: node.instanceId, value: pv });\n                        }\n                    }\n                }\n            }\n        }\n\n        let actualPromotions = null;\n        if (promotedProperties) {\n            actualPromotions = {};\n            for (let kvp of promotedProperties.entries()) {\n                actualPromotions[kvp[0]] = kvp[1].value;\n            }\n        }\n\n        return {\n            state: state,\n            promotedProperties: actualPromotions\n        };\n    },\n    deserializeNodes: function* (getActivityById, json, serializer) {\n        for (let item of json) {\n            let scopePart = {};\n            let activity = getActivityById(item.instanceId);\n            for (let part of item.parts) {\n                let done = false;\n                for (let handler of this.handlers) {\n                    let result = { name: null, value: null };\n                    if (handler.deserialize(serializer, activity, getActivityById, part, result)) {\n                        scopePart[result.name || part.name] = result.value;\n                        done = true;\n                        break;\n                    }\n                }\n                if (!done) {\n                    scopePart[part.name] = part.value;\n                }\n            }\n            yield new ScopeNode(item.instanceId, scopePart, item.userId);\n        }\n    }\n};\n\nscopeSerializer.installHandler(arrayHandler);\nscopeSerializer.installHandler(activityHandler);\nscopeSerializer.installHandler(parentHandler);\nscopeSerializer.installHandler(objectHandler);\nscopeSerializer.installHandler(activityPropHandler);\nscopeSerializer.installHandler(errorInstanceHandler);\n\nmodule.exports = scopeSerializer;"],"file":"activities/scopeSerializer.js","sourceRoot":"/source/"}