"use strict";
var EventEmitter = require('events').EventEmitter;
var util = require("util");
var enums = require("../common/enums");
var is = require("../common/is");
var _ = require("lodash");
function ActivityExecutionState(activityInstanceId) {
  this.instanceId = activityInstanceId;
  this.execState = null;
  this.parentInstanceId = null;
  this.childInstanceIds = new Set();
}
util.inherits(ActivityExecutionState, EventEmitter);
Object.defineProperties(ActivityExecutionState.prototype, {isRunning: {get: function() {
      return this.execState === enums.activityStates.run;
    }}});
ActivityExecutionState.prototype.reportState = function(reason, result, scope) {
  if (this.execState !== reason) {
    this.execState = reason;
    this._emitState({
      reason: reason,
      result: result,
      scope: scope
    });
  }
};
ActivityExecutionState.prototype.emitState = function(result, scope) {
  this._emitState({
    reason: this.execState,
    result: result,
    scope: scope
  });
};
ActivityExecutionState.prototype._emitState = function(args) {
  this.emit(args.reason, args);
  if (args.reason !== enums.activityStates.run) {
    this.emit(enums.activityStates.end, args);
  }
};
ActivityExecutionState.prototype.asJSON = function() {
  return {execState: this.execState};
};
ActivityExecutionState.prototype.fromJSON = function(json) {
  if (!_.isObject(json)) {
    throw new TypeError("Object argument expected.");
  }
  if (json.execState !== null) {
    if (!_.isString(json.execState)) {
      throw new TypeError("Argument object's execState property value is not a string.");
    }
    if (_.isUndefined(enums.activityStates[json.execState])) {
      throw new TypeError("Argument object's execState property value is not a valid Activity state value.");
    }
  }
  this.execState = json.execState;
};
module.exports = ActivityExecutionState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXR5RXhlY3V0aW9uU3RhdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxBQUFJLEVBQUEsQ0FBQSxZQUFXLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsYUFBYSxDQUFDO0FBQ2pELEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDdEMsQUFBSSxFQUFBLENBQUEsRUFBQyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUM7QUFDaEMsQUFBSSxFQUFBLENBQUEsQ0FBQSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFFekIsT0FBUyx1QkFBcUIsQ0FBRSxrQkFBaUIsQ0FBRztBQUNoRCxLQUFHLFdBQVcsRUFBSSxtQkFBaUIsQ0FBQztBQUNwQyxLQUFHLFVBQVUsRUFBSSxLQUFHLENBQUM7QUFDckIsS0FBRyxpQkFBaUIsRUFBSSxLQUFHLENBQUM7QUFDNUIsS0FBRyxpQkFBaUIsRUFBSSxJQUFJLElBQUUsQUFBQyxFQUFDLENBQUM7QUFDckM7QUFBQSxBQUVBLEdBQUcsU0FBUyxBQUFDLENBQUMsc0JBQXFCLENBQUcsYUFBVyxDQUFDLENBQUM7QUFFbkQsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLHNCQUFxQixVQUFVLENBQUcsRUFDdEQsU0FBUSxDQUFHLEVBQ1AsR0FBRSxDQUFHLFVBQVUsQUFBRCxDQUFHO0FBQ2IsV0FBTyxDQUFBLElBQUcsVUFBVSxJQUFNLENBQUEsS0FBSSxlQUFlLElBQUksQ0FBQztJQUN0RCxDQUNKLENBQ0osQ0FBQyxDQUFDO0FBRUYscUJBQXFCLFVBQVUsWUFBWSxFQUFJLFVBQVUsTUFBSyxDQUFHLENBQUEsTUFBSyxDQUFHLENBQUEsS0FBSSxDQUFHO0FBQzVFLEtBQUksSUFBRyxVQUFVLElBQU0sT0FBSyxDQUFHO0FBQzNCLE9BQUcsVUFBVSxFQUFJLE9BQUssQ0FBQztBQUN2QixPQUFHLFdBQVcsQUFBQyxDQUFDO0FBQ1osV0FBSyxDQUFHLE9BQUs7QUFDYixXQUFLLENBQUcsT0FBSztBQUNiLFVBQUksQ0FBRyxNQUFJO0FBQUEsSUFDZixDQUFDLENBQUM7RUFDTjtBQUFBLEFBQ0osQ0FBQztBQUVELHFCQUFxQixVQUFVLFVBQVUsRUFBSSxVQUFVLE1BQUssQ0FBRyxDQUFBLEtBQUksQ0FBRztBQUNsRSxLQUFHLFdBQVcsQUFBQyxDQUFDO0FBQ1osU0FBSyxDQUFHLENBQUEsSUFBRyxVQUFVO0FBQ3JCLFNBQUssQ0FBRyxPQUFLO0FBQ2IsUUFBSSxDQUFHLE1BQUk7QUFBQSxFQUNmLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxxQkFBcUIsVUFBVSxXQUFXLEVBQUksVUFBVSxJQUFHLENBQUc7QUFDMUQsS0FBRyxLQUFLLEFBQUMsQ0FBQyxJQUFHLE9BQU8sQ0FBRyxLQUFHLENBQUMsQ0FBQztBQUM1QixLQUFJLElBQUcsT0FBTyxJQUFNLENBQUEsS0FBSSxlQUFlLElBQUksQ0FBRztBQUMxQyxPQUFHLEtBQUssQUFBQyxDQUFDLEtBQUksZUFBZSxJQUFJLENBQUcsS0FBRyxDQUFDLENBQUM7RUFDN0M7QUFBQSxBQUNKLENBQUM7QUFHRCxxQkFBcUIsVUFBVSxPQUFPLEVBQUksVUFBVSxBQUFELENBQUc7QUFDbEQsT0FBTyxFQUNILFNBQVEsQ0FBRyxDQUFBLElBQUcsVUFBVSxDQUM1QixDQUFDO0FBQ0wsQ0FBQztBQUVELHFCQUFxQixVQUFVLFNBQVMsRUFBSSxVQUFVLElBQUcsQ0FBRztBQUN4RCxLQUFJLENBQUMsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBRztBQUNuQixRQUFNLElBQUksVUFBUSxBQUFDLENBQUMsMkJBQTBCLENBQUMsQ0FBQztFQUNwRDtBQUFBLEFBQ0EsS0FBSSxJQUFHLFVBQVUsSUFBTSxLQUFHLENBQUc7QUFDekIsT0FBSSxDQUFDLENBQUEsU0FBUyxBQUFDLENBQUMsSUFBRyxVQUFVLENBQUMsQ0FBRztBQUM3QixVQUFNLElBQUksVUFBUSxBQUFDLENBQUMsNkRBQTRELENBQUMsQ0FBQztJQUN0RjtBQUFBLEFBQ0EsT0FBSSxDQUFBLFlBQVksQUFBQyxDQUFDLEtBQUksZUFBZSxDQUFFLElBQUcsVUFBVSxDQUFDLENBQUMsQ0FBRztBQUNyRCxVQUFNLElBQUksVUFBUSxBQUFDLENBQUMsaUZBQWdGLENBQUMsQ0FBQztJQUMxRztBQUFBLEVBQ0o7QUFBQSxBQUVBLEtBQUcsVUFBVSxFQUFJLENBQUEsSUFBRyxVQUFVLENBQUM7QUFDbkMsQ0FBQztBQUdELEtBQUssUUFBUSxFQUFJLHVCQUFxQixDQUFDO0FBQ3ZDIiwiZmlsZSI6ImFjdGl2aXRpZXMvYWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IGVudW1zID0gcmVxdWlyZShcIi4uL2NvbW1vbi9lbnVtc1wiKTtcbmxldCBpcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vaXNcIik7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cbmZ1bmN0aW9uIEFjdGl2aXR5RXhlY3V0aW9uU3RhdGUoYWN0aXZpdHlJbnN0YW5jZUlkKSB7XG4gICAgdGhpcy5pbnN0YW5jZUlkID0gYWN0aXZpdHlJbnN0YW5jZUlkO1xuICAgIHRoaXMuZXhlY1N0YXRlID0gbnVsbDtcbiAgICB0aGlzLnBhcmVudEluc3RhbmNlSWQgPSBudWxsO1xuICAgIHRoaXMuY2hpbGRJbnN0YW5jZUlkcyA9IG5ldyBTZXQoKTtcbn1cblxudXRpbC5pbmhlcml0cyhBY3Rpdml0eUV4ZWN1dGlvblN0YXRlLCBFdmVudEVtaXR0ZXIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBY3Rpdml0eUV4ZWN1dGlvblN0YXRlLnByb3RvdHlwZSwge1xuICAgIGlzUnVubmluZzoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4ZWNTdGF0ZSA9PT0gZW51bXMuYWN0aXZpdHlTdGF0ZXMucnVuO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbkFjdGl2aXR5RXhlY3V0aW9uU3RhdGUucHJvdG90eXBlLnJlcG9ydFN0YXRlID0gZnVuY3Rpb24gKHJlYXNvbiwgcmVzdWx0LCBzY29wZSkge1xuICAgIGlmICh0aGlzLmV4ZWNTdGF0ZSAhPT0gcmVhc29uKSB7XG4gICAgICAgIHRoaXMuZXhlY1N0YXRlID0gcmVhc29uO1xuICAgICAgICB0aGlzLl9lbWl0U3RhdGUoe1xuICAgICAgICAgICAgcmVhc29uOiByZWFzb24sXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgICAgIHNjb3BlOiBzY29wZVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5BY3Rpdml0eUV4ZWN1dGlvblN0YXRlLnByb3RvdHlwZS5lbWl0U3RhdGUgPSBmdW5jdGlvbiAocmVzdWx0LCBzY29wZSkge1xuICAgIHRoaXMuX2VtaXRTdGF0ZSh7XG4gICAgICAgIHJlYXNvbjogdGhpcy5leGVjU3RhdGUsXG4gICAgICAgIHJlc3VsdDogcmVzdWx0LFxuICAgICAgICBzY29wZTogc2NvcGVcbiAgICB9KTtcbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uU3RhdGUucHJvdG90eXBlLl9lbWl0U3RhdGUgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHRoaXMuZW1pdChhcmdzLnJlYXNvbiwgYXJncyk7XG4gICAgaWYgKGFyZ3MucmVhc29uICE9PSBlbnVtcy5hY3Rpdml0eVN0YXRlcy5ydW4pIHtcbiAgICAgICAgdGhpcy5lbWl0KGVudW1zLmFjdGl2aXR5U3RhdGVzLmVuZCwgYXJncyk7XG4gICAgfVxufTtcblxuLyogU0VSSUFMSVpBVElPTiAqL1xuQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUuYXNKU09OID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGV4ZWNTdGF0ZTogdGhpcy5leGVjU3RhdGVcbiAgICB9O1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGlmICghXy5pc09iamVjdChqc29uKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGFyZ3VtZW50IGV4cGVjdGVkLlwiKTtcbiAgICB9XG4gICAgaWYgKGpzb24uZXhlY1N0YXRlICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghXy5pc1N0cmluZyhqc29uLmV4ZWNTdGF0ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBvYmplY3QncyBleGVjU3RhdGUgcHJvcGVydHkgdmFsdWUgaXMgbm90IGEgc3RyaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChlbnVtcy5hY3Rpdml0eVN0YXRlc1tqc29uLmV4ZWNTdGF0ZV0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgb2JqZWN0J3MgZXhlY1N0YXRlIHByb3BlcnR5IHZhbHVlIGlzIG5vdCBhIHZhbGlkIEFjdGl2aXR5IHN0YXRlIHZhbHVlLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZXhlY1N0YXRlID0ganNvbi5leGVjU3RhdGU7XG59O1xuLyogU0VSSUFMSVpBVElPTiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFjdGl2aXR5RXhlY3V0aW9uU3RhdGU7XG4iXX0=
