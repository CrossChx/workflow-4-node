"use strict";
"use strict";
var EventEmitter = require('events').EventEmitter;
var util = require("util");
var enums = require("../common/enums");
var is = require("../common/is");
var _ = require("lodash");
function ActivityExecutionState(activityInstanceId) {
  this.activityInstanceId = activityInstanceId;
  this.execState = null;
  this.parentActivityId = null;
  this.childActivityIds = new Set();
}
util.inherits(ActivityExecutionState, EventEmitter);
Object.defineProperties(ActivityExecutionState.prototype, {isRunning: {get: function() {
      return this.execState === enums.ActivityStates.run;
    }}});
ActivityExecutionState.prototype.reportState = function(reason, result) {
  if (this.execState !== reason) {
    this.execState = reason;
    this.emitState(reason, result);
  }
};
ActivityExecutionState.prototype.emitState = function(result) {
  this.emit(this.execState, result);
  if (this.execState !== enums.ActivityStates.run) {
    this.emit(enums.ActivityStates.end, this.execState, result);
  }
};
ActivityExecutionState.prototype.asJSON = function() {
  return {execState: this.execState};
};
ActivityExecutionState.prototype.fromJSON = function(json) {
  if (!_.isObject(json)) {
    throw new TypeError("Object argument expected.");
  }
  if (json.execState !== null) {
    if (!_.isString(json.execState)) {
      throw new TypeError("Argument object's execState property value is not a string.");
    }
    if (is.undefined(enums.ActivityStates[json.execState])) {
      throw new TypeError("Argument object's execState property value is not a valid Activity state value.");
    }
  }
  this.execState = json.execState;
};
module.exports = ActivityExecutionState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXR5RXhlY3V0aW9uU3RhdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxXQUFXLENBQUM7QUFFWixBQUFJLEVBQUEsQ0FBQSxZQUFXLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsYUFBYSxDQUFDO0FBQ2pELEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDdEMsQUFBSSxFQUFBLENBQUEsRUFBQyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUM7QUFDaEMsQUFBSSxFQUFBLENBQUEsQ0FBQSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFFekIsT0FBUyx1QkFBcUIsQ0FBRSxrQkFBaUIsQ0FBRztBQUNoRCxLQUFHLG1CQUFtQixFQUFJLG1CQUFpQixDQUFDO0FBQzVDLEtBQUcsVUFBVSxFQUFJLEtBQUcsQ0FBQztBQUNyQixLQUFHLGlCQUFpQixFQUFJLEtBQUcsQ0FBQztBQUM1QixLQUFHLGlCQUFpQixFQUFJLElBQUksSUFBRSxBQUFDLEVBQUMsQ0FBQztBQUNyQztBQUFBLEFBRUEsR0FBRyxTQUFTLEFBQUMsQ0FBQyxzQkFBcUIsQ0FBRyxhQUFXLENBQUMsQ0FBQztBQUVuRCxLQUFLLGlCQUFpQixBQUFDLENBQUMsc0JBQXFCLFVBQVUsQ0FBRyxFQUN0RCxTQUFRLENBQUcsRUFDUCxHQUFFLENBQUcsVUFBVSxBQUFELENBQUc7QUFDYixXQUFPLENBQUEsSUFBRyxVQUFVLElBQU0sQ0FBQSxLQUFJLGVBQWUsSUFBSSxDQUFDO0lBQ3RELENBQ0osQ0FDSixDQUFDLENBQUM7QUFFRixxQkFBcUIsVUFBVSxZQUFZLEVBQUksVUFBVSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDckUsS0FBSSxJQUFHLFVBQVUsSUFBTSxPQUFLLENBQUc7QUFDM0IsT0FBRyxVQUFVLEVBQUksT0FBSyxDQUFDO0FBQ3ZCLE9BQUcsVUFBVSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0VBQ2xDO0FBQUEsQUFDSixDQUFDO0FBRUQscUJBQXFCLFVBQVUsVUFBVSxFQUFJLFVBQVUsTUFBSyxDQUFHO0FBQzNELEtBQUcsS0FBSyxBQUFDLENBQUMsSUFBRyxVQUFVLENBQUcsT0FBSyxDQUFDLENBQUM7QUFDakMsS0FBSSxJQUFHLFVBQVUsSUFBTSxDQUFBLEtBQUksZUFBZSxJQUFJLENBQUc7QUFDN0MsT0FBRyxLQUFLLEFBQUMsQ0FBQyxLQUFJLGVBQWUsSUFBSSxDQUFHLENBQUEsSUFBRyxVQUFVLENBQUcsT0FBSyxDQUFDLENBQUM7RUFDL0Q7QUFBQSxBQUNKLENBQUM7QUFHRCxxQkFBcUIsVUFBVSxPQUFPLEVBQUksVUFBVSxBQUFELENBQUc7QUFDbEQsT0FBTyxFQUNILFNBQVEsQ0FBRyxDQUFBLElBQUcsVUFBVSxDQUM1QixDQUFDO0FBQ0wsQ0FBQztBQUVELHFCQUFxQixVQUFVLFNBQVMsRUFBSSxVQUFVLElBQUcsQ0FBRztBQUN4RCxLQUFJLENBQUMsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBRztBQUNuQixRQUFNLElBQUksVUFBUSxBQUFDLENBQUMsMkJBQTBCLENBQUMsQ0FBQztFQUNwRDtBQUFBLEFBQ0EsS0FBSSxJQUFHLFVBQVUsSUFBTSxLQUFHLENBQUc7QUFDekIsT0FBSSxDQUFDLENBQUEsU0FBUyxBQUFDLENBQUMsSUFBRyxVQUFVLENBQUMsQ0FBRztBQUM3QixVQUFNLElBQUksVUFBUSxBQUFDLENBQUMsNkRBQTRELENBQUMsQ0FBQztJQUN0RjtBQUFBLEFBQ0EsT0FBSSxFQUFDLFVBQVUsQUFBQyxDQUFDLEtBQUksZUFBZSxDQUFFLElBQUcsVUFBVSxDQUFDLENBQUMsQ0FBRztBQUNwRCxVQUFNLElBQUksVUFBUSxBQUFDLENBQUMsaUZBQWdGLENBQUMsQ0FBQztJQUMxRztBQUFBLEVBQ0o7QUFBQSxBQUVBLEtBQUcsVUFBVSxFQUFJLENBQUEsSUFBRyxVQUFVLENBQUM7QUFDbkMsQ0FBQztBQUdELEtBQUssUUFBUSxFQUFJLHVCQUFxQixDQUFDO0FBQ3ZDIiwiZmlsZSI6ImFjdGl2aXRpZXMvYWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IGVudW1zID0gcmVxdWlyZShcIi4uL2NvbW1vbi9lbnVtc1wiKTtcbmxldCBpcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vaXNcIik7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cbmZ1bmN0aW9uIEFjdGl2aXR5RXhlY3V0aW9uU3RhdGUoYWN0aXZpdHlJbnN0YW5jZUlkKSB7XG4gICAgdGhpcy5hY3Rpdml0eUluc3RhbmNlSWQgPSBhY3Rpdml0eUluc3RhbmNlSWQ7XG4gICAgdGhpcy5leGVjU3RhdGUgPSBudWxsO1xuICAgIHRoaXMucGFyZW50QWN0aXZpdHlJZCA9IG51bGw7XG4gICAgdGhpcy5jaGlsZEFjdGl2aXR5SWRzID0gbmV3IFNldCgpO1xufVxuXG51dGlsLmluaGVyaXRzKEFjdGl2aXR5RXhlY3V0aW9uU3RhdGUsIEV2ZW50RW1pdHRlcik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEFjdGl2aXR5RXhlY3V0aW9uU3RhdGUucHJvdG90eXBlLCB7XG4gICAgaXNSdW5uaW5nOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhlY1N0YXRlID09PSBlbnVtcy5BY3Rpdml0eVN0YXRlcy5ydW47XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUucmVwb3J0U3RhdGUgPSBmdW5jdGlvbiAocmVhc29uLCByZXN1bHQpIHtcbiAgICBpZiAodGhpcy5leGVjU3RhdGUgIT09IHJlYXNvbikge1xuICAgICAgICB0aGlzLmV4ZWNTdGF0ZSA9IHJlYXNvbjtcbiAgICAgICAgdGhpcy5lbWl0U3RhdGUocmVhc29uLCByZXN1bHQpO1xuICAgIH1cbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uU3RhdGUucHJvdG90eXBlLmVtaXRTdGF0ZSA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICB0aGlzLmVtaXQodGhpcy5leGVjU3RhdGUsIHJlc3VsdCk7XG4gICAgaWYgKHRoaXMuZXhlY1N0YXRlICE9PSBlbnVtcy5BY3Rpdml0eVN0YXRlcy5ydW4pIHtcbiAgICAgICAgdGhpcy5lbWl0KGVudW1zLkFjdGl2aXR5U3RhdGVzLmVuZCwgdGhpcy5leGVjU3RhdGUsIHJlc3VsdCk7XG4gICAgfVxufTtcblxuLyogU0VSSUFMSVpBVElPTiAqL1xuQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUuYXNKU09OID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGV4ZWNTdGF0ZTogdGhpcy5leGVjU3RhdGVcbiAgICB9O1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGlmICghXy5pc09iamVjdChqc29uKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGFyZ3VtZW50IGV4cGVjdGVkLlwiKTtcbiAgICB9XG4gICAgaWYgKGpzb24uZXhlY1N0YXRlICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghXy5pc1N0cmluZyhqc29uLmV4ZWNTdGF0ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBvYmplY3QncyBleGVjU3RhdGUgcHJvcGVydHkgdmFsdWUgaXMgbm90IGEgc3RyaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXMudW5kZWZpbmVkKGVudW1zLkFjdGl2aXR5U3RhdGVzW2pzb24uZXhlY1N0YXRlXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBvYmplY3QncyBleGVjU3RhdGUgcHJvcGVydHkgdmFsdWUgaXMgbm90IGEgdmFsaWQgQWN0aXZpdHkgc3RhdGUgdmFsdWUuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5leGVjU3RhdGUgPSBqc29uLmV4ZWNTdGF0ZTtcbn07XG4vKiBTRVJJQUxJWkFUSU9OICovXG5cbm1vZHVsZS5leHBvcnRzID0gQWN0aXZpdHlFeGVjdXRpb25TdGF0ZTtcbiJdfQ==
