"use strict";
var EventEmitter = require('events').EventEmitter;
var util = require("util");
var enums = require("../common/enums");
var is = require("../common/is");
var StrSet = require("backpack-node").collections.StrSet;
var _ = require("lodash");
function ActivityExecutionState(activityId) {
  this.activityId = activityId;
  this.execState = null;
  this.parentActivityId = null;
  this.childActivityIds = new StrSet();
}
util.inherits(ActivityExecutionState, EventEmitter);
Object.defineProperties(ActivityExecutionState.prototype, {isRunning: {get: function() {
      return this.execState === enums.ActivityStates.run;
    }}});
ActivityExecutionState.prototype.reportState = function(reason, result) {
  if (this.execState !== reason) {
    this.execState = reason;
    this.emitState(reason, result);
  }
};
ActivityExecutionState.prototype.emitState = function(result) {
  this.emit(this.execState, result);
  if (this.execState !== enums.ActivityStates.run) {
    this.emit(enums.ActivityStates.end, this.execState, result);
  }
};
ActivityExecutionState.prototype.asJSON = function() {
  return {execState: this.execState};
};
ActivityExecutionState.prototype.fromJSON = function(json) {
  if (!_.isObject(json))
    throw new TypeError("Object argument expected.");
  if (json.execState !== null) {
    if (!_.isString(json.execState))
      throw new TypeError("Argument object's execState property value is not a string.");
    if (is.undefined(enums.ActivityStates[json.execState]))
      throw new TypeError("Argument object's execState property value is not a valid Activity state value.");
  }
  this.execState = json.execState;
};
module.exports = ActivityExecutionState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXR5RXhlY3V0aW9uU3RhdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxBQUFJLEVBQUEsQ0FBQSxZQUFXLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsYUFBYSxDQUFDO0FBQ2pELEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDdEMsQUFBSSxFQUFBLENBQUEsRUFBQyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUM7QUFDaEMsQUFBSSxFQUFBLENBQUEsTUFBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsZUFBYyxDQUFDLFlBQVksT0FBTyxDQUFDO0FBQ3hELEFBQUksRUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBRXpCLE9BQVMsdUJBQXFCLENBQUUsVUFBUyxDQUFHO0FBQ3hDLEtBQUcsV0FBVyxFQUFJLFdBQVMsQ0FBQztBQUM1QixLQUFHLFVBQVUsRUFBSSxLQUFHLENBQUM7QUFDckIsS0FBRyxpQkFBaUIsRUFBSSxLQUFHLENBQUM7QUFDNUIsS0FBRyxpQkFBaUIsRUFBSSxJQUFJLE9BQUssQUFBQyxFQUFDLENBQUM7QUFDeEM7QUFBQSxBQUVBLEdBQUcsU0FBUyxBQUFDLENBQUMsc0JBQXFCLENBQUcsYUFBVyxDQUFDLENBQUM7QUFFbkQsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLHNCQUFxQixVQUFVLENBQUcsRUFDdEQsU0FBUSxDQUFHLEVBQ1AsR0FBRSxDQUFHLFVBQVUsQUFBRCxDQUFHO0FBQ2IsV0FBTyxDQUFBLElBQUcsVUFBVSxJQUFNLENBQUEsS0FBSSxlQUFlLElBQUksQ0FBQztJQUN0RCxDQUNKLENBQ0osQ0FBQyxDQUFDO0FBRUYscUJBQXFCLFVBQVUsWUFBWSxFQUFJLFVBQVUsTUFBSyxDQUFHLENBQUEsTUFBSyxDQUFHO0FBQ3JFLEtBQUksSUFBRyxVQUFVLElBQU0sT0FBSyxDQUFHO0FBQzNCLE9BQUcsVUFBVSxFQUFJLE9BQUssQ0FBQztBQUN2QixPQUFHLFVBQVUsQUFBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNsQztBQUFBLEFBQ0osQ0FBQTtBQUVBLHFCQUFxQixVQUFVLFVBQVUsRUFBSSxVQUFVLE1BQUssQ0FBRztBQUMzRCxLQUFHLEtBQUssQUFBQyxDQUFDLElBQUcsVUFBVSxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQ2pDLEtBQUksSUFBRyxVQUFVLElBQU0sQ0FBQSxLQUFJLGVBQWUsSUFBSSxDQUFHO0FBQzdDLE9BQUcsS0FBSyxBQUFDLENBQUMsS0FBSSxlQUFlLElBQUksQ0FBRyxDQUFBLElBQUcsVUFBVSxDQUFHLE9BQUssQ0FBQyxDQUFDO0VBQy9EO0FBQUEsQUFDSixDQUFBO0FBR0EscUJBQXFCLFVBQVUsT0FBTyxFQUFJLFVBQVUsQUFBRCxDQUFHO0FBQ2xELE9BQU8sRUFDSCxTQUFRLENBQUcsQ0FBQSxJQUFHLFVBQVUsQ0FDNUIsQ0FBQztBQUNMLENBQUE7QUFFQSxxQkFBcUIsVUFBVSxTQUFTLEVBQUksVUFBVSxJQUFHLENBQUc7QUFDeEQsS0FBSSxDQUFDLENBQUEsU0FBUyxBQUFDLENBQUMsSUFBRyxDQUFDO0FBQUcsUUFBTSxJQUFJLFVBQVEsQUFBQyxDQUFDLDJCQUEwQixDQUFDLENBQUM7QUFBQSxBQUN2RSxLQUFJLElBQUcsVUFBVSxJQUFNLEtBQUcsQ0FBRztBQUN6QixPQUFJLENBQUMsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxJQUFHLFVBQVUsQ0FBQztBQUFHLFVBQU0sSUFBSSxVQUFRLEFBQUMsQ0FBQyw2REFBNEQsQ0FBQyxDQUFDO0FBQUEsQUFDbkgsT0FBSSxFQUFDLFVBQVUsQUFBQyxDQUFDLEtBQUksZUFBZSxDQUFFLElBQUcsVUFBVSxDQUFDLENBQUM7QUFBRyxVQUFNLElBQUksVUFBUSxBQUFDLENBQUMsaUZBQWdGLENBQUMsQ0FBQztBQUFBLEVBQ2xLO0FBQUEsQUFFQSxLQUFHLFVBQVUsRUFBSSxDQUFBLElBQUcsVUFBVSxDQUFDO0FBQ25DLENBQUE7QUFHQSxLQUFLLFFBQVEsRUFBSSx1QkFBcUIsQ0FBQztBQUN2QyIsImZpbGUiOiJhY3Rpdml0aWVzL2FjdGl2aXR5RXhlY3V0aW9uU3RhdGUuanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XHJcbnZhciB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XHJcbnZhciBlbnVtcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vZW51bXNcIik7XHJcbnZhciBpcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vaXNcIik7XHJcbnZhciBTdHJTZXQgPSByZXF1aXJlKFwiYmFja3BhY2stbm9kZVwiKS5jb2xsZWN0aW9ucy5TdHJTZXQ7XHJcbnZhciBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcclxuXHJcbmZ1bmN0aW9uIEFjdGl2aXR5RXhlY3V0aW9uU3RhdGUoYWN0aXZpdHlJZCkge1xyXG4gICAgdGhpcy5hY3Rpdml0eUlkID0gYWN0aXZpdHlJZDtcclxuICAgIHRoaXMuZXhlY1N0YXRlID0gbnVsbDtcclxuICAgIHRoaXMucGFyZW50QWN0aXZpdHlJZCA9IG51bGw7XHJcbiAgICB0aGlzLmNoaWxkQWN0aXZpdHlJZHMgPSBuZXcgU3RyU2V0KCk7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoQWN0aXZpdHlFeGVjdXRpb25TdGF0ZSwgRXZlbnRFbWl0dGVyKTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEFjdGl2aXR5RXhlY3V0aW9uU3RhdGUucHJvdG90eXBlLCB7XHJcbiAgICBpc1J1bm5pbmc6IHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhlY1N0YXRlID09PSBlbnVtcy5BY3Rpdml0eVN0YXRlcy5ydW47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbkFjdGl2aXR5RXhlY3V0aW9uU3RhdGUucHJvdG90eXBlLnJlcG9ydFN0YXRlID0gZnVuY3Rpb24gKHJlYXNvbiwgcmVzdWx0KSB7XHJcbiAgICBpZiAodGhpcy5leGVjU3RhdGUgIT09IHJlYXNvbikge1xyXG4gICAgICAgIHRoaXMuZXhlY1N0YXRlID0gcmVhc29uO1xyXG4gICAgICAgIHRoaXMuZW1pdFN0YXRlKHJlYXNvbiwgcmVzdWx0KTtcclxuICAgIH1cclxufVxyXG5cclxuQWN0aXZpdHlFeGVjdXRpb25TdGF0ZS5wcm90b3R5cGUuZW1pdFN0YXRlID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgdGhpcy5lbWl0KHRoaXMuZXhlY1N0YXRlLCByZXN1bHQpO1xyXG4gICAgaWYgKHRoaXMuZXhlY1N0YXRlICE9PSBlbnVtcy5BY3Rpdml0eVN0YXRlcy5ydW4pIHtcclxuICAgICAgICB0aGlzLmVtaXQoZW51bXMuQWN0aXZpdHlTdGF0ZXMuZW5kLCB0aGlzLmV4ZWNTdGF0ZSwgcmVzdWx0KTtcclxuICAgIH1cclxufVxyXG5cclxuLyogU0VSSUFMSVpBVElPTiAqL1xyXG5BY3Rpdml0eUV4ZWN1dGlvblN0YXRlLnByb3RvdHlwZS5hc0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGV4ZWNTdGF0ZTogdGhpcy5leGVjU3RhdGVcclxuICAgIH07XHJcbn1cclxuXHJcbkFjdGl2aXR5RXhlY3V0aW9uU3RhdGUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcclxuICAgIGlmICghXy5pc09iamVjdChqc29uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBhcmd1bWVudCBleHBlY3RlZC5cIik7XHJcbiAgICBpZiAoanNvbi5leGVjU3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgICBpZiAoIV8uaXNTdHJpbmcoanNvbi5leGVjU3RhdGUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgb2JqZWN0J3MgZXhlY1N0YXRlIHByb3BlcnR5IHZhbHVlIGlzIG5vdCBhIHN0cmluZy5cIik7XHJcbiAgICAgICAgaWYgKGlzLnVuZGVmaW5lZChlbnVtcy5BY3Rpdml0eVN0YXRlc1tqc29uLmV4ZWNTdGF0ZV0pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgb2JqZWN0J3MgZXhlY1N0YXRlIHByb3BlcnR5IHZhbHVlIGlzIG5vdCBhIHZhbGlkIEFjdGl2aXR5IHN0YXRlIHZhbHVlLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmV4ZWNTdGF0ZSA9IGpzb24uZXhlY1N0YXRlO1xyXG59XHJcbi8qIFNFUklBTElaQVRJT04gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQWN0aXZpdHlFeGVjdXRpb25TdGF0ZTtcclxuIl19
