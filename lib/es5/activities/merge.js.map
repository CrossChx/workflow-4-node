{"version":3,"names":[],"mappings":"","sources":["activities/merge.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\n\nfunction Merge() {\n    Activity.call(this);\n\n    this.isTrue = true;\n    this.isFalse = false;\n}\n\nutil.inherits(Merge, Activity);\n\nMerge.prototype.run = function (callContext, args) {\n    callContext.schedule(args, \"_argsGot\");\n};\n\nMerge.prototype._argsGot = function (callContext, reason, result) {\n    if (reason !== Activity.states.complete) {\n        callContext.end(reason, result);\n        return;\n    }\n\n    let merged;\n    let mergedIsObj = false;\n    let mergedIsArray = false;\n    for (let item of result) {\n        let isObj = _.isPlainObject(item);\n        let isArray = _.isArray(item);\n        if (isObj || isArray) {\n            if (!merged) {\n                merged = isObj ? _.cloneDeep(item) : item.slice(0);\n                mergedIsObj = isObj;\n                mergedIsArray = isArray;\n            }\n            else if (isObj) {\n                if (!mergedIsObj) {\n                    callContext.fail(new Error(\"Object cannot merged with an array.\"));\n                    return;\n                }\n                _.extend(merged, item);\n            }\n            else {\n                if (!mergedIsArray) {\n                    callContext.fail(new Error(\"Array cannot merged with an object.\"));\n                    return;\n                }\n                for (let sub of item) {\n                    merged.push(sub);\n                }\n            }\n        }\n        else {\n            callContext.fail(new Error(\"Only objects and arrays could be merged.\"));\n            return;\n        }\n    }\n    callContext.complete(merged);\n};\n\nmodule.exports = Merge;"],"file":"activities/merge.js","sourceRoot":"/source/"}