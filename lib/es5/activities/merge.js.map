{"version":3,"names":[],"mappings":"","sources":["activities/merge.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet _ = require(\"lodash\");\r\n\r\nfunction Merge() {\r\n    Activity.call(this);\r\n\r\n    this.isTrue = true;\r\n    this.isFalse = false;\r\n}\r\n\r\nutil.inherits(Merge, Activity);\r\n\r\nMerge.prototype.run = function (callContext, args) {\r\n    callContext.schedule(args, \"_argsGot\");\r\n};\r\n\r\nMerge.prototype._argsGot = function (callContext, reason, result) {\r\n    if (reason !== Activity.states.complete) {\r\n        callContext.end(reason, result);\r\n        return;\r\n    }\r\n\r\n    let merged;\r\n    let mergedIsObj = false;\r\n    let mergedIsArray = false;\r\n    for (let item of result) {\r\n        let isObj = _.isPlainObject(item);\r\n        let isArray = _.isArray(item);\r\n        if (isObj || isArray) {\r\n            if (!merged) {\r\n                merged = isObj ? _.cloneDeep(item) : item.slice(0);\r\n                mergedIsObj = isObj;\r\n                mergedIsArray = isArray;\r\n            }\r\n            else if (isObj) {\r\n                if (!mergedIsObj) {\r\n                    callContext.fail(new Error(\"Object cannot merged with an array.\"));\r\n                    return;\r\n                }\r\n                _.extend(merged, item);\r\n            }\r\n            else {\r\n                if (!mergedIsArray) {\r\n                    callContext.fail(new Error(\"Array cannot merged with an object.\"));\r\n                    return;\r\n                }\r\n                for (let sub of item) {\r\n                    merged.push(sub);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            callContext.fail(new Error(\"Only objects and arrays could be merged.\"));\r\n            return;\r\n        }\r\n    }\r\n    callContext.complete(merged);\r\n};\r\n\r\nmodule.exports = Merge;"],"file":"activities/merge.js","sourceRoot":"/source/"}