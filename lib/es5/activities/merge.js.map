{"version":3,"sources":["activities/merge.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE1B,SAAS,KAAK,GAAG;AACb,YAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEpB,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,QAAI,CAAC,OAAO,GAAG,KAAK,CAAC;CACxB;;AAED,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;;AAE/B,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,WAAW,EAAE,IAAI,EAAE;AAC/C,eAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;CAC1C,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE;AAC9D,QAAI,MAAM,KAAK,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE;AACrC,mBAAW,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAChC,eAAO;KACV;;AAED,QAAI,MAAM,YAAA,CAAC;AACX,QAAI,WAAW,GAAG,KAAK,CAAC;AACxB,QAAI,aAAa,GAAG,KAAK,CAAC;;;;;;AAC1B,6BAAiB,MAAM,8HAAE;gBAAhB,IAAI;;AACT,gBAAI,KAAK,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAClC,gBAAI,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9B,gBAAI,KAAK,IAAI,OAAO,EAAE;AAClB,oBAAI,CAAC,MAAM,EAAE;AACT,0BAAM,GAAG,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnD,+BAAW,GAAG,KAAK,CAAC;AACpB,iCAAa,GAAG,OAAO,CAAC;iBAC3B,MACI,IAAI,KAAK,EAAE;AACZ,wBAAI,CAAC,WAAW,EAAE;AACd,mCAAW,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;AACnE,+BAAO;qBACV;AACD,qBAAC,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;iBAC1B,MACI;AACD,wBAAI,CAAC,aAAa,EAAE;AAChB,mCAAW,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;AACnE,+BAAO;qBACV;;;;;;AACD,8CAAgB,IAAI,mIAAE;gCAAb,GAAG;;AACR,kCAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;yBACpB;;;;;;;;;;;;;;;iBACJ;aACJ,MACI;AACD,2BAAW,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC,CAAC;AACxE,uBAAO;aACV;SACJ;;;;;;;;;;;;;;;;AACD,eAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;CAChC,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"activities/merge.js","sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\n\nfunction Merge() {\n    Activity.call(this);\n\n    this.isTrue = true;\n    this.isFalse = false;\n}\n\nutil.inherits(Merge, Activity);\n\nMerge.prototype.run = function (callContext, args) {\n    callContext.schedule(args, \"_argsGot\");\n};\n\nMerge.prototype._argsGot = function (callContext, reason, result) {\n    if (reason !== Activity.states.complete) {\n        callContext.end(reason, result);\n        return;\n    }\n\n    let merged;\n    let mergedIsObj = false;\n    let mergedIsArray = false;\n    for (let item of result) {\n        let isObj = _.isPlainObject(item);\n        let isArray = _.isArray(item);\n        if (isObj || isArray) {\n            if (!merged) {\n                merged = isObj ? _.cloneDeep(item) : item.slice(0);\n                mergedIsObj = isObj;\n                mergedIsArray = isArray;\n            }\n            else if (isObj) {\n                if (!mergedIsObj) {\n                    callContext.fail(new Error(\"Object cannot merged with an array.\"));\n                    return;\n                }\n                _.extend(merged, item);\n            }\n            else {\n                if (!mergedIsArray) {\n                    callContext.fail(new Error(\"Array cannot merged with an object.\"));\n                    return;\n                }\n                for (let sub of item) {\n                    merged.push(sub);\n                }\n            }\n        }\n        else {\n            callContext.fail(new Error(\"Only objects and arrays could be merged.\"));\n            return;\n        }\n    }\n    callContext.complete(merged);\n};\n\nmodule.exports = Merge;"],"sourceRoot":"/source/"}