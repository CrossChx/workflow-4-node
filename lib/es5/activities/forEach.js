"use strict";
"use strict";
var Activity = require("./activity");
var util = require("util");
var _ = require("lodash");
var is = require("../common/is");
var Block = require("./block");
var WithBody = require("./withBody");
function ForEach() {
  WithBody.call(this);
  this.items = null;
  this.varName = "item";
  this.parallel = false;
  this._bodies = null;
}
util.inherits(ForEach, WithBody);
ForEach.prototype.initializeStructure = function() {
  if (this.parallel) {
    var numCPUs = require("os").cpus().length;
    this._bodies = [];
    if (this.args && this.args.length) {
      for (var i = 0; i < Math.min(process.env.UV_THREADPOOL_SIZE || 100000, numCPUs); i++) {
        var newArgs = [];
        var $__3 = true;
        var $__4 = false;
        var $__5 = undefined;
        try {
          for (var $__1 = void 0,
              $__0 = (this.args)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
            var arg = $__1.value;
            {
              if (arg instanceof Activity) {
                newArgs.push(arg.clone());
              } else {
                newArgs.push(arg);
              }
            }
          }
        } catch ($__6) {
          $__4 = true;
          $__5 = $__6;
        } finally {
          try {
            if (!$__3 && $__0.return != null) {
              $__0.return();
            }
          } finally {
            if ($__4) {
              throw $__5;
            }
          }
        }
        var newBody = new Block();
        newBody.args = newArgs;
        this._bodies.push(newBody);
      }
    }
    this.args = null;
  } else {
    WithBody.prototype.initializeStructure.call(this);
  }
};
ForEach.prototype.run = function(callContext, args) {
  var varName = this.get("varName");
  var items = this.get("items");
  if (!_.isNull(items)) {
    this.set(varName, null);
    callContext.schedule(items, "_itemsGot");
  } else {
    callContext.complete();
  }
};
ForEach.prototype._itemsGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete && !_.isUndefined(result)) {
    this.set("_todo", _.isArray(result) ? result : [result]);
    callContext.activity._doStep.call(this, callContext);
  } else {
    callContext.to(reason, result);
  }
};
ForEach.prototype._doStep = function(callContext, lastResult) {
  var varName = this.get("varName");
  var todo = this.get("_todo");
  if (todo && todo.length) {
    if (this.get("parallel")) {
      var bodies = this.get("_bodies");
      var pack = [];
      var idx = 0;
      while (todo.length && idx < bodies.length) {
        var item = todo[0];
        todo.splice(0, 1);
        var variables = {};
        variables[varName] = item;
        pack.push({
          variables: variables,
          activity: bodies[idx++]
        });
      }
      callContext.schedule(pack, "_bodyFinished");
    } else {
      var item$__7 = todo[0];
      todo.splice(0, 1);
      var variables$__8 = {};
      variables$__8[varName] = item$__7;
      callContext.schedule({
        activity: this.get("_body"),
        variables: variables$__8
      }, "_bodyFinished");
    }
  } else {
    callContext.complete(lastResult);
  }
};
ForEach.prototype._bodyFinished = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    callContext.activity._doStep.call(this, callContext, result);
  } else {
    callContext.end(reason, result);
  }
};
module.exports = ForEach;
//# sourceMappingURL=data:application/json;base64,
