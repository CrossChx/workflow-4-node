"use strict";
var Activity = require("./activity");
var util = require("util");
var errors = require("../common/errors");
var _ = require("lodash");
var Block = require("./block");
function Try() {
  Activity.call(this);
  this.arrayProperties.add("catch");
  this.arrayProperties.add("finally");
  this.nonScopedProperties.add("continueAfterFinally");
  this.varName = "e";
  this.catch = null;
  this.finally = null;
}
util.inherits(Try, Activity);
Try.prototype.initializeStructure = function() {
  if (this.catch) {
    var prev = this.catch;
    this.catch = new Block();
    this.catch.args = prev;
  }
  if (this.finally) {
    var prev$__0 = this.finally;
    this.finally = new Block();
    this.finally.args = prev$__0;
  }
};
Try.prototype.run = function(callContext, args) {
  callContext.schedule(args, "_argsGot");
};
Try.prototype._argsGot = function(callContext, reason, result) {
  if (this.catch || this.finally) {
    this._originalResult = result;
    this._originalReason = reason;
    if (reason === Activity.states.fail && !(result instanceof errors.ActivityRuntimeError) && this.catch) {
      this[this.varName] = result;
      this.Try_ReThrow = false;
      callContext.schedule(this.catch, "_catchDone");
      return;
    } else if ((reason === Activity.states.fail || reason === Activity.states.complete) && this.finally) {
      callContext.schedule(this.finally, "_finallyDone");
      return;
    }
  }
  callContext.end(reason, result);
};
Try.prototype._catchDone = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return;
  }
  this._catchResult = result;
  if (this.finally) {
    callContext.schedule(this.finally, "_finallyDone");
  } else {
    callContext.activity.continueAfterFinally.call(this, callContext);
  }
};
Try.prototype._finallyDone = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return;
  }
  callContext.activity.continueAfterFinally.call(this, callContext);
};
Try.prototype.continueAfterFinally = function(callContext) {
  var reason = this._originalReason;
  var result = this._originalResult;
  if (reason === Activity.states.fail && !_.isUndefined(this.Try_ReThrow)) {
    if (this.Try_ReThrow === true) {
      callContext.fail(result);
    } else if (this.Try_ReThrow instanceof Error) {
      callContext.fail(this.Try_ReThrow);
    } else {
      callContext.complete(this._catchResult);
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Try;
//# sourceMappingURL=data:application/json;base64,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QSxDQUFBLE1BQUssRUFBSSxDQUFBLElBQUcsZ0JBQWdCLENBQUM7QUFDakMsQUFBSSxJQUFBLENBQUEsTUFBSyxFQUFJLENBQUEsSUFBRyxnQkFBZ0IsQ0FBQztBQUNqQyxLQUFJLE1BQUssSUFBTSxDQUFBLFFBQU8sT0FBTyxLQUFLLENBQUEsRUFBSyxFQUFDLENBQUEsWUFBWSxBQUFDLENBQUMsSUFBRyxZQUFZLENBQUMsQ0FBRztBQUVyRSxPQUFJLElBQUcsWUFBWSxJQUFNLEtBQUcsQ0FBRztBQUMzQixnQkFBVSxLQUFLLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztJQUM1QixLQUNLLEtBQUksSUFBRyxZQUFZLFdBQWEsTUFBSSxDQUFHO0FBQ3hDLGdCQUFVLEtBQUssQUFBQyxDQUFDLElBQUcsWUFBWSxDQUFDLENBQUM7SUFDdEMsS0FDSztBQUNELGdCQUFVLFNBQVMsQUFBQyxDQUFDLElBQUcsYUFBYSxDQUFDLENBQUM7SUFDM0M7QUFBQSxFQUNKLEtBQ0s7QUFDRCxjQUFVLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNuQztBQUFBLEFBQ0osQ0FBQztBQUVELEtBQUssUUFBUSxFQUFJLElBQUUsQ0FBQztBQUFBIiwiZmlsZSI6ImFjdGl2aXRpZXMvdHJ5LmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmxldCBBY3Rpdml0eSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5XCIpO1xyXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xyXG5sZXQgZXJyb3JzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9lcnJvcnNcIik7XHJcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcclxubGV0IEJsb2NrID0gcmVxdWlyZShcIi4vYmxvY2tcIik7XHJcblxyXG5mdW5jdGlvbiBUcnkoKSB7XHJcbiAgICBBY3Rpdml0eS5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuYXJyYXlQcm9wZXJ0aWVzLmFkZChcImNhdGNoXCIpO1xyXG4gICAgdGhpcy5hcnJheVByb3BlcnRpZXMuYWRkKFwiZmluYWxseVwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJjb250aW51ZUFmdGVyRmluYWxseVwiKTtcclxuXHJcbiAgICB0aGlzLnZhck5hbWUgPSBcImVcIjtcclxuICAgIHRoaXMuY2F0Y2ggPSBudWxsO1xyXG4gICAgdGhpcy5maW5hbGx5ID0gbnVsbDtcclxufVxyXG5cclxudXRpbC5pbmhlcml0cyhUcnksIEFjdGl2aXR5KTtcclxuXHJcblRyeS5wcm90b3R5cGUuaW5pdGlhbGl6ZVN0cnVjdHVyZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMuY2F0Y2gpIHtcclxuICAgICAgICBsZXQgcHJldiA9IHRoaXMuY2F0Y2g7XHJcbiAgICAgICAgdGhpcy5jYXRjaCA9IG5ldyBCbG9jaygpO1xyXG4gICAgICAgIHRoaXMuY2F0Y2guYXJncyA9IHByZXY7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5maW5hbGx5KSB7XHJcbiAgICAgICAgbGV0IHByZXYgPSB0aGlzLmZpbmFsbHk7XHJcbiAgICAgICAgdGhpcy5maW5hbGx5ID0gbmV3IEJsb2NrKCk7XHJcbiAgICAgICAgdGhpcy5maW5hbGx5LmFyZ3MgPSBwcmV2O1xyXG4gICAgfVxyXG59O1xyXG5cclxuVHJ5LnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIGFyZ3MpIHtcclxuICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKGFyZ3MsIFwiX2FyZ3NHb3RcIik7XHJcbn07XHJcblxyXG5UcnkucHJvdG90eXBlLl9hcmdzR290ID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XHJcbiAgICBpZiAodGhpcy5jYXRjaCB8fCB0aGlzLmZpbmFsbHkpIHtcclxuICAgICAgICB0aGlzLl9vcmlnaW5hbFJlc3VsdCA9IHJlc3VsdDtcclxuICAgICAgICB0aGlzLl9vcmlnaW5hbFJlYXNvbiA9IHJlYXNvbjtcclxuICAgICAgICBpZiAocmVhc29uID09PSBBY3Rpdml0eS5zdGF0ZXMuZmFpbCAmJiAhKHJlc3VsdCBpbnN0YW5jZW9mIGVycm9ycy5BY3Rpdml0eVJ1bnRpbWVFcnJvcikgJiYgdGhpcy5jYXRjaCkge1xyXG4gICAgICAgICAgICB0aGlzW3RoaXMudmFyTmFtZV0gPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIHRoaXMuVHJ5X1JlVGhyb3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5jYXRjaCwgXCJfY2F0Y2hEb25lXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChyZWFzb24gPT09IEFjdGl2aXR5LnN0YXRlcy5mYWlsIHx8IHJlYXNvbiA9PT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSAmJiB0aGlzLmZpbmFsbHkpIHtcclxuICAgICAgICAgICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5maW5hbGx5LCBcIl9maW5hbGx5RG9uZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XHJcbn07XHJcblxyXG5UcnkucHJvdG90eXBlLl9jYXRjaERvbmUgPSBmdW5jdGlvbihjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcclxuICAgIGlmIChyZWFzb24gIT09IEFjdGl2aXR5LnN0YXRlcy5jb21wbGV0ZSkge1xyXG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2NhdGNoUmVzdWx0ID0gcmVzdWx0O1xyXG4gICAgaWYgKHRoaXMuZmluYWxseSkge1xyXG4gICAgICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKHRoaXMuZmluYWxseSwgXCJfZmluYWxseURvbmVcIik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjYWxsQ29udGV4dC5hY3Rpdml0eS5jb250aW51ZUFmdGVyRmluYWxseS5jYWxsKHRoaXMsIGNhbGxDb250ZXh0KTtcclxuICAgIH1cclxufTtcclxuXHJcblRyeS5wcm90b3R5cGUuX2ZpbmFsbHlEb25lID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XHJcbiAgICBpZiAocmVhc29uICE9PSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUpIHtcclxuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsQ29udGV4dC5hY3Rpdml0eS5jb250aW51ZUFmdGVyRmluYWxseS5jYWxsKHRoaXMsIGNhbGxDb250ZXh0KTtcclxufTtcclxuXHJcblRyeS5wcm90b3R5cGUuY29udGludWVBZnRlckZpbmFsbHkgPSBmdW5jdGlvbihjYWxsQ29udGV4dCkge1xyXG4gICAgbGV0IHJlYXNvbiA9IHRoaXMuX29yaWdpbmFsUmVhc29uO1xyXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuX29yaWdpbmFsUmVzdWx0O1xyXG4gICAgaWYgKHJlYXNvbiA9PT0gQWN0aXZpdHkuc3RhdGVzLmZhaWwgJiYgIV8uaXNVbmRlZmluZWQodGhpcy5UcnlfUmVUaHJvdykpIHtcclxuICAgICAgICAvLyBXZSd2ZSBjYW1lIGZyb20gYSBjYXRjaDpcclxuICAgICAgICBpZiAodGhpcy5UcnlfUmVUaHJvdyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuVHJ5X1JlVGhyb3cgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKHRoaXMuVHJ5X1JlVGhyb3cpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUodGhpcy5fY2F0Y2hSZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFRyeTsiXX0=
