"use strict";
var Activity = require("./activity");
var util = require("util");
var _ = require("lodash");
function And() {
  Activity.call(this);
  this.isTrue = true;
  this.isFalse = false;
}
util.inherits(And, Activity);
And.prototype.run = function(callContext, args) {
  callContext.schedule(args, "_argsGot");
};
And.prototype._argsGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return;
  }
  var isTrue = false;
  if (result.length) {
    isTrue = true;
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (result)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var v = $__1.value;
        {
          isTrue = (v ? true : false) && isTrue;
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
  }
  if (isTrue) {
    callContext.schedule(this.isTrue, "_done");
  } else {
    callContext.schedule(this.isFalse, "_done");
  }
};
And.prototype._done = function(callContext, reason, result) {
  callContext.end(reason, result);
};
module.exports = And;
//# sourceMappingURL=data:application/json;base64,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QUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksSUFBRSxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy9hbmQuanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgQWN0aXZpdHkgPSByZXF1aXJlKFwiLi9hY3Rpdml0eVwiKTtcbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cbmZ1bmN0aW9uIEFuZCgpIHtcbiAgICBBY3Rpdml0eS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5pc1RydWUgPSB0cnVlO1xuICAgIHRoaXMuaXNGYWxzZSA9IGZhbHNlO1xufVxuXG51dGlsLmluaGVyaXRzKEFuZCwgQWN0aXZpdHkpO1xuXG5BbmQucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgYXJncykge1xuICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKGFyZ3MsIFwiX2FyZ3NHb3RcIik7XG59O1xuXG5BbmQucHJvdG90eXBlLl9hcmdzR290ID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XG4gICAgaWYgKHJlYXNvbiAhPT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaXNUcnVlID0gZmFsc2U7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgaXNUcnVlID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgdiBvZiByZXN1bHQpIHtcbiAgICAgICAgICAgIGlzVHJ1ZSA9ICh2ID8gdHJ1ZSA6IGZhbHNlKSAmJiBpc1RydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNUcnVlKSB7XG4gICAgICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKHRoaXMuaXNUcnVlLCBcIl9kb25lXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5pc0ZhbHNlLCBcIl9kb25lXCIpO1xuICAgIH1cbn07XG5cbkFuZC5wcm90b3R5cGUuX2RvbmUgPSBmdW5jdGlvbihjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcbiAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbmQ7Il19
