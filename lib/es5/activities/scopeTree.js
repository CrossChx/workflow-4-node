"use strict";
"use strict";
var ScopeNode = require("./scopeNode");
var guids = require("../common/guids");
var _ = require("lodash");
var specStrings = require("../common/specStrings");
var errors = require("../common/errors");
var is = require("../common/is");
var scope = require("./scope");
var Expression = require("./expression");
function ScopeTree(initialScope, getActivityByIdFunc) {
  this._initialNode = new ScopeNode(guids.ids.initialScope, initialScope);
  this._nodes = new Map();
  this._nodes.set(this._initialNode.instanceId, this._initialNode);
  this._getActivityById = getActivityByIdFunc;
}
ScopeTree.prototype.getState = function(getPromotions) {
  var self = this;
  var state = [];
  var promotedProperties = getPromotions ? new Map() : null;
  self._nodes.forEach(function(node) {
    if (node.instanceId === guids.ids.initialScope) {
      return ;
    }
    var item = {
      instanceId: node.instanceId,
      userId: node.userId,
      parentId: node.parent ? node.parent.instanceId : null,
      parts: []
    };
    var activity = self._getActivityById(node.instanceId);
    node.forEachProperty(function(propertyName, propertyValue) {
      if (!activity.nonSerializedProperties.has(propertyName)) {
        if (_.isArray(propertyValue)) {
          var iPart = {
            name: propertyName,
            value: []
          };
          item.parts.push(iPart);
          propertyValue.forEach(function(pv) {
            if (is.activity(pv)) {
              iPart.value.push(specStrings.hosting.createActivityInstancePart(pv.instanceId));
            } else {
              iPart.value.push(pv);
            }
          });
        } else if (is.activity(propertyValue)) {
          item.parts.push({
            name: propertyName,
            value: specStrings.hosting.createActivityInstancePart(propertyValue.instanceId)
          });
        } else if (_.isFunction(propertyValue) && !activity.hasOwnProperty(propertyName) && _.isFunction(activity[propertyName])) {
          item.parts.push(specStrings.hosting.createActivityPropertyPart(propertyName));
        } else if (_.isObject(propertyValue) && propertyValue === activity[propertyName]) {
          item.parts.push(specStrings.hosting.createActivityPropertyPart(propertyName));
        } else {
          item.parts.push({
            name: propertyName,
            value: propertyValue
          });
        }
      }
    });
    state.push(item);
    if (promotedProperties && activity.promotedProperties) {
      activity.promotedProperties.forEach(function(promotedPropName) {
        var pv = node.getPropertyValue(promotedPropName, true);
        if (is.defined(pv) && !(is.activity(pv))) {
          var promotedEntry = promotedProperties.get(promotedPropName);
          if (is.undefined(promotedEntry) || node.instanceId > promotedEntry.level) {
            promotedProperties.set(promotedPropName, {
              level: node.instanceId,
              value: pv
            });
          }
        }
      });
    }
  });
  var actualPromotions = null;
  if (promotedProperties) {
    actualPromotions = {};
    if (promotedProperties.size) {
      promotedProperties.forEach(function(value, key) {
        actualPromotions[key] = value.value;
      });
    }
  }
  return {
    state: state,
    promotedProperties: actualPromotions
  };
};
ScopeTree.prototype.setState = function(json) {
  var self = this;
  if (!_.isArray(json)) {
    throw new TypeError("Array argument expected.");
  }
  if (self._nodes.count !== 1) {
    var prev = self._nodes;
    self._nodes = new Map();
    self._nodes.set(guids.ids.initialScope, prev.get(guids.ids.initialScope));
    self._initialNode.clearChildren();
  }
  try {
    var $__17 = true;
    var $__18 = false;
    var $__19 = undefined;
    try {
      for (var $__15 = void 0,
          $__14 = (json)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__17 = ($__15 = $__14.next()).done); $__17 = true) {
        var item = $__15.value;
        {
          var scopePart = {};
          var activity = self._getActivityById(item.instanceId);
          var $__10 = true;
          var $__11 = false;
          var $__12 = undefined;
          try {
            for (var $__8 = void 0,
                $__7 = (item.parts)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__10 = ($__8 = $__7.next()).done); $__10 = true) {
              var part = $__8.value;
              {
                var activityProperty = specStrings.hosting.getActivityPropertyName(part);
                if (activityProperty) {
                  if (_.isUndefined(scopePart[activityProperty] = activity[activityProperty])) {
                    throw new Error("Activity has no property '" + part + "'.");
                  }
                } else {
                  var activityId = specStrings.hosting.getActivityId(part.value);
                  if (activityId) {
                    scopePart[part.name] = self._getActivityById(activityId);
                  } else if (_.isArray(part.value)) {
                    var scopePartValue = [];
                    scopePart[part.name] = scopePartValue;
                    var $__3 = true;
                    var $__4 = false;
                    var $__5 = undefined;
                    try {
                      for (var $__1 = void 0,
                          $__0 = (part.value)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
                        var pv = $__1.value;
                        {
                          activityId = specStrings.hosting.getActivityId(pv);
                          if (activityId) {
                            scopePartValue.push(self._getActivityById(activityId));
                          } else {
                            scopePartValue.push(pv);
                          }
                        }
                      }
                    } catch ($__6) {
                      $__4 = true;
                      $__5 = $__6;
                    } finally {
                      try {
                        if (!$__3 && $__0.return != null) {
                          $__0.return();
                        }
                      } finally {
                        if ($__4) {
                          throw $__5;
                        }
                      }
                    }
                  } else {
                    scopePart[part.name] = part.value;
                  }
                }
              }
            }
          } catch ($__13) {
            $__11 = true;
            $__12 = $__13;
          } finally {
            try {
              if (!$__10 && $__7.return != null) {
                $__7.return();
              }
            } finally {
              if ($__11) {
                throw $__12;
              }
            }
          }
          var node = new ScopeNode(item.instanceId, scopePart, item.userId);
          self._nodes.set(item.instanceId, node);
        }
      }
    } catch ($__20) {
      $__18 = true;
      $__19 = $__20;
    } finally {
      try {
        if (!$__17 && $__14.return != null) {
          $__14.return();
        }
      } finally {
        if ($__18) {
          throw $__19;
        }
      }
    }
    var $__24 = true;
    var $__25 = false;
    var $__26 = undefined;
    try {
      for (var $__22 = void 0,
          $__21 = (json)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__24 = ($__22 = $__21.next()).done); $__24 = true) {
        var item$__28 = $__22.value;
        {
          self._nodes.get(item$__28.instanceId).parent = self._nodes.get(item$__28.parentId);
        }
      }
    } catch ($__27) {
      $__25 = true;
      $__26 = $__27;
    } finally {
      try {
        if (!$__24 && $__21.return != null) {
          $__21.return();
        }
      } finally {
        if ($__25) {
          throw $__26;
        }
      }
    }
  } catch (e) {
    throw new errors.WorkflowError("Cannot restore state tree, because data is corrupt. Inner error: " + e.stack);
  }
};
ScopeTree.prototype._getRealParent = function(currentNode) {
  var parent = currentNode.parent;
  if (this._getActivityById(currentNode.instanceId) instanceof Expression) {
    parent = parent.parent;
  }
  return parent;
};
ScopeTree.prototype.hasProperty = function(currentNode, name, noWalk) {
  if (name === "$parent") {
    var parent = this._getRealParent(currentNode);
    if (parent && parent !== this._initialNode) {
      return !!parent;
    }
  }
  if (name === "$activity") {
    return true;
  }
  var found = false;
  currentNode.forEachToRoot(function(node) {
    if (node.isPropertyExists(name)) {
      found = true;
      return false;
    }
    if (node.userId === name) {
      found = true;
      return false;
    }
  }, noWalk);
  return found;
};
ScopeTree.prototype.getValue = function(currentNode, name, noWalk) {
  var self = this;
  if (name === "$parent") {
    var parent = this._getRealParent(currentNode);
    if (parent && parent !== this._initialNode) {
      return scope.create(this, parent, true);
    } else {
      return undefined;
    }
  }
  if (name === "$activity") {
    return self._getActivityById(currentNode.instanceId);
  }
  var canReturnPrivate = true;
  var value;
  currentNode.forEachToRoot(function(node) {
    if (is.defined(value = node.getPropertyValue(name, canReturnPrivate))) {
      return false;
    }
    if (node.userId === name) {
      value = scope.create(self, node, true);
      return false;
    }
    canReturnPrivate = false;
  }, noWalk);
  return value;
};
ScopeTree.prototype.setValue = function(currentNode, name, value, noWalk) {
  if (this.isOnInitial) {
    throw new Error("Cannot set property of the initial scope.");
  }
  var self = this;
  var canSetPrivate = true;
  var setDone = false;
  currentNode.forEachToRoot(function(node) {
    if (node === self._initialNode) {
      return false;
    }
    if (node.setPropertyValue(name, value, canSetPrivate)) {
      setDone = true;
      return false;
    }
    canSetPrivate = false;
  }, noWalk);
  if (!setDone) {
    currentNode.createPropertyWithValue(name, value);
  }
  return true;
};
ScopeTree.prototype.deleteProperty = function(currentNode, name, noWalk) {
  var self = this;
  var canDeletePrivate = true;
  var deleteDone = false;
  currentNode.forEachToRoot(function(node) {
    if (node === self._initialNode) {
      return false;
    }
    if (node.deleteProperty(name, canDeletePrivate)) {
      deleteDone = true;
      return false;
    }
    canDeletePrivate = false;
  }, noWalk);
  return deleteDone;
};
ScopeTree.prototype.enumeratePropertyNames = $traceurRuntime.initGeneratorFunction(function $__29(currentNode, noWalk) {
  var canEnumeratePrivate,
      node,
      $__30,
      $__31;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          canEnumeratePrivate = true;
          node = currentNode;
          $ctx.state = 35;
          break;
        case 35:
          $ctx.state = 2;
          return "$parent";
        case 2:
          $ctx.maybeThrow();
          $ctx.state = 4;
          break;
        case 4:
          $ctx.state = 6;
          return "$activity";
        case 6:
          $ctx.maybeThrow();
          $ctx.state = 8;
          break;
        case 8:
          $ctx.state = (node.userId) ? 9 : 12;
          break;
        case 9:
          $ctx.state = 10;
          return node.userId;
        case 10:
          $ctx.maybeThrow();
          $ctx.state = 12;
          break;
        case 12:
          $__30 = $ctx.wrapYieldStar(node.enumeratePropertyNames(canEnumeratePrivate)[Symbol.iterator]());
          $ctx.sent = void 0;
          $ctx.action = 'next';
          $ctx.state = 25;
          break;
        case 25:
          $__31 = $__30[$ctx.action]($ctx.sentIgnoreThrow);
          $ctx.state = 22;
          break;
        case 22:
          $ctx.state = ($__31.done) ? 16 : 15;
          break;
        case 16:
          $ctx.sent = $__31.value;
          $ctx.state = 23;
          break;
        case 15:
          $ctx.state = 25;
          return $__31.value;
        case 23:
          canEnumeratePrivate = false;
          $ctx.state = 30;
          break;
        case 30:
          $ctx.state = (noWalk) ? -2 : 27;
          break;
        case 27:
          node = node.parent;
          $ctx.state = 32;
          break;
        case 32:
          $ctx.state = (node) ? 35 : -2;
          break;
        default:
          return $ctx.end();
      }
  }, $__29, this);
});
ScopeTree.prototype.next = function(nodeInstanceId, childInstanceId, scopePart, childUserId) {
  var currentNode = this._getNodeByExternalId(nodeInstanceId);
  var nextNode = new ScopeNode(childInstanceId, scopePart, childUserId);
  currentNode.addChild(nextNode);
  this._nodes.set(childInstanceId, nextNode);
  return scope.create(this, nextNode);
};
ScopeTree.prototype.back = function(nodeId, keepItem) {
  var currentNode = this._getNodeByExternalId(nodeId);
  if (currentNode === this._initialNode) {
    throw new Error("Cannot go back because current scope is the initial scope.");
  }
  var toRemove = currentNode;
  var goTo = toRemove.parent;
  currentNode = goTo;
  if (!keepItem) {
    goTo.removeChild(toRemove);
    this._nodes.delete(toRemove.instanceId);
  }
  return scope.create(this, currentNode);
};
ScopeTree.prototype.find = function(nodeId) {
  var currentNode = this._getNodeByExternalId(nodeId);
  return scope.create(this, currentNode);
};
ScopeTree.prototype.findPart = function(nodeId) {
  var currentNode = this._getNodeByExternalId(nodeId);
  if (currentNode !== this._initialNode) {
    return currentNode.scopePart;
  }
  return null;
};
ScopeTree.prototype._getNodeByExternalId = function(id) {
  if (id === null) {
    return this._initialNode;
  }
  var node = this._nodes.get(id);
  if (!node) {
    throw new Error("Scope node for activity id '" + id + "' is not found.");
  }
  return node;
};
ScopeTree.prototype.deleteScopePart = function(currentNodeId, id) {
  var self = this;
  var currentNode = this._getNodeByExternalId(currentNodeId);
  var delNode = self._nodes.get(id);
  if (delNode) {
    if (delNode === self._initialNode) {
      throw new Error("Cannot delete the initial scope.");
    }
    var found = false;
    delNode.forEachToRoot(function(node) {
      if (node === currentNode) {
        found = true;
        return false;
      }
    });
    if (!found) {
      throw new Error("Cannot delete scope, because current active scope is inside in it.");
    }
    delNode.parent.removeChild(delNode);
    self._removeAllNodes(delNode);
  }
};
ScopeTree.prototype._removeAllNodes = function(node) {
  var self = this;
  self._nodes.delete(node.instanceId);
  node.forEachChild(function(c) {
    self._removeAllNodes(c);
  });
};
module.exports = ScopeTree;
//# sourceMappingURL=data:application/json;base64,
