"use strict";
var ScopeNode = require("./scopeNode");
var guids = require("../common/guids");
var _ = require("lodash");
var specStrings = require("../common/specStrings");
var errors = require("../common/errors");
var is = require("../common/is");
var scope = require("./scope");
var Expression = require("./expression");
var scopeSerializer = require("./scopeSerializer");
function ScopeTree(initialScope, getActivityByIdFunc) {
  this._initialNode = new ScopeNode(guids.ids.initialScope, initialScope);
  this._nodes = new Map();
  this._nodes.set(this._initialNode.instanceId, this._initialNode);
  this._getActivityById = getActivityByIdFunc;
}
ScopeTree.prototype.getExecutionState = function(execContext, enablePromotions) {
  return scopeSerializer.serialize(execContext, this._getActivityById, enablePromotions, this._nodes.values());
};
ScopeTree.prototype.setState = function(json) {
  if (!_.isArray(json)) {
    throw new TypeError("Array argument expected.");
  }
  if (this._nodes.count !== 1) {
    var prev = this._nodes;
    this._nodes = new Map();
    this._nodes.set(guids.ids.initialScope, prev.get(guids.ids.initialScope));
    this._initialNode.clearChildren();
  }
  try {
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (scopeSerializer.deserializeNodes(this._getActivityById, json))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var node = $__1.value;
        {
          this._nodes.set(node.instanceId, node);
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
    var $__10 = true;
    var $__11 = false;
    var $__12 = undefined;
    try {
      for (var $__8 = void 0,
          $__7 = (json)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__10 = ($__8 = $__7.next()).done); $__10 = true) {
        var item = $__8.value;
        {
          this._nodes.get(item.instanceId).parent = this._nodes.get(item.parentId);
        }
      }
    } catch ($__13) {
      $__11 = true;
      $__12 = $__13;
    } finally {
      try {
        if (!$__10 && $__7.return != null) {
          $__7.return();
        }
      } finally {
        if ($__11) {
          throw $__12;
        }
      }
    }
  } catch (e) {
    throw new errors.WorkflowError("Cannot restore state tree, because data is corrupt. Inner error: " + e.stack);
  }
};
ScopeTree.prototype._getRealParent = function(currentNode) {
  var parent = currentNode.parent;
  if (this._getActivityById(currentNode.instanceId) instanceof Expression) {
    parent = parent.parent;
  }
  return parent;
};
ScopeTree.prototype.hasProperty = function(currentNode, name, noWalk) {
  if (name === "$parent") {
    var parent = this._getRealParent(currentNode);
    if (parent && parent !== this._initialNode) {
      return !!parent;
    }
  }
  if (name === "$activity") {
    return true;
  }
  var found = false;
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (currentNode.walkToRoot(noWalk))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var node = $__1.value;
      {
        if (node.isPropertyExists(name)) {
          found = true;
          break;
        }
        if (node.userId === name) {
          found = true;
          break;
        }
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  return found;
};
ScopeTree.prototype.getValue = function(currentNode, name, noWalk) {
  var self = this;
  if (name === "$parent") {
    var parent = this._getRealParent(currentNode);
    if (parent && parent !== this._initialNode) {
      var parentScope = scope.create(this, parent, true);
      parentScope.__marker = guids.markers.$parent;
      return parentScope;
    } else {
      return undefined;
    }
  }
  if (name === "$activity") {
    return self._getActivityById(currentNode.instanceId);
  }
  var canReturnPrivate = true;
  var value;
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (currentNode.walkToRoot(noWalk))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var node = $__1.value;
      {
        if (!_.isUndefined(value = node.getPropertyValue(name, canReturnPrivate))) {
          break;
        }
        if (node.userId === name) {
          value = scope.create(self, node, true);
          break;
        }
        canReturnPrivate = false;
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  return value;
};
ScopeTree.prototype.setValue = function(currentNode, name, value, noWalk) {
  if (this.isOnInitial) {
    throw new Error("Cannot set property of the initial scope.");
  }
  var self = this;
  var canSetPrivate = true;
  var setDone = false;
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (currentNode.walkToRoot(noWalk))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var node = $__1.value;
      {
        if (node === self._initialNode) {
          break;
        }
        if (node.setPropertyValue(name, value, canSetPrivate)) {
          setDone = true;
          break;
        }
        canSetPrivate = false;
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  if (!setDone) {
    currentNode.createPropertyWithValue(name, value);
  }
  return true;
};
ScopeTree.prototype.deleteProperty = function(currentNode, name, noWalk) {
  var self = this;
  var canDeletePrivate = true;
  var deleteDone = false;
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (currentNode.walkToRoot(noWalk))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var node = $__1.value;
      {
        if (node === self._initialNode) {
          break;
        }
        if (node.deleteProperty(name, canDeletePrivate)) {
          deleteDone = true;
          break;
        }
        canDeletePrivate = false;
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  return deleteDone;
};
ScopeTree.prototype.enumeratePropertyNames = $traceurRuntime.initGeneratorFunction(function $__14(currentNode, noWalk) {
  var canEnumeratePrivate,
      node,
      $__15,
      $__16;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          canEnumeratePrivate = true;
          node = currentNode;
          $ctx.state = 35;
          break;
        case 35:
          $ctx.state = 2;
          return "$parent";
        case 2:
          $ctx.maybeThrow();
          $ctx.state = 4;
          break;
        case 4:
          $ctx.state = 6;
          return "$activity";
        case 6:
          $ctx.maybeThrow();
          $ctx.state = 8;
          break;
        case 8:
          $ctx.state = (node.userId) ? 9 : 12;
          break;
        case 9:
          $ctx.state = 10;
          return node.userId;
        case 10:
          $ctx.maybeThrow();
          $ctx.state = 12;
          break;
        case 12:
          $__15 = $ctx.wrapYieldStar(node.enumeratePropertyNames(canEnumeratePrivate)[Symbol.iterator]());
          $ctx.sent = void 0;
          $ctx.action = 'next';
          $ctx.state = 25;
          break;
        case 25:
          $__16 = $__15[$ctx.action]($ctx.sentIgnoreThrow);
          $ctx.state = 22;
          break;
        case 22:
          $ctx.state = ($__16.done) ? 16 : 15;
          break;
        case 16:
          $ctx.sent = $__16.value;
          $ctx.state = 23;
          break;
        case 15:
          $ctx.state = 25;
          return $__16.value;
        case 23:
          canEnumeratePrivate = false;
          $ctx.state = 30;
          break;
        case 30:
          $ctx.state = (noWalk) ? -2 : 27;
          break;
        case 27:
          node = node.parent;
          $ctx.state = 32;
          break;
        case 32:
          $ctx.state = (node) ? 35 : -2;
          break;
        default:
          return $ctx.end();
      }
  }, $__14, this);
});
ScopeTree.prototype.next = function(nodeInstanceId, childInstanceId, scopePart, childUserId) {
  var currentNode = this._getNodeByExternalId(nodeInstanceId);
  var nextNode = new ScopeNode(childInstanceId, scopePart, childUserId);
  currentNode.addChild(nextNode);
  this._nodes.set(childInstanceId, nextNode);
  return scope.create(this, nextNode);
};
ScopeTree.prototype.back = function(nodeId, keepItem) {
  var currentNode = this._getNodeByExternalId(nodeId);
  if (currentNode === this._initialNode) {
    throw new Error("Cannot go back because current scope is the initial scope.");
  }
  var toRemove = currentNode;
  var goTo = toRemove.parent;
  currentNode = goTo;
  if (!keepItem) {
    goTo.removeChild(toRemove);
    this._nodes.delete(toRemove.instanceId);
  }
  return scope.create(this, currentNode);
};
ScopeTree.prototype.find = function(nodeId) {
  var currentNode = this._getNodeByExternalId(nodeId);
  return scope.create(this, currentNode);
};
ScopeTree.prototype.findPart = function(nodeId) {
  var currentNode = this._getNodeByExternalId(nodeId);
  if (currentNode !== this._initialNode) {
    return currentNode.scopePart;
  }
  return null;
};
ScopeTree.prototype._getNodeByExternalId = function(id) {
  if (id === null) {
    return this._initialNode;
  }
  var node = this._nodes.get(id);
  if (!node) {
    throw new Error("Scope node for activity id '" + id + "' is not found.");
  }
  return node;
};
ScopeTree.prototype.deleteScopePart = function(currentNodeId, id) {
  var self = this;
  var currentNode = this._getNodeByExternalId(currentNodeId);
  var delNode = self._nodes.get(id);
  if (delNode) {
    if (delNode === self._initialNode) {
      throw new Error("Cannot delete the initial scope.");
    }
    var found = false;
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (delNode.walkToRoot())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var node = $__1.value;
        {
          if (node === currentNode) {
            found = true;
            break;
          }
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
    if (!found) {
      throw new Error("Cannot delete scope, because current active scope is inside in it.");
    }
    delNode.parent.removeChild(delNode);
    self._removeAllNodes(delNode);
  }
};
ScopeTree.prototype._removeAllNodes = function(node) {
  var self = this;
  self._nodes.delete(node.instanceId);
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (node.children())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var c = $__1.value;
      {
        self._removeAllNodes(c);
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
};
module.exports = ScopeTree;
//# sourceMappingURL=data:application/json;base64,
