"use strict";
"use strict";
var ScopeNode = require("./scopeNode");
var guids = require("../common/guids");
var StrMap = require("backpack-node").collections.StrMap;
var StrSet = require("backpack-node").collections.StrSet;
var _ = require("lodash");
var specStrings = require("../common/specStrings");
var errors = require("../common/errors");
var is = require("../common/is");
var scope = require("./scope");
var fast = require("fast.js");
function ScopeTree(initialScope, getActivityByIdFunc) {
  this._initialNode = new ScopeNode(guids.ids.initialScope, initialScope);
  this._nodes = new StrMap();
  this._nodes.add(this._initialNode.id, this._initialNode);
  this._getActivityById = getActivityByIdFunc;
}
ScopeTree.prototype.getState = function(getPromotions) {
  var self = this;
  var state = [];
  var promotedProperties = getPromotions ? new StrMap() : null;
  self._nodes.forEachValue(function(node) {
    if (node.id === guids.ids.initialScope) {
      return ;
    }
    var item = {
      id: node.id,
      parentId: node.parent ? node.parent.id : null,
      parts: []
    };
    var activity = self._getActivityById(node.id);
    node.forEachProperty(function(propertyName, propertyValue) {
      if (!activity.nonSerializedProperties.exists(propertyName)) {
        if (_.isArray(propertyValue)) {
          var iPart = {
            name: propertyName,
            value: []
          };
          item.parts.push(iPart);
          propertyValue.forEach(function(pv) {
            if (is.activity(pv)) {
              iPart.value.push(specStrings.hosting.createActivityInstancePart(pv.id));
            } else {
              iPart.value.push(pv);
            }
          });
        } else if (is.activity(propertyValue)) {
          item.parts.push({
            name: propertyName,
            value: specStrings.hosting.createActivityInstancePart(propertyValue.id)
          });
        } else if (_.isFunction(propertyValue) && !activity.hasOwnProperty(propertyName) && _.isFunction(activity[propertyName])) {
          item.parts.push(specStrings.hosting.createActivityPropertyPart(propertyName));
        } else if (_.isObject(propertyValue) && propertyValue === activity[propertyName]) {
          item.parts.push(specStrings.hosting.createActivityPropertyPart(propertyName));
        } else {
          item.parts.push({
            name: propertyName,
            value: propertyValue
          });
        }
      }
    });
    state.push(item);
    if (promotedProperties && activity.promotedProperties) {
      activity.promotedProperties.forEach(function(promotedPropName) {
        var pv = node.getPropertyValue(promotedPropName, true);
        if (is.defined(pv) && !(is.activity(pv))) {
          var promotedEntry = promotedProperties.get(promotedPropName);
          if (is.undefined(promotedEntry) || node.id > promotedEntry.level) {
            promotedProperties.add(promotedPropName, {
              level: node.id,
              value: pv
            });
          }
        }
      });
    }
  });
  var actualPromotions = null;
  if (promotedProperties) {
    actualPromotions = {};
    if (promotedProperties.count) {
      promotedProperties.forEach(function(kvp) {
        actualPromotions[kvp.key] = kvp.value.value;
      });
    }
  }
  return {
    state: state,
    promotedProperties: actualPromotions
  };
};
ScopeTree.prototype.setState = function(json) {
  var self = this;
  if (!_.isArray(json)) {
    throw new TypeError("Array argument expected.");
  }
  if (self._nodes.count !== 1) {
    self._nodes.forEachKey(function(key) {
      if (key === guids.ids.initialScope) {
        return ;
      }
      self._nodes.remove(key);
    });
    self._initialNode.clearChildren();
  }
  try {
    var $__17 = true;
    var $__18 = false;
    var $__19 = undefined;
    try {
      for (var $__15 = void 0,
          $__14 = (json)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__17 = ($__15 = $__14.next()).done); $__17 = true) {
        var item = $__15.value;
        {
          var scopePart = {};
          var activity = self._getActivityById(item.id);
          var $__10 = true;
          var $__11 = false;
          var $__12 = undefined;
          try {
            for (var $__8 = void 0,
                $__7 = (item.parts)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__10 = ($__8 = $__7.next()).done); $__10 = true) {
              var part = $__8.value;
              {
                var activityProperty = specStrings.hosting.getActivityPropertyName(part);
                if (activityProperty) {
                  if (_.isUndefined(scopePart[activityProperty] = activity[activityProperty])) {
                    throw new Error("Activity has no property '" + part + "'.");
                  }
                } else {
                  var activityId = specStrings.hosting.getActivityId(part.value);
                  if (activityId) {
                    scopePart[part.name] = self._getActivityById(activityId);
                  } else if (_.isArray(part.value)) {
                    var scopePartValue = [];
                    scopePart[part.name] = scopePartValue;
                    var $__3 = true;
                    var $__4 = false;
                    var $__5 = undefined;
                    try {
                      for (var $__1 = void 0,
                          $__0 = (part.value)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
                        var pv = $__1.value;
                        {
                          activityId = specStrings.hosting.getActivityId(pv);
                          if (activityId) {
                            scopePartValue.push(self._getActivityById(activityId));
                          } else {
                            scopePartValue.push(pv);
                          }
                        }
                      }
                    } catch ($__6) {
                      $__4 = true;
                      $__5 = $__6;
                    } finally {
                      try {
                        if (!$__3 && $__0.return != null) {
                          $__0.return();
                        }
                      } finally {
                        if ($__4) {
                          throw $__5;
                        }
                      }
                    }
                  } else {
                    scopePart[part.name] = part.value;
                  }
                }
              }
            }
          } catch ($__13) {
            $__11 = true;
            $__12 = $__13;
          } finally {
            try {
              if (!$__10 && $__7.return != null) {
                $__7.return();
              }
            } finally {
              if ($__11) {
                throw $__12;
              }
            }
          }
          var node = new ScopeNode(item.id, scopePart);
          self._nodes.add(item.id, node);
        }
      }
    } catch ($__20) {
      $__18 = true;
      $__19 = $__20;
    } finally {
      try {
        if (!$__17 && $__14.return != null) {
          $__14.return();
        }
      } finally {
        if ($__18) {
          throw $__19;
        }
      }
    }
    var $__24 = true;
    var $__25 = false;
    var $__26 = undefined;
    try {
      for (var $__22 = void 0,
          $__21 = (json)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__24 = ($__22 = $__21.next()).done); $__24 = true) {
        var item$__28 = $__22.value;
        {
          self._nodes.get(item$__28.id).parent = self._nodes.get(item$__28.parentId);
        }
      }
    } catch ($__27) {
      $__25 = true;
      $__26 = $__27;
    } finally {
      try {
        if (!$__24 && $__21.return != null) {
          $__21.return();
        }
      } finally {
        if ($__25) {
          throw $__26;
        }
      }
    }
  } catch (e) {
    throw new errors.WorkflowError("Cannot restore state tree, because data is corrupt. Inner error: " + e.stack);
  }
};
ScopeTree.prototype.hasProperty = function(currentNode, name) {
  var found = false;
  currentNode.forEachToRoot(function(node) {
    if (node.isPropertyExists(name)) {
      found = true;
      return false;
    }
  });
  return found;
};
ScopeTree.prototype.getValue = function(currentNode, name) {
  var canReturnPrivate = true;
  var value;
  currentNode.forEachToRoot(function(node) {
    if (is.defined(value = node.getPropertyValue(name, canReturnPrivate))) {
      return false;
    }
    canReturnPrivate = false;
  });
  return value;
};
ScopeTree.prototype.setValue = function(currentNode, name, value) {
  if (this.isOnInitial) {
    throw new Error("Cannot set property of the initial scope.");
  }
  var self = this;
  var canSetPrivate = true;
  var setDone = false;
  currentNode.forEachToRoot(function(node) {
    if (node === self._initialNode) {
      return false;
    }
    if (node.setPropertyValue(name, value, canSetPrivate)) {
      setDone = true;
      return false;
    }
    canSetPrivate = false;
  });
  if (!setDone) {
    currentNode.createPropertyWithValue(name, value);
  }
  return true;
};
ScopeTree.prototype.deleteProperty = function(currentNode, name) {
  var self = this;
  var canDeletePrivate = true;
  var deleteDone = false;
  currentNode.forEachToRoot(function(node) {
    if (node === self._initialNode) {
      return false;
    }
    if (node.deleteProperty(name, canDeletePrivate)) {
      deleteDone = true;
      return false;
    }
    canDeletePrivate = false;
  });
  return deleteDone;
};
ScopeTree.prototype.enumeratePropertyNames = $traceurRuntime.initGeneratorFunction(function $__29(currentNode) {
  var canEnumeratePrivate,
      node,
      $__30,
      $__31;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          canEnumeratePrivate = true;
          node = currentNode;
          $ctx.state = 17;
          break;
        case 17:
          $__30 = $ctx.wrapYieldStar(node.enumeratePropertyNames(canEnumeratePrivate)[Symbol.iterator]());
          $ctx.sent = void 0;
          $ctx.action = 'next';
          $ctx.state = 12;
          break;
        case 12:
          $__31 = $__30[$ctx.action]($ctx.sentIgnoreThrow);
          $ctx.state = 9;
          break;
        case 9:
          $ctx.state = ($__31.done) ? 3 : 2;
          break;
        case 3:
          $ctx.sent = $__31.value;
          $ctx.state = 10;
          break;
        case 2:
          $ctx.state = 12;
          return $__31.value;
        case 10:
          canEnumeratePrivate = false;
          node = node.parent;
          $ctx.state = 14;
          break;
        case 14:
          $ctx.state = (node) ? 17 : -2;
          break;
        default:
          return $ctx.end();
      }
  }, $__29, this);
});
ScopeTree.prototype.next = function(nodeId, childId, scopePart) {
  var currentNode = this._getNodeByExternalId(nodeId);
  var nextNode = new ScopeNode(childId, scopePart);
  currentNode.addChild(nextNode);
  this._nodes.add(childId, nextNode);
  return scope.create(this, nextNode);
};
ScopeTree.prototype.back = function(nodeId, keepItem) {
  var currentNode = this._getNodeByExternalId(nodeId);
  if (currentNode === this._initialNode) {
    throw new Error("Cannot go back because current scope is the initial scope.");
  }
  var toRemove = currentNode;
  var goTo = toRemove.parent;
  currentNode = goTo;
  if (!keepItem) {
    goTo.removeChild(toRemove);
    this._nodes.remove(toRemove.id);
  }
  return scope.create(this, currentNode);
};
ScopeTree.prototype.find = function(nodeId) {
  var currentNode = this._getNodeByExternalId(nodeId);
  return scope.create(this, currentNode);
};
ScopeTree.prototype._getNodeByExternalId = function(id) {
  if (id === null) {
    return this._initialNode;
  }
  var node = this._nodes.get(id);
  if (!node) {
    throw new Error("Scope node for activity id '" + id + "' is not found.");
  }
  return node;
};
ScopeTree.prototype.deleteScopePart = function(currentNodeId, id) {
  var self = this;
  var currentNode = this._getNodeByExternalId(currentNodeId);
  var delNode = self._nodes.get(id);
  if (delNode) {
    if (delNode === self._initialNode) {
      throw new Error("Cannot delete the initial scope.");
    }
    var found = false;
    delNode.forEachToRoot(function(node) {
      if (node === currentNode) {
        found = true;
        return false;
      }
    });
    if (!found) {
      throw new Error("Cannot delete scope, because current active scope is inside in it.");
    }
    delNode.parent.removeChild(delNode);
    self._removeAllNodes(delNode);
  }
};
ScopeTree.prototype._removeAllNodes = function(node) {
  var self = this;
  self._nodes.remove(node.id);
  node.forEachChild(function(c) {
    self._removeAllNodes(c);
  });
};
module.exports = ScopeTree;
//# sourceMappingURL=data:application/json;base64,
