"use strict";
"use strict";
var ActivityExecutionState = require("./activityExecutionState");
var ResumeBookmarkQueue = require("./resumeBookmarkQueue");
var enums = require("../common/enums");
var errors = require("../common/errors");
var util = require("util");
var EventEmitter = require('events').EventEmitter;
var _ = require("lodash");
var guids = require("../common/guids");
var ScopeTree = require("./scopeTree");
var is = require("../common/is");
var CallContext = require("./callContext");
function ActivityExecutionContext() {
  this._activityStates = new Map();
  this._bookmarks = new Map();
  this._resumeBMQueue = new ResumeBookmarkQueue();
  this._rootActivity = null;
  this._knownActivities = new Map();
  this._nextActivityId = 0;
  this._scopeTree = this._createScopeTree();
}
util.inherits(ActivityExecutionContext, EventEmitter);
Object.defineProperties(ActivityExecutionContext.prototype, {
  scope: {get: function() {
      return this._scopeTree.currentScope;
    }},
  hasScope: {get: function() {
      return !this._scopeTree.isOnInitial;
    }},
  rootActivity: {get: function() {
      return this._rootActivity;
    }}
});
ActivityExecutionContext.prototype._createScopeTree = function() {
  var self = this;
  return new ScopeTree({resultCollected: function(context, reason, result, bookmarkName) {
      context.activity.resultCollected.call(context.scope, context, reason, result, bookmarkName);
    }}, function(id) {
    return self._getKnownActivity(id);
  });
};
ActivityExecutionContext.prototype._registerKnownActivity = function(activity) {
  this._knownActivities.set(activity.instanceId, activity);
  activity._initializeStructure();
};
ActivityExecutionContext.prototype.initialize = function(rootActivity) {
  if (this._rootActivity) {
    throw new Error("Context is already initialized.");
  }
  if (!is.activity(rootActivity)) {
    throw new TypeError("Argument 'rootActivity' value is not an activity.");
  }
  this._rootActivity = rootActivity;
  this._initialize(null, rootActivity, {instanceId: 0});
};
ActivityExecutionContext.prototype.appendToContext = function(args) {
  this._checkInit();
  var self = this;
  var currMax = self._nextActivityId;
  var c = {instanceId: currMax};
  if (_.isArray(args)) {
    var state = self.getState(self._rootActivity.instanceId);
    args.forEach(function(arg) {
      if (is.activity(arg)) {
        self._initialize(self._rootActivity, arg, c);
        state.childActivityIds.add(arg.instanceId);
      }
    });
  } else {
    throw new TypeError("Argument 'args' value is not an array.");
  }
  return {
    fromId: currMax,
    toId: this._nextActivityId
  };
};
ActivityExecutionContext.prototype.removeFromContext = function(removeToken) {
  this._checkInit();
  if (removeToken && is.defined(removeToken.fromId) && is.defined(removeToken.toId)) {
    var state = this.getState(this._rootActivity.instanceId);
    for (var id = removeToken.fromId; id <= removeToken.toId; id++) {
      var sid = id.toString();
      this._knownActivities.delete(sid);
      state.childActivityIds.delete(sid);
    }
  } else {
    throw new TypeError("Argument 'removeToken' value is not a valid remove token object.");
  }
  this._nextActivityId = removeToken.fromId;
};
ActivityExecutionContext.prototype._checkInit = function() {
  if (!this._rootActivity) {
    throw new Error("Context is not initialized.");
  }
};
ActivityExecutionContext.prototype._initialize = function(parent, activity, idCounter) {
  var self = this;
  if (activity.instanceId === null) {
    activity.instanceId = (idCounter.instanceId++).toString();
  } else if (activity.instanceId !== (idCounter.instanceId++).toString()) {
    throw new Error("Activity " + activity.instanceId + " has been assigned to an other context in a different tree which is not allowed.");
  }
  self._nextActivityId = idCounter.instanceId;
  var state = self.getState(activity.instanceId);
  state.parentActivityId = parent ? parent.instanceId : null;
  self._registerKnownActivity(activity);
  activity.forEachImmediateChild(function(child) {
    self._initialize(activity, child, idCounter);
    state.childActivityIds.add(child.instanceId);
  }, this);
};
ActivityExecutionContext.prototype.getState = function(id) {
  var self = this;
  var state = self._activityStates.get(id);
  if (is.undefined(state)) {
    state = new ActivityExecutionState(id);
    state.on(enums.ActivityStates.run, function() {
      var activity = self._knownActivities.get(id);
      if (!activity) {
        activity = {instanceId: id};
      }
      self.emit(enums.ActivityStates.run, activity);
    });
    state.on(enums.ActivityStates.end, function(reason, result) {
      var activity = self._knownActivities.get(id);
      if (!activity) {
        activity = {instanceId: id};
      }
      self.emit(enums.ActivityStates.end, activity, reason, result);
    });
    self._activityStates.set(id, state);
  }
  return state;
};
ActivityExecutionContext.prototype._getKnownActivity = function(activityId) {
  var activity = this._knownActivities.get(activityId);
  if (!activity) {
    throw new errors.ActivityRuntimeError("Activity by id '" + activityId + "' not found.");
  }
  return activity;
};
ActivityExecutionContext.prototype.createBookmark = function(activityId, name, endCallback) {
  this.registerBookmark({
    name: name,
    activityInstanceId: activityId,
    timestamp: new Date().getTime(),
    endCallback: endCallback
  });
  return name;
};
ActivityExecutionContext.prototype.registerBookmark = function(bookmark) {
  var bm = this._bookmarks.get(bookmark.name);
  if (bm) {
    throw new errors.ActivityRuntimeError("Bookmark '" + bookmark.name + "' already exists.");
  }
  this._bookmarks.set(bookmark.name, bookmark);
};
ActivityExecutionContext.prototype.isBookmarkExists = function(name) {
  return this._bookmarks.has(name);
};
ActivityExecutionContext.prototype.getBookmarkTimestamp = function(name, throwIfNotFound) {
  var bm = this._bookmarks.get(name);
  if (is.undefined(bm) && throwIfNotFound) {
    throw new Error("Bookmark '" + name + "' not found.");
  }
  return bm ? bm.timestamp : null;
};
ActivityExecutionContext.prototype.deleteBookmark = function(name) {
  this._bookmarks.delete(name);
};
ActivityExecutionContext.prototype.noopCallbacks = function(bookmarkNames) {
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (bookmarkNames)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var name = $__1.value;
      {
        var bm = this._bookmarks.get(name);
        if (bm) {
          bm.endCallback = _.noop;
        }
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
};
ActivityExecutionContext.prototype.resumeBookmarkInScope = function(callContext, name, reason, result) {
  var bm = this._bookmarks.get(name);
  if (is.undefined(bm)) {
    throw new Error("Bookmark '" + name + "' doesn't exists. Cannot continue with reason: " + reason + ".");
  }
  var self = this;
  setImmediate(function() {
    try {
      self._doResumeBookmark(callContext, bm, reason, result, reason === enums.ActivityStates.idle);
    } catch (e) {
      callContext.fail(e);
    }
  });
};
ActivityExecutionContext.prototype.resumeBookmarkInternal = function(callContext, name, reason, result) {
  var bm = this._bookmarks.get(name);
  this._resumeBMQueue.enqueue(name, reason, result);
};
ActivityExecutionContext.prototype.resumeBookmarkExternal = function(name, reason, result) {
  var self = this;
  var bm = self._bookmarks.get(name);
  if (is.undefined(bm)) {
    throw new errors.ActivityRuntimeError("Internal resume bookmark request cannot be processed because bookmark '" + name + "' doesn't exists.");
  }
  self._doResumeBookmark(new CallContext(this, bm.activityInstanceId), bm, reason, result);
};
ActivityExecutionContext.prototype.processResumeBookmarkQueue = function() {
  var self = this;
  var command = self._resumeBMQueue.dequeue();
  if (command) {
    var bm = self._bookmarks.get(command.name);
    if (is.undefined(bm)) {
      throw new errors.ActivityRuntimeError("Internal resume bookmark request cannot be processed because bookmark '" + command.name + "' doesn't exists.");
    }
    self._doResumeBookmark(new CallContext(this, bm.activityInstanceId), bm, command.reason, command.result);
    return true;
  }
  return false;
};
ActivityExecutionContext.prototype._doResumeBookmark = function(callContext, bookmark, reason, result, noRemove) {
  var scope = callContext.scope;
  if (!noRemove) {
    this._bookmarks.delete(bookmark.name);
  }
  var cb = bookmark.endCallback;
  if (_.isString(cb)) {
    cb = scope.get(bookmark.endCallback);
    if (!_.isFunction(cb)) {
      cb = null;
    }
  }
  if (!cb) {
    throw new errors.ActivityRuntimeError("Bookmark's '" + bookmark.name + "' callback '" + bookmark.endCallback + "' is not defined on the current scope.");
  }
  cb.call(scope, callContext, reason, result, bookmark);
};
ActivityExecutionContext.prototype.cancelExecution = function(activityIds) {
  var self = this;
  var allIds = new Set();
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (activityIds)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var id = $__1.value;
      {
        self._cancelSubtree(allIds, id);
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  self._bookmarks.forEach(function(bm) {
    if (allIds.has(bm.activityInstanceId)) {
      self._bookmarks.delete(bm.name);
    }
  });
};
ActivityExecutionContext.prototype._cancelSubtree = function(allIds, activityId) {
  var self = this;
  allIds.add(activityId);
  var state = self.getState(activityId);
  state.childActivityIds.forEach(function(id) {
    self._cancelSubtree(allIds, id);
  });
  state.reportState(enums.ActivityStates.cancel);
};
ActivityExecutionContext.prototype.deleteScopeOfActivity = function(callContext, activityId) {
  this._scopeTree.deleteScopePart(callContext.activityInstanceId, activityId);
};
function mapToJSON(map) {
  if (!map) {
    return null;
  }
  var json = [];
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (map.entries())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var kvp = $__1.value;
      {
        json.push(kvp);
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  return json;
}
function jsonToMap(json) {
  if (!json) {
    return null;
  }
  var map = new Map();
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (json)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var kvp = $__1.value;
      {
        map.set(kvp[0], kvp[1]);
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  return map;
}
ActivityExecutionContext.prototype.getStateAndPromotions = function(serializer, getPromotions) {
  if (serializer && !_.isFunction(serializer.toJSON)) {
    throw new Error("Argument 'serializer' is not a serializer.");
  }
  var activityStates = new Map();
  this._activityStates.forEach(function(s) {
    activityStates.set(s.activityInstanceId, s.asJSON());
  });
  var scopeStateAndPromotions = this._scopeTree.getState(getPromotions);
  var serialized;
  if (serializer) {
    serialized = serializer.toJSON({
      activityStates: activityStates,
      bookmarks: this._bookmarks,
      scope: scopeStateAndPromotions.state
    });
  } else {
    serialized = {
      activityStates: mapToJSON(activityStates),
      bookmarks: mapToJSON(this._bookmarks),
      scope: scopeStateAndPromotions.state
    };
  }
  return {
    state: serialized,
    promotedProperties: scopeStateAndPromotions.promotedProperties
  };
};
ActivityExecutionContext.prototype.setState = function(serializer, json) {
  if (serializer && !_.isFunction(serializer.fromJSON)) {
    throw new Error("Argument 'serializer' is not a serializer.");
  }
  if (!_.isObject(json)) {
    throw new TypeError("Argument 'json' is not an object.");
  }
  if (serializer) {
    json = serializer.fromJSON(json);
    if (!(json.activityStates instanceof Map)) {
      throw new TypeError("ActivityStates property value of argument 'json' is not an Map instance.");
    }
    if (!(json.bookmarks instanceof Map)) {
      throw new TypeError("Bookmarks property value of argument 'json' is not an Map instance.");
    }
  } else {
    if (!json.activityStates) {
      throw new TypeError("ActivityStates property value of argument 'json' is not an object.");
    }
    if (!json.bookmarks) {
      throw new TypeError("Bookmarks property value of argument 'json' is not an object.");
    }
    json = {
      activityStates: jsonToMap(json.activityStates),
      bookmarks: jsonToMap(json.bookmarks),
      scope: json.scope
    };
  }
  this._activityStates.forEach(function(s) {
    var stored = json.activityStates.get(s.activityInstanceId);
    if (_.isUndefined(stored)) {
      throw new Error("Activity's of '" + s.activityInstanceId + "' state not found.");
    }
    s.fromJSON(stored);
  });
  this._bookmarks = json.bookmarks;
  this._scopeTree.setState(json.scope);
};
module.exports = ActivityExecutionContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLFdBQVcsQ0FBQztBQUVaLEFBQUksRUFBQSxDQUFBLHNCQUFxQixFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsMEJBQXlCLENBQUMsQ0FBQztBQUNoRSxBQUFJLEVBQUEsQ0FBQSxtQkFBa0IsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLHVCQUFzQixDQUFDLENBQUM7QUFDMUQsQUFBSSxFQUFBLENBQUEsS0FBSSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsaUJBQWdCLENBQUMsQ0FBQztBQUN0QyxBQUFJLEVBQUEsQ0FBQSxNQUFLLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxrQkFBaUIsQ0FBQyxDQUFDO0FBQ3hDLEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLFlBQVcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxhQUFhLENBQUM7QUFDakQsQUFBSSxFQUFBLENBQUEsQ0FBQSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDekIsQUFBSSxFQUFBLENBQUEsS0FBSSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsaUJBQWdCLENBQUMsQ0FBQztBQUN0QyxBQUFJLEVBQUEsQ0FBQSxTQUFRLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxhQUFZLENBQUMsQ0FBQztBQUN0QyxBQUFJLEVBQUEsQ0FBQSxFQUFDLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxjQUFhLENBQUMsQ0FBQztBQUNoQyxBQUFJLEVBQUEsQ0FBQSxXQUFVLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxlQUFjLENBQUMsQ0FBQztBQUUxQyxPQUFTLHlCQUF1QixDQUFFLEFBQUQsQ0FBRztBQUNoQyxLQUFHLGdCQUFnQixFQUFJLElB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eUJBQXVCLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL2FjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBBY3Rpdml0eUV4ZWN1dGlvblN0YXRlID0gcmVxdWlyZShcIi4vYWN0aXZpdHlFeGVjdXRpb25TdGF0ZVwiKTtcbmxldCBSZXN1bWVCb29rbWFya1F1ZXVlID0gcmVxdWlyZShcIi4vcmVzdW1lQm9va21hcmtRdWV1ZVwiKTtcbmxldCBlbnVtcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vZW51bXNcIik7XG5sZXQgZXJyb3JzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9lcnJvcnNcIik7XG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmxldCBndWlkcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vZ3VpZHNcIik7XG5sZXQgU2NvcGVUcmVlID0gcmVxdWlyZShcIi4vc2NvcGVUcmVlXCIpO1xubGV0IGlzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pc1wiKTtcbmxldCBDYWxsQ29udGV4dCA9IHJlcXVpcmUoXCIuL2NhbGxDb250ZXh0XCIpO1xuXG5mdW5jdGlvbiBBY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQoKSB7XG4gICAgdGhpcy5fYWN0aXZpdHlTdGF0ZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fYm9va21hcmtzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3Jlc3VtZUJNUXVldWUgPSBuZXcgUmVzdW1lQm9va21hcmtRdWV1ZSgpO1xuICAgIHRoaXMuX3Jvb3RBY3Rpdml0eSA9IG51bGw7XG4gICAgdGhpcy5fa25vd25BY3Rpdml0aWVzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX25leHRBY3Rpdml0eUlkID0gMDtcbiAgICB0aGlzLl9zY29wZVRyZWUgPSB0aGlzLl9jcmVhdGVTY29wZVRyZWUoKTtcbn1cblxudXRpbC5pbmhlcml0cyhBY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQsIEV2ZW50RW1pdHRlcik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIEFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5wcm90b3R5cGUsXG4gICAge1xuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlVHJlZS5jdXJyZW50U2NvcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhhc1Njb3BlOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuX3Njb3BlVHJlZS5pc09uSW5pdGlhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcm9vdEFjdGl2aXR5OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb290QWN0aXZpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5BY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQucHJvdG90eXBlLl9jcmVhdGVTY29wZVRyZWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgU2NvcGVUcmVlKFxuICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHRDb2xsZWN0ZWQ6IGZ1bmN0aW9uIChjb250ZXh0LCByZWFzb24sIHJlc3VsdCwgYm9va21hcmtOYW1lKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hY3Rpdml0eS5yZXN1bHRDb2xsZWN0ZWQuY2FsbChjb250ZXh0LnNjb3BlLCBjb250ZXh0LCByZWFzb24sIHJlc3VsdCwgYm9va21hcmtOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5fZ2V0S25vd25BY3Rpdml0eShpZCk7XG4gICAgICAgIH0pO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5fcmVnaXN0ZXJLbm93bkFjdGl2aXR5ID0gZnVuY3Rpb24gKGFjdGl2aXR5KSB7XG4gICAgdGhpcy5fa25vd25BY3Rpdml0aWVzLnNldChhY3Rpdml0eS5pbnN0YW5jZUlkLCBhY3Rpdml0eSk7XG4gICAgYWN0aXZpdHkuX2luaXRpYWxpemVTdHJ1Y3R1cmUoKTtcbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChyb290QWN0aXZpdHkpIHtcbiAgICBpZiAodGhpcy5fcm9vdEFjdGl2aXR5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnRleHQgaXMgYWxyZWFkeSBpbml0aWFsaXplZC5cIik7XG4gICAgfVxuICAgIGlmICghaXMuYWN0aXZpdHkocm9vdEFjdGl2aXR5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgJ3Jvb3RBY3Rpdml0eScgdmFsdWUgaXMgbm90IGFuIGFjdGl2aXR5LlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yb290QWN0aXZpdHkgPSByb290QWN0aXZpdHk7XG4gICAgdGhpcy5faW5pdGlhbGl6ZShudWxsLCByb290QWN0aXZpdHksIHsgaW5zdGFuY2VJZDogMCB9KTtcbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5wcm90b3R5cGUuYXBwZW5kVG9Db250ZXh0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB0aGlzLl9jaGVja0luaXQoKTtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBjdXJyTWF4ID0gc2VsZi5fbmV4dEFjdGl2aXR5SWQ7XG4gICAgbGV0IGMgPSB7IGluc3RhbmNlSWQ6IGN1cnJNYXggfTtcblxuICAgIGlmIChfLmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgbGV0IHN0YXRlID0gc2VsZi5nZXRTdGF0ZShzZWxmLl9yb290QWN0aXZpdHkuaW5zdGFuY2VJZCk7XG4gICAgICAgIGFyZ3MuZm9yRWFjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXMuYWN0aXZpdHkoYXJnKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0aWFsaXplKHNlbGYuX3Jvb3RBY3Rpdml0eSwgYXJnLCBjKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2hpbGRBY3Rpdml0eUlkcy5hZGQoYXJnLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50ICdhcmdzJyB2YWx1ZSBpcyBub3QgYW4gYXJyYXkuXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGZyb21JZDogY3Vyck1heCxcbiAgICAgICAgdG9JZDogdGhpcy5fbmV4dEFjdGl2aXR5SWRcbiAgICB9O1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5yZW1vdmVGcm9tQ29udGV4dCA9IGZ1bmN0aW9uIChyZW1vdmVUb2tlbikge1xuICAgIHRoaXMuX2NoZWNrSW5pdCgpO1xuXG4gICAgaWYgKHJlbW92ZVRva2VuICYmIGlzLmRlZmluZWQocmVtb3ZlVG9rZW4uZnJvbUlkKSAmJiBpcy5kZWZpbmVkKHJlbW92ZVRva2VuLnRvSWQpKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUodGhpcy5fcm9vdEFjdGl2aXR5Lmluc3RhbmNlSWQpO1xuXG4gICAgICAgIGZvciAobGV0IGlkID0gcmVtb3ZlVG9rZW4uZnJvbUlkOyBpZCA8PSByZW1vdmVUb2tlbi50b0lkOyBpZCsrKSB7XG4gICAgICAgICAgICBsZXQgc2lkID0gaWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuX2tub3duQWN0aXZpdGllcy5kZWxldGUoc2lkKTtcbiAgICAgICAgICAgIHN0YXRlLmNoaWxkQWN0aXZpdHlJZHMuZGVsZXRlKHNpZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCAncmVtb3ZlVG9rZW4nIHZhbHVlIGlzIG5vdCBhIHZhbGlkIHJlbW92ZSB0b2tlbiBvYmplY3QuXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX25leHRBY3Rpdml0eUlkID0gcmVtb3ZlVG9rZW4uZnJvbUlkO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5fY2hlY2tJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5fcm9vdEFjdGl2aXR5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnRleHQgaXMgbm90IGluaXRpYWxpemVkLlwiKTtcbiAgICB9XG59O1xuXG5BY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQucHJvdG90eXBlLl9pbml0aWFsaXplID0gZnVuY3Rpb24gKHBhcmVudCwgYWN0aXZpdHksIGlkQ291bnRlcikge1xuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGlmIChhY3Rpdml0eS5pbnN0YW5jZUlkID09PSBudWxsKSB7XG4gICAgICAgIGFjdGl2aXR5Lmluc3RhbmNlSWQgPSAoaWRDb3VudGVyLmluc3RhbmNlSWQrKykudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYWN0aXZpdHkuaW5zdGFuY2VJZCAhPT0gKGlkQ291bnRlci5pbnN0YW5jZUlkKyspLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWN0aXZpdHkgXCIgKyBhY3Rpdml0eS5pbnN0YW5jZUlkICsgXCIgaGFzIGJlZW4gYXNzaWduZWQgdG8gYW4gb3RoZXIgY29udGV4dCBpbiBhIGRpZmZlcmVudCB0cmVlIHdoaWNoIGlzIG5vdCBhbGxvd2VkLlwiKTtcbiAgICB9XG5cbiAgICBzZWxmLl9uZXh0QWN0aXZpdHlJZCA9IGlkQ291bnRlci5pbnN0YW5jZUlkO1xuICAgIGxldCBzdGF0ZSA9IHNlbGYuZ2V0U3RhdGUoYWN0aXZpdHkuaW5zdGFuY2VJZCk7XG4gICAgc3RhdGUucGFyZW50QWN0aXZpdHlJZCA9IHBhcmVudCA/IHBhcmVudC5pbnN0YW5jZUlkIDogbnVsbDtcbiAgICBzZWxmLl9yZWdpc3Rlcktub3duQWN0aXZpdHkoYWN0aXZpdHkpO1xuXG4gICAgYWN0aXZpdHkuZm9yRWFjaEltbWVkaWF0ZUNoaWxkKFxuICAgICAgICBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHNlbGYuX2luaXRpYWxpemUoYWN0aXZpdHksIGNoaWxkLCBpZENvdW50ZXIpO1xuICAgICAgICAgICAgc3RhdGUuY2hpbGRBY3Rpdml0eUlkcy5hZGQoY2hpbGQuaW5zdGFuY2VJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMpO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBzdGF0ZSA9IHNlbGYuX2FjdGl2aXR5U3RhdGVzLmdldChpZCk7XG4gICAgaWYgKGlzLnVuZGVmaW5lZChzdGF0ZSkpIHtcbiAgICAgICAgc3RhdGUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25TdGF0ZShpZCk7XG4gICAgICAgIHN0YXRlLm9uKFxuICAgICAgICAgICAgZW51bXMuQWN0aXZpdHlTdGF0ZXMucnVuLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxldCBhY3Rpdml0eSA9IHNlbGYuX2tub3duQWN0aXZpdGllcy5nZXQoaWQpO1xuICAgICAgICAgICAgICAgIGlmICghYWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkgPSB7IGluc3RhbmNlSWQ6IGlkIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuZW1pdChlbnVtcy5BY3Rpdml0eVN0YXRlcy5ydW4sIGFjdGl2aXR5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBzdGF0ZS5vbihcbiAgICAgICAgICAgIGVudW1zLkFjdGl2aXR5U3RhdGVzLmVuZCxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChyZWFzb24sIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGxldCBhY3Rpdml0eSA9IHNlbGYuX2tub3duQWN0aXZpdGllcy5nZXQoaWQpO1xuICAgICAgICAgICAgICAgIGlmICghYWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkgPSB7IGluc3RhbmNlSWQ6IGlkIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuZW1pdChlbnVtcy5BY3Rpdml0eVN0YXRlcy5lbmQsIGFjdGl2aXR5LCByZWFzb24sIHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgc2VsZi5fYWN0aXZpdHlTdGF0ZXMuc2V0KGlkLCBzdGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTtcbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5wcm90b3R5cGUuX2dldEtub3duQWN0aXZpdHkgPSBmdW5jdGlvbiAoYWN0aXZpdHlJZCkge1xuICAgIGxldCBhY3Rpdml0eSA9IHRoaXMuX2tub3duQWN0aXZpdGllcy5nZXQoYWN0aXZpdHlJZCk7XG4gICAgaWYgKCFhY3Rpdml0eSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkFjdGl2aXR5UnVudGltZUVycm9yKFwiQWN0aXZpdHkgYnkgaWQgJ1wiICsgYWN0aXZpdHlJZCArIFwiJyBub3QgZm91bmQuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aXZpdHk7XG59O1xuXG5BY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUJvb2ttYXJrID0gZnVuY3Rpb24gKGFjdGl2aXR5SWQsIG5hbWUsIGVuZENhbGxiYWNrKSB7XG4gICAgdGhpcy5yZWdpc3RlckJvb2ttYXJrKFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgYWN0aXZpdHlJbnN0YW5jZUlkOiBhY3Rpdml0eUlkLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICAgIGVuZENhbGxiYWNrOiBlbmRDYWxsYmFja1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gbmFtZTtcbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5wcm90b3R5cGUucmVnaXN0ZXJCb29rbWFyayA9IGZ1bmN0aW9uIChib29rbWFyaykge1xuICAgIGxldCBibSA9IHRoaXMuX2Jvb2ttYXJrcy5nZXQoYm9va21hcmsubmFtZSk7XG4gICAgaWYgKGJtKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuQWN0aXZpdHlSdW50aW1lRXJyb3IoXCJCb29rbWFyayAnXCIgKyBib29rbWFyay5uYW1lICsgXCInIGFscmVhZHkgZXhpc3RzLlwiKTtcbiAgICB9XG4gICAgdGhpcy5fYm9va21hcmtzLnNldChib29rbWFyay5uYW1lLCBib29rbWFyayk7XG59O1xuXG5BY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQucHJvdG90eXBlLmlzQm9va21hcmtFeGlzdHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9ib29rbWFya3MuaGFzKG5hbWUpO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5nZXRCb29rbWFya1RpbWVzdGFtcCA9IGZ1bmN0aW9uIChuYW1lLCB0aHJvd0lmTm90Rm91bmQpIHtcbiAgICBsZXQgYm0gPSB0aGlzLl9ib29rbWFya3MuZ2V0KG5hbWUpO1xuICAgIGlmIChpcy51bmRlZmluZWQoYm0pICYmIHRocm93SWZOb3RGb3VuZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCb29rbWFyayAnXCIgKyBuYW1lICsgXCInIG5vdCBmb3VuZC5cIik7XG4gICAgfVxuICAgIHJldHVybiBibSA/IGJtLnRpbWVzdGFtcCA6IG51bGw7XG59O1xuXG5BY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQucHJvdG90eXBlLmRlbGV0ZUJvb2ttYXJrID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aGlzLl9ib29rbWFya3MuZGVsZXRlKG5hbWUpO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5ub29wQ2FsbGJhY2tzID0gZnVuY3Rpb24gKGJvb2ttYXJrTmFtZXMpIHtcbiAgICBmb3IgKGxldCBuYW1lIG9mIGJvb2ttYXJrTmFtZXMpIHtcbiAgICAgICAgbGV0IGJtID0gdGhpcy5fYm9va21hcmtzLmdldChuYW1lKTtcbiAgICAgICAgaWYgKGJtKSB7XG4gICAgICAgICAgICBibS5lbmRDYWxsYmFjayA9IF8ubm9vcDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5wcm90b3R5cGUucmVzdW1lQm9va21hcmtJblNjb3BlID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCBuYW1lLCByZWFzb24sIHJlc3VsdCkge1xuICAgIGxldCBibSA9IHRoaXMuX2Jvb2ttYXJrcy5nZXQobmFtZSk7XG4gICAgaWYgKGlzLnVuZGVmaW5lZChibSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQm9va21hcmsgJ1wiICsgbmFtZSArIFwiJyBkb2Vzbid0IGV4aXN0cy4gQ2Fubm90IGNvbnRpbnVlIHdpdGggcmVhc29uOiBcIiArIHJlYXNvbiArIFwiLlwiKTtcbiAgICB9XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHNldEltbWVkaWF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNlbGYuX2RvUmVzdW1lQm9va21hcmsoY2FsbENvbnRleHQsIGJtLCByZWFzb24sIHJlc3VsdCwgcmVhc29uID09PSBlbnVtcy5BY3Rpdml0eVN0YXRlcy5pZGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaChlKSB7XG4gICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKGUpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5BY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQucHJvdG90eXBlLnJlc3VtZUJvb2ttYXJrSW50ZXJuYWwgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIG5hbWUsIHJlYXNvbiwgcmVzdWx0KSB7XG4gICAgbGV0IGJtID0gdGhpcy5fYm9va21hcmtzLmdldChuYW1lKTtcbiAgICB0aGlzLl9yZXN1bWVCTVF1ZXVlLmVucXVldWUobmFtZSwgcmVhc29uLCByZXN1bHQpO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5yZXN1bWVCb29rbWFya0V4dGVybmFsID0gZnVuY3Rpb24gKG5hbWUsIHJlYXNvbiwgcmVzdWx0KSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBibSA9IHNlbGYuX2Jvb2ttYXJrcy5nZXQobmFtZSk7XG4gICAgaWYgKGlzLnVuZGVmaW5lZChibSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5BY3Rpdml0eVJ1bnRpbWVFcnJvcihcIkludGVybmFsIHJlc3VtZSBib29rbWFyayByZXF1ZXN0IGNhbm5vdCBiZSBwcm9jZXNzZWQgYmVjYXVzZSBib29rbWFyayAnXCIgKyBuYW1lICsgXCInIGRvZXNuJ3QgZXhpc3RzLlwiKTtcbiAgICB9XG4gICAgc2VsZi5fZG9SZXN1bWVCb29rbWFyayhuZXcgQ2FsbENvbnRleHQodGhpcywgYm0uYWN0aXZpdHlJbnN0YW5jZUlkKSwgYm0sIHJlYXNvbiwgcmVzdWx0KTtcbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5wcm90b3R5cGUucHJvY2Vzc1Jlc3VtZUJvb2ttYXJrUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBjb21tYW5kID0gc2VsZi5fcmVzdW1lQk1RdWV1ZS5kZXF1ZXVlKCk7XG4gICAgaWYgKGNvbW1hbmQpIHtcbiAgICAgICAgbGV0IGJtID0gc2VsZi5fYm9va21hcmtzLmdldChjb21tYW5kLm5hbWUpO1xuICAgICAgICBpZiAoaXMudW5kZWZpbmVkKGJtKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5BY3Rpdml0eVJ1bnRpbWVFcnJvcihcIkludGVybmFsIHJlc3VtZSBib29rbWFyayByZXF1ZXN0IGNhbm5vdCBiZSBwcm9jZXNzZWQgYmVjYXVzZSBib29rbWFyayAnXCIgKyBjb21tYW5kLm5hbWUgKyBcIicgZG9lc24ndCBleGlzdHMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuX2RvUmVzdW1lQm9va21hcmsobmV3IENhbGxDb250ZXh0KHRoaXMsIGJtLmFjdGl2aXR5SW5zdGFuY2VJZCksIGJtLCBjb21tYW5kLnJlYXNvbiwgY29tbWFuZC5yZXN1bHQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5fZG9SZXN1bWVCb29rbWFyayA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgYm9va21hcmssIHJlYXNvbiwgcmVzdWx0LCBub1JlbW92ZSkge1xuICAgIGxldCBzY29wZSA9IGNhbGxDb250ZXh0LnNjb3BlO1xuICAgIGlmICghbm9SZW1vdmUpIHtcbiAgICAgICAgdGhpcy5fYm9va21hcmtzLmRlbGV0ZShib29rbWFyay5uYW1lKTtcbiAgICB9XG4gICAgbGV0IGNiID0gYm9va21hcmsuZW5kQ2FsbGJhY2s7XG4gICAgaWYgKF8uaXNTdHJpbmcoY2IpKSB7XG4gICAgICAgIGNiID0gc2NvcGUuZ2V0KGJvb2ttYXJrLmVuZENhbGxiYWNrKTtcbiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oY2IpKSB7XG4gICAgICAgICAgICBjYiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNiKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuQWN0aXZpdHlSdW50aW1lRXJyb3IoXCJCb29rbWFyaydzICdcIiArIGJvb2ttYXJrLm5hbWUgKyBcIicgY2FsbGJhY2sgJ1wiICsgYm9va21hcmsuZW5kQ2FsbGJhY2sgKyBcIicgaXMgbm90IGRlZmluZWQgb24gdGhlIGN1cnJlbnQgc2NvcGUuXCIpO1xuICAgIH1cblxuICAgIGNiLmNhbGwoc2NvcGUsIGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCwgYm9va21hcmspO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5jYW5jZWxFeGVjdXRpb24gPSBmdW5jdGlvbiAoYWN0aXZpdHlJZHMpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGFsbElkcyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpZCBvZiBhY3Rpdml0eUlkcykge1xuICAgICAgICBzZWxmLl9jYW5jZWxTdWJ0cmVlKGFsbElkcywgaWQpO1xuICAgIH1cbiAgICBzZWxmLl9ib29rbWFya3MuZm9yRWFjaChmdW5jdGlvbiAoYm0pIHtcbiAgICAgICAgaWYgKGFsbElkcy5oYXMoYm0uYWN0aXZpdHlJbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgc2VsZi5fYm9va21hcmtzLmRlbGV0ZShibS5uYW1lKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5fY2FuY2VsU3VidHJlZSA9IGZ1bmN0aW9uIChhbGxJZHMsIGFjdGl2aXR5SWQpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgYWxsSWRzLmFkZChhY3Rpdml0eUlkKTtcbiAgICBsZXQgc3RhdGUgPSBzZWxmLmdldFN0YXRlKGFjdGl2aXR5SWQpO1xuICAgIHN0YXRlLmNoaWxkQWN0aXZpdHlJZHMuZm9yRWFjaChcbiAgICAgICAgZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICBzZWxmLl9jYW5jZWxTdWJ0cmVlKGFsbElkcywgaWQpO1xuICAgICAgICB9KTtcbiAgICBzdGF0ZS5yZXBvcnRTdGF0ZShlbnVtcy5BY3Rpdml0eVN0YXRlcy5jYW5jZWwpO1xufTtcblxuQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZS5kZWxldGVTY29wZU9mQWN0aXZpdHkgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIGFjdGl2aXR5SWQpIHtcbiAgICB0aGlzLl9zY29wZVRyZWUuZGVsZXRlU2NvcGVQYXJ0KGNhbGxDb250ZXh0LmFjdGl2aXR5SW5zdGFuY2VJZCwgYWN0aXZpdHlJZCk7XG59O1xuXG4vKiBTRVJJQUxJWkFUSU9OICovXG5cbmZ1bmN0aW9uIG1hcFRvSlNPTihtYXApIHtcbiAgICBpZiAoIW1hcCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IGpzb24gPSBbXTtcbiAgICBmb3IgKGxldCBrdnAgb2YgbWFwLmVudHJpZXMoKSkge1xuICAgICAgICBqc29uLnB1c2goa3ZwKTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG59XG5cbmZ1bmN0aW9uIGpzb25Ub01hcChqc29uKSB7XG4gICAgaWYgKCFqc29uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgbWFwID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IGt2cCBvZiBqc29uKSB7XG4gICAgICAgIG1hcC5zZXQoa3ZwWzBdLCBrdnBbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufVxuXG5BY3Rpdml0eUV4ZWN1dGlvbkNvbnRleHQucHJvdG90eXBlLmdldFN0YXRlQW5kUHJvbW90aW9ucyA9IGZ1bmN0aW9uIChzZXJpYWxpemVyLCBnZXRQcm9tb3Rpb25zKSB7XG4gICAgaWYgKHNlcmlhbGl6ZXIgJiYgIV8uaXNGdW5jdGlvbihzZXJpYWxpemVyLnRvSlNPTikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgJ3NlcmlhbGl6ZXInIGlzIG5vdCBhIHNlcmlhbGl6ZXIuXCIpO1xuICAgIH1cblxuICAgIGxldCBhY3Rpdml0eVN0YXRlcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9hY3Rpdml0eVN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIGFjdGl2aXR5U3RhdGVzLnNldChzLmFjdGl2aXR5SW5zdGFuY2VJZCwgcy5hc0pTT04oKSk7XG4gICAgfSk7XG5cbiAgICBsZXQgc2NvcGVTdGF0ZUFuZFByb21vdGlvbnMgPSB0aGlzLl9zY29wZVRyZWUuZ2V0U3RhdGUoZ2V0UHJvbW90aW9ucyk7XG5cbiAgICBsZXQgc2VyaWFsaXplZDtcbiAgICBpZiAoc2VyaWFsaXplcikge1xuICAgICAgICBzZXJpYWxpemVkID0gc2VyaWFsaXplci50b0pTT04oe1xuICAgICAgICAgICAgYWN0aXZpdHlTdGF0ZXM6IGFjdGl2aXR5U3RhdGVzLFxuICAgICAgICAgICAgYm9va21hcmtzOiB0aGlzLl9ib29rbWFya3MsXG4gICAgICAgICAgICBzY29wZTogc2NvcGVTdGF0ZUFuZFByb21vdGlvbnMuc3RhdGVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXJpYWxpemVkID0ge1xuICAgICAgICAgICAgYWN0aXZpdHlTdGF0ZXM6IG1hcFRvSlNPTihhY3Rpdml0eVN0YXRlcyksXG4gICAgICAgICAgICBib29rbWFya3M6IG1hcFRvSlNPTih0aGlzLl9ib29rbWFya3MpLFxuICAgICAgICAgICAgc2NvcGU6IHNjb3BlU3RhdGVBbmRQcm9tb3Rpb25zLnN0YXRlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGU6IHNlcmlhbGl6ZWQsXG4gICAgICAgIHByb21vdGVkUHJvcGVydGllczogc2NvcGVTdGF0ZUFuZFByb21vdGlvbnMucHJvbW90ZWRQcm9wZXJ0aWVzXG4gICAgfTtcbn07XG5cbkFjdGl2aXR5RXhlY3V0aW9uQ29udGV4dC5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc2VyaWFsaXplciwganNvbikge1xuICAgIGlmIChzZXJpYWxpemVyICYmICFfLmlzRnVuY3Rpb24oc2VyaWFsaXplci5mcm9tSlNPTikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgJ3NlcmlhbGl6ZXInIGlzIG5vdCBhIHNlcmlhbGl6ZXIuXCIpO1xuICAgIH1cbiAgICBpZiAoIV8uaXNPYmplY3QoanNvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50ICdqc29uJyBpcyBub3QgYW4gb2JqZWN0LlwiKTtcbiAgICB9XG5cbiAgICBpZiAoc2VyaWFsaXplcikge1xuICAgICAgICBqc29uID0gc2VyaWFsaXplci5mcm9tSlNPTihqc29uKTtcbiAgICAgICAgaWYgKCEoanNvbi5hY3Rpdml0eVN0YXRlcyBpbnN0YW5jZW9mIE1hcCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBY3Rpdml0eVN0YXRlcyBwcm9wZXJ0eSB2YWx1ZSBvZiBhcmd1bWVudCAnanNvbicgaXMgbm90IGFuIE1hcCBpbnN0YW5jZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoanNvbi5ib29rbWFya3MgaW5zdGFuY2VvZiBNYXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9va21hcmtzIHByb3BlcnR5IHZhbHVlIG9mIGFyZ3VtZW50ICdqc29uJyBpcyBub3QgYW4gTWFwIGluc3RhbmNlLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFqc29uLmFjdGl2aXR5U3RhdGVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQWN0aXZpdHlTdGF0ZXMgcHJvcGVydHkgdmFsdWUgb2YgYXJndW1lbnQgJ2pzb24nIGlzIG5vdCBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghanNvbi5ib29rbWFya3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJCb29rbWFya3MgcHJvcGVydHkgdmFsdWUgb2YgYXJndW1lbnQgJ2pzb24nIGlzIG5vdCBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAganNvbiA9IHtcbiAgICAgICAgICAgIGFjdGl2aXR5U3RhdGVzOiBqc29uVG9NYXAoanNvbi5hY3Rpdml0eVN0YXRlcyksXG4gICAgICAgICAgICBib29rbWFya3M6IGpzb25Ub01hcChqc29uLmJvb2ttYXJrcyksXG4gICAgICAgICAgICBzY29wZToganNvbi5zY29wZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuX2FjdGl2aXR5U3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgbGV0IHN0b3JlZCA9IGpzb24uYWN0aXZpdHlTdGF0ZXMuZ2V0KHMuYWN0aXZpdHlJbnN0YW5jZUlkKTtcbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQoc3RvcmVkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWN0aXZpdHkncyBvZiAnXCIgKyBzLmFjdGl2aXR5SW5zdGFuY2VJZCArIFwiJyBzdGF0ZSBub3QgZm91bmQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHMuZnJvbUpTT04oc3RvcmVkKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2Jvb2ttYXJrcyA9IGpzb24uYm9va21hcmtzO1xuICAgIHRoaXMuX3Njb3BlVHJlZS5zZXRTdGF0ZShqc29uLnNjb3BlKTtcbn07XG4vKiBTRVJJQUxJWkFUSU9OICovXG5cbm1vZHVsZS5leHBvcnRzID0gQWN0aXZpdHlFeGVjdXRpb25Db250ZXh0OyJdfQ==
