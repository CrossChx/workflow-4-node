{"version":3,"names":[],"mappings":"","sources":["activities/activityExecutionEngine.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet ActivityExecutionContext = require(\"./activityExecutionContext\");\r\nlet ActivityExecutionState = require(\"./activityExecutionState\");\r\nlet CallContext = require(\"./callContext\");\r\nlet EventEmitter = require('events').EventEmitter;\r\nlet util = require(\"util\");\r\nlet errors = require(\"../common/errors\");\r\nlet _ = require(\"lodash\");\r\nlet ActivityStateTracker = require(\"./activityStateTracker\");\r\nlet enums = require(\"../common/enums\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet asyncHelpers = require(\"../common/asyncHelpers\");\r\nlet async = asyncHelpers.async;\r\nlet activityMarkup = require(\"./activityMarkup\");\r\n\r\nfunction ActivityExecutionEngine(contextOrActivity, instance) {\r\n    EventEmitter.call(this);\r\n    \r\n    if (contextOrActivity instanceof Activity) {\r\n        this.rootActivity = contextOrActivity;\r\n        this.context = new ActivityExecutionContext(this);\r\n        this._isInitialized = false;\r\n    }\r\n    else if (contextOrActivity instanceof ActivityExecutionContext) {\r\n        this.rootActivity = contextOrActivity.rootActivity;\r\n        this.context = contextOrActivity;\r\n        this.context.engine = this;\r\n        this._isInitialized = true;\r\n    }\r\n    else if (_.isPlainObject(contextOrActivity)) {\r\n        this.rootActivity = activityMarkup.parse(contextOrActivity);\r\n        this.context = new ActivityExecutionContext(this);\r\n        this._isInitialized = false;\r\n    }\r\n    else {\r\n        throw new TypeError(\"Argument 'contextOrActivity' is not an activity, context or a markup.\");\r\n    }\r\n    \r\n    this._rootState = null;\r\n    this._trackers = [];\r\n    this._hookContext();\r\n    this.updatedOn = null;\r\n    this.instance = instance || null;\r\n}\r\n\r\nutil.inherits(ActivityExecutionEngine, EventEmitter);\r\n\r\nObject.defineProperties(ActivityExecutionEngine.prototype, {\r\n    execState: {\r\n        get: function () {\r\n            if (this._rootState) {\r\n                return this._rootState.execState;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    },\r\n    version: {\r\n        get: function () {\r\n            return this.rootActivity.version;\r\n        }\r\n    }\r\n});\r\n\r\nActivityExecutionEngine.prototype._idle = {\r\n    toString: function () {\r\n        return enums.activityStates.idle;\r\n    }\r\n};\r\n\r\nActivityExecutionEngine.prototype.isIdle = function (result) {\r\n    return result === this._idle;\r\n};\r\n\r\nActivityExecutionEngine.prototype._initialize = function () {\r\n    if (!this._isInitialized) {\r\n        this.context.initialize(this.rootActivity);\r\n        this._isInitialized = true;\r\n    }\r\n};\r\n\r\nActivityExecutionEngine.prototype._setRootState = function (state) {\r\n    let self = this;\r\n    if (!self._rootState) {\r\n        self._rootState = state;\r\n        self._rootState.on(\r\n            Activity.states.cancel, function (args) {\r\n                self.emit(Activity.states.cancel, args);\r\n            });\r\n        self._rootState.on(\r\n            Activity.states.complete, function (args) {\r\n                self.emit(Activity.states.complete, args);\r\n            });\r\n        self._rootState.on(\r\n            Activity.states.end, function (args) {\r\n                self.updatedOn = new Date();\r\n                self.emit(Activity.states.end, args);\r\n            });\r\n        self._rootState.on(\r\n            Activity.states.fail, function (args) {\r\n                self.emit(Activity.states.fail, args);\r\n            });\r\n        self._rootState.on(\r\n            Activity.states.run, function (args) {\r\n                self.emit(Activity.states.run, args);\r\n            });\r\n        self._rootState.on(\r\n            Activity.states.idle, function (args) {\r\n                self.emit(Activity.states.idle, args);\r\n            });\r\n    }\r\n};\r\n\r\nActivityExecutionEngine.prototype._hookContext = function () {\r\n    let self = this;\r\n    self.context.on(\r\n        Activity.states.run,\r\n        function (args) {\r\n            for (let t of self._trackers) {\r\n                t.activityStateChanged(args);\r\n            }\r\n        });\r\n    self.context.on(\r\n        Activity.states.end,\r\n        function (args) {\r\n            for (let t of self._trackers) {\r\n                t.activityStateChanged(args);\r\n            }\r\n        });\r\n    self.context.on(\r\n        enums.events.workflowEvent,\r\n        function(args) {\r\n            self.emit(enums.events.workflowEvent, args);\r\n        }\r\n    );\r\n};\r\n\r\nActivityExecutionEngine.prototype.addTracker = function (tracker) {\r\n    if (!_.isObject(tracker)) {\r\n        throw new TypeError(\"Parameter is not an object.\");\r\n    }\r\n    this._trackers.push(new ActivityStateTracker(tracker));\r\n};\r\n\r\nActivityExecutionEngine.prototype.removeTracker = function (tracker) {\r\n    let idx = -1;\r\n    for (let i = 0; i < this._trackers.length; i++) {\r\n        let t = this._trackers[i];\r\n        if (t._impl === tracker) {\r\n            idx = i;\r\n            break;\r\n        }\r\n    }\r\n    if (idx !== -1) {\r\n        this._trackers.splice(idx, 1);\r\n    }\r\n};\r\n\r\nActivityExecutionEngine.prototype.start = async(function* () {\r\n    this._verifyNotStarted();\r\n\r\n    this._initialize();\r\n\r\n    let args = [new CallContext(this.context)];\r\n    for (let a of arguments) {\r\n        args.push(a);\r\n    }\r\n\r\n    this._setRootState(yield this.rootActivity.start.apply(this.rootActivity, args));\r\n});\r\n\r\nActivityExecutionEngine.prototype.invoke = function () {\r\n    let self = this;\r\n\r\n    self._verifyNotStarted();\r\n\r\n    self._initialize();\r\n\r\n    let args = [];\r\n    for (let a of arguments) {\r\n        args.push(a);\r\n    }\r\n\r\n    args.unshift(new CallContext(self.context));\r\n\r\n    return new Bluebird(function (resolve, reject) {\r\n        try {\r\n            self._setRootState(self.context.getExecutionState(self.rootActivity));\r\n            self.once(\r\n                Activity.states.end, function (eArgs) {\r\n                    let reason = eArgs.reason;\r\n                    let result = eArgs.result;\r\n                    switch (reason) {\r\n                        case Activity.states.complete:\r\n                            resolve(result);\r\n                            break;\r\n                        case Activity.states.cancel:\r\n                            reject(new errors.Cancelled());\r\n                            break;\r\n                        case Activity.states.idle:\r\n                            resolve(self._idle);\r\n                            break;\r\n                        default :\r\n                            result = result || new errors.ActivityRuntimeError(\"Unknown error.\");\r\n                            reject(result);\r\n                            break;\r\n                    }\r\n                });\r\n\r\n            self.rootActivity.start.apply(self.rootActivity, args);\r\n        }\r\n        catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n};\r\n\r\nActivityExecutionEngine.prototype._verifyNotStarted = function () {\r\n    if (!(!this.execState || this.execState === enums.activityStates.complete)) {\r\n        throw new errors.ActivityStateExceptionError(\"Workflow has been already started.\");\r\n    }\r\n};\r\n\r\nActivityExecutionEngine.prototype.resumeBookmark = function (name, reason, result) {\r\n    let self = this;\r\n    self._initialize();\r\n    return new Bluebird(function (resolve, reject) {\r\n        try {\r\n            self._setRootState(self.context.getExecutionState(self.rootActivity));\r\n\r\n            if (self.execState === enums.activityStates.idle) {\r\n                let bmTimestamp = self.context.getBookmarkTimestamp(name);\r\n                self.once(\r\n                    Activity.states.end,\r\n                    function (args) {\r\n                        let _reason = args.reason;\r\n                        let _result = args.result;\r\n                        try {\r\n                            if (_reason === enums.activityStates.complete || _reason === enums.activityStates.idle) {\r\n                                let endBmTimestamp = self.context.getBookmarkTimestamp(name);\r\n                                if (endBmTimestamp && endBmTimestamp === bmTimestamp) {\r\n                                    if (_reason === enums.activityStates.complete) {\r\n                                        reject(new errors.ActivityRuntimeError(\"Workflow has been completed before bookmark '\" + name + \"' reached.\"));\r\n                                    }\r\n                                    else {\r\n                                        reject(new errors.Idle(\"Workflow has been gone to idle before bookmark '\" + name + \"' reached.\"));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    resolve();\r\n                                }\r\n                            }\r\n                            else if (_reason === enums.activityStates.cancel) {\r\n                                reject(new errors.ActivityRuntimeError(\"Workflow has been cancelled before bookmark '\" + name + \"' reached.\"));\r\n                            }\r\n                            else if (_reason === enums.activityStates.fail) {\r\n                                reject(_result);\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    });\r\n                self.context.resumeBookmarkExternal(name, reason, result);\r\n            }\r\n            else {\r\n                reject(new errors.ActivityRuntimeError(\"Cannot resume bookmark, while the workflow is not in the idle state.\"));\r\n            }\r\n        }\r\n        catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n};\r\n\r\n/* SERIALIZATION */\r\nActivityExecutionEngine.prototype.getStateAndPromotions = function (serializer, enablePromotions) {\r\n    if (serializer && !_.isObject(serializer)) {\r\n        throw new Error(\"Argument 'serializer' is not an object.\");\r\n    }\r\n\r\n    this._initialize();\r\n    return this.context.getStateAndPromotions(serializer, enablePromotions);\r\n};\r\n\r\nActivityExecutionEngine.prototype.setState = function (serializer, json) {\r\n    if (serializer && !_.isObject(serializer)) {\r\n        throw new Error(\"Argument 'serializer' is not an object.\");\r\n    }\r\n    if (!_.isObject(json)) {\r\n        throw new TypeError(\"Argument 'json' is not an object.\");\r\n    }\r\n\r\n    this._initialize();\r\n    this.updatedOn = new Date();\r\n    this.context.setState(serializer, json);\r\n};\r\n/* SERIALIZATION */\r\n\r\nmodule.exports = ActivityExecutionEngine;"],"file":"activities/activityExecutionEngine.js","sourceRoot":"/source/"}