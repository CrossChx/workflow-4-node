{"version":3,"names":[],"mappings":"","sources":["activities/activityExecutionEngine.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet ActivityExecutionContext = require(\"./activityExecutionContext\");\nlet ActivityExecutionState = require(\"./activityExecutionState\");\nlet CallContext = require(\"./callContext\");\nlet EventEmitter = require('events').EventEmitter;\nlet util = require(\"util\");\nlet errors = require(\"../common/errors\");\nlet _ = require(\"lodash\");\nlet ActivityStateTracker = require(\"./activityStateTracker\");\nlet enums = require(\"../common/enums\");\nlet Bluebird = require(\"bluebird\");\nlet asyncHelpers = require(\"../common/asyncHelpers\");\nlet async = asyncHelpers.async;\nlet activityMarkup = require(\"./activityMarkup\");\n\nfunction ActivityExecutionEngine(rootActivity, instance) {\n    EventEmitter.call(this);\n\n    if (!(rootActivity instanceof Activity)) {\n        if (_.isPlainObject(rootActivity)) {\n            rootActivity = activityMarkup.parse(rootActivity);\n        }\n        else {\n            throw new TypeError(\"Argument 'rootActivity' is not an activity or a markup.\");\n        }\n    }\n    this.rootActivity = rootActivity;\n    this._context = new ActivityExecutionContext(this);\n    this._isInitialized = false;\n    this._rootState = null;\n    this._trackers = [];\n    this._hookContext();\n    this._timestamp = null;\n    this.instance = instance || null;\n}\n\nutil.inherits(ActivityExecutionEngine, EventEmitter);\n\nObject.defineProperties(ActivityExecutionEngine.prototype, {\n    execState: {\n        get: function () {\n            if (this._rootState) {\n                return this._rootState.execState;\n            }\n            else {\n                return null;\n            }\n        }\n    },\n    version: {\n        get: function () {\n            return this.rootActivity.version;\n        }\n    },\n    updatedOn: {\n        get: function () {\n            return this._timestamp;\n        }\n    }\n});\n\nActivityExecutionEngine.prototype._idle = {\n    toString: function () {\n        return enums.activityStates.idle;\n    }\n};\n\nActivityExecutionEngine.prototype.isIdle = function (result) {\n    return result === this._idle;\n};\n\nActivityExecutionEngine.prototype._initialize = function () {\n    if (!this._isInitialized) {\n        this._context.initialize(this.rootActivity);\n        this._isInitialized = true;\n    }\n};\n\nActivityExecutionEngine.prototype._setRootState = function (state) {\n    let self = this;\n    if (!self._rootState) {\n        self._rootState = state;\n        self._rootState.on(\n            Activity.states.cancel, function (args) {\n                self.emit(Activity.states.cancel, args);\n            });\n        self._rootState.on(\n            Activity.states.complete, function (args) {\n                self.emit(Activity.states.complete, args);\n            });\n        self._rootState.on(\n            Activity.states.end, function (args) {\n                self._timestamp = new Date();\n                self.emit(Activity.states.end, args);\n            });\n        self._rootState.on(\n            Activity.states.fail, function (args) {\n                self.emit(Activity.states.fail, args);\n            });\n        self._rootState.on(\n            Activity.states.run, function (args) {\n                self.emit(Activity.states.run, args);\n            });\n        self._rootState.on(\n            Activity.states.idle, function (args) {\n                self.emit(Activity.states.idle, args);\n            });\n    }\n};\n\nActivityExecutionEngine.prototype._hookContext = function () {\n    let self = this;\n    self._context.on(\n        Activity.states.run,\n        function (args) {\n            for (let t of self._trackers) {\n                t.activityStateChanged(args);\n            }\n        });\n    self._context.on(\n        Activity.states.end,\n        function (args) {\n            for (let t of self._trackers) {\n                t.activityStateChanged(args);\n            }\n        });\n    self._context.on(\n        enums.events.workflowEvent,\n        function(args) {\n            self.emit(enums.events.workflowEvent, args);\n        }\n    );\n};\n\nActivityExecutionEngine.prototype.addTracker = function (tracker) {\n    if (!_.isObject(tracker)) {\n        throw new TypeError(\"Parameter is not an object.\");\n    }\n    this._trackers.push(new ActivityStateTracker(tracker));\n};\n\nActivityExecutionEngine.prototype.removeTracker = function (tracker) {\n    let idx = -1;\n    for (let i = 0; i < this._trackers.length; i++) {\n        let t = this._trackers[i];\n        if (t._impl === tracker) {\n            idx = i;\n            break;\n        }\n    }\n    if (idx !== -1) {\n        this._trackers.splice(idx, 1);\n    }\n};\n\nActivityExecutionEngine.prototype.start = async(function* () {\n    this._verifyNotStarted();\n\n    this._initialize();\n\n    let args = [new CallContext(this._context)];\n    for (let a of arguments) {\n        args.push(a);\n    }\n\n    this._setRootState(yield this.rootActivity.start.apply(this.rootActivity, args));\n});\n\nActivityExecutionEngine.prototype.invoke = function () {\n    let self = this;\n\n    self._verifyNotStarted();\n\n    self._initialize();\n\n    let argRemoveToken = null;\n    let args = [];\n    for (let a of arguments) {\n        args.push(a);\n    }\n\n    if (args.length) {\n        argRemoveToken = self._context.appendToContext(args);\n    }\n\n    args.unshift(new CallContext(self._context));\n\n    return new Bluebird(function (resolve, reject) {\n        try {\n            self._setRootState(self._context.getExecutionState(self.rootActivity));\n            self.once(\n                Activity.states.end, function (eArgs) {\n                    let reason = eArgs.reason;\n                    let result = eArgs.result;\n                    try {\n                        switch (reason) {\n                            case Activity.states.complete:\n                                resolve(result);\n                                break;\n                            case Activity.states.cancel:\n                                reject(new errors.Cancelled());\n                                break;\n                            case Activity.states.idle:\n                                resolve(self._idle);\n                                break;\n                            default :\n                                result = result || new errors.ActivityRuntimeError(\"Unknown error.\");\n                                reject(result);\n                                break;\n                        }\n                    }\n                    finally {\n                        if (argRemoveToken) {\n                            self._context.removeFromContext(argRemoveToken);\n                            argRemoveToken = null;\n                        }\n                    }\n                });\n\n            self.rootActivity.start.apply(self.rootActivity, args);\n        }\n        catch (e) {\n            reject(e);\n\n            if (argRemoveToken) {\n                self._context.removeFromContext(argRemoveToken);\n                argRemoveToken = null;\n            }\n        }\n    });\n};\n\nActivityExecutionEngine.prototype._verifyNotStarted = function () {\n    if (!(!this.execState || this.execState === enums.activityStates.complete)) {\n        throw new errors.ActivityStateExceptionError(\"Workflow has been already started.\");\n    }\n};\n\nActivityExecutionEngine.prototype.resumeBookmark = function (name, reason, result) {\n    let self = this;\n    self._initialize();\n    return new Bluebird(function (resolve, reject) {\n        try {\n            self._setRootState(self._context.getExecutionState(self.rootActivity));\n\n            if (self.execState === enums.activityStates.idle) {\n                let bmTimestamp = self._context.getBookmarkTimestamp(name);\n                self.once(\n                    Activity.states.end,\n                    function (args) {\n                        let _reason = args.reason;\n                        let _result = args.result;\n                        try {\n                            if (_reason === enums.activityStates.complete || _reason === enums.activityStates.idle) {\n                                let endBmTimestamp = self._context.getBookmarkTimestamp(name);\n                                if (endBmTimestamp && endBmTimestamp === bmTimestamp) {\n                                    if (_reason === enums.activityStates.complete) {\n                                        reject(new errors.ActivityRuntimeError(\"Workflow has been completed before bookmark '\" + name + \"' reached.\"));\n                                    }\n                                    else {\n                                        reject(new errors.Idle(\"Workflow has been gone to idle before bookmark '\" + name + \"' reached.\"));\n                                    }\n                                }\n                                else {\n                                    resolve();\n                                }\n                            }\n                            else if (_reason === enums.activityStates.cancel) {\n                                reject(new errors.ActivityRuntimeError(\"Workflow has been cancelled before bookmark '\" + name + \"' reached.\"));\n                            }\n                            else if (_reason === enums.activityStates.fail) {\n                                reject(_result);\n                            }\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                    });\n                self._context.resumeBookmarkExternal(name, reason, result);\n            }\n            else {\n                reject(new errors.ActivityRuntimeError(\"Cannot resume bookmark, while the workflow is not in the idle state.\"));\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n};\n\n/* SERIALIZATION */\nActivityExecutionEngine.prototype.getStateAndPromotions = function (serializer, enablePromotions) {\n    if (serializer && !_.isObject(serializer)) {\n        throw new Error(\"Argument 'serializer' is not an object.\");\n    }\n\n    this._initialize();\n    return this._context.getStateAndPromotions(serializer, enablePromotions);\n};\n\nActivityExecutionEngine.prototype.setState = function (serializer, json) {\n    if (serializer && !_.isObject(serializer)) {\n        throw new Error(\"Argument 'serializer' is not an object.\");\n    }\n    if (!_.isObject(json)) {\n        throw new TypeError(\"Argument 'json' is not an object.\");\n    }\n\n    this._initialize();\n    this._timestamp = new Date();\n    this._context.setState(serializer, json);\n};\n/* SERIALIZATION */\n\nmodule.exports = ActivityExecutionEngine;"],"file":"activities/activityExecutionEngine.js","sourceRoot":"/source/"}