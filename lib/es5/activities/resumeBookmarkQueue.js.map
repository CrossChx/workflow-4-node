{"version":3,"names":[],"mappings":"","sources":["activities/resumeBookmarkQueue.js"],"sourcesContent":["\"use strict\";\n\nlet errors = require(\"../common/errors\");\n\nfunction ResumeBookmarkQueue() {\n    this._names = new Set();\n    this._commands = [];\n}\n\nResumeBookmarkQueue.prototype.isEmpty = function () {\n    return this._commands.length === 0;\n};\n\nResumeBookmarkQueue.prototype.enqueue = function (bookmarkName, reason, result) {\n    if (!this._names.has(bookmarkName)) {\n        this._names.add(bookmarkName);\n        this._commands.push(\n            {\n                name: bookmarkName,\n                reason: reason,\n                result: result\n            });\n    }\n    else {\n        throw new errors.ActivityRuntimeError(\"The '\" + bookmarkName + \"' bookmark continuation already enqueued.\");\n    }\n};\n\nResumeBookmarkQueue.prototype.dequeue = function () {\n    if (this._commands.length) {\n        let command = this._commands[0];\n        this._commands.splice(0, 1);\n        this._names.delete(command.name);\n        return command;\n    }\n    return null;\n};\n\nResumeBookmarkQueue.prototype.remove = function (bookmarkName) {\n    if (this._names.has(bookmarkName)) {\n        let idx = -1;\n        for (let i = 0; i < this._commands.length; i++) {\n            let command = this._commands[i];\n            if (command.name === bookmarkName) {\n                idx = i;\n                break;\n            }\n        }\n        if (idx !== -1) {\n            this._commands.splice(idx, 1);\n        }\n        this._names.delete(bookmarkName);\n    }\n};\n\nmodule.exports = ResumeBookmarkQueue;\n"],"file":"activities/resumeBookmarkQueue.js","sourceRoot":"/source/"}