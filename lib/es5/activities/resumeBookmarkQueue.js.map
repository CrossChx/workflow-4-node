{"version":3,"names":[],"mappings":"","sources":["activities/resumeBookmarkQueue.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet errors = require(\"../common/errors\");\r\n\r\nfunction ResumeBookmarkQueue() {\r\n    this._names = new Set();\r\n    this._commands = [];\r\n}\r\n\r\nResumeBookmarkQueue.prototype.isEmpty = function () {\r\n    return this._commands.length === 0;\r\n};\r\n\r\nResumeBookmarkQueue.prototype.enqueue = function (bookmarkName, reason, result) {\r\n    if (!this._names.has(bookmarkName)) {\r\n        this._names.add(bookmarkName);\r\n        this._commands.push(\r\n            {\r\n                name: bookmarkName,\r\n                reason: reason,\r\n                result: result\r\n            });\r\n    }\r\n    else {\r\n        throw new errors.ActivityRuntimeError(\"The '\" + bookmarkName + \"' bookmark continuation already enqueued.\");\r\n    }\r\n};\r\n\r\nResumeBookmarkQueue.prototype.dequeue = function () {\r\n    if (this._commands.length) {\r\n        let command = this._commands[0];\r\n        this._commands.splice(0, 1);\r\n        this._names.delete(command.name);\r\n        return command;\r\n    }\r\n    return null;\r\n};\r\n\r\nResumeBookmarkQueue.prototype.remove = function (bookmarkName) {\r\n    if (this._names.has(bookmarkName)) {\r\n        let idx = -1;\r\n        for (let i = 0; i < this._commands.length; i++) {\r\n            let command = this._commands[i];\r\n            if (command.name === bookmarkName) {\r\n                idx = i;\r\n                break;\r\n            }\r\n        }\r\n        if (idx !== -1) {\r\n            this._commands.splice(idx, 1);\r\n        }\r\n        this._names.delete(bookmarkName);\r\n    }\r\n};\r\n\r\nmodule.exports = ResumeBookmarkQueue;\r\n"],"file":"activities/resumeBookmarkQueue.js","sourceRoot":"/source/"}