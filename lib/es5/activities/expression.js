"use strict";
var Activity = require("./activity");
var util = require("util");
var _ = require("lodash");
function Expression(expr) {
  Activity.call(this);
  this.expr = expr || null;
  this.nonSerializedProperties.add("_f");
}
util.inherits(Expression, Activity);
Expression.prototype.run = function(callContext, args) {
  var self = this;
  var expr = self.expr;
  if (expr) {
    try {
      var f = self._f;
      if (!f) {
        f = self._f = new Function("_", "return (" + expr + ")");
      }
      callContext.complete(f.call(self, _));
    } catch (e) {
      callContext.fail(e);
    }
  } else {
    callContext.complete(null);
  }
};
module.exports = Expression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cHJlc3Npb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7QUFFQSxBQUFJLEVBQUEsQ0FBQSxRQUFPLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxZQUFXLENBQUMsQ0FBQztBQUNwQyxBQUFJLEVBQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUMxQixBQUFJLEVBQUEsQ0FBQSxDQUFBLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUV6QixPQUFTLFdBQVMsQ0FBRSxJQUFHLENBQUc7QUFDdEIsU0FBTyxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUNuQixLQUFHLEtBQUssRUFBSSxDQUFBLElBQUcsR0FBSyxLQUFHLENBQUM7QUFDeEIsS0FBRyx3QkFBd0IsSUFBSSxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7QUFDMUM7QUFBQSxBQUVBLEdBQUcsU0FBUyxBQUFDLENBQUMsVUFBUyxDQUFHLFNBQU8sQ0FBQyxDQUFDO0FBRW5DLFNBQVMsVUFBVSxJQUFJLEVBQUksVUFBVSxXQUFVLENBQUcsQ0FBQSxJQUFHLENBQUc7QUFDcEQsQUFBSSxJQUFBLENBQUEsSUFBRyxFQUFJLEtBQUcsQ0FBQztBQUNmLEFBQUksSUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLElBQUcsS0FBSyxDQUFDO0FBQ3BCLEtBQUksSUFBRyxDQUFHO0FBQ04sTUFBSTtBQUNBLEFBQUksUUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLElBQUcsR0FBRyxDQUFDO0FBQ2YsU0FBSSxDQUFDLENBQUEsQ0FBRztBQUNKLFFBQUEsRUFBSSxDQUFBLElBQUcsR0FBRyxFQUFJLElBQUksU0FBTyxBQUFDLENBQUMsR0FBRSxDQUFHLENBQUEsVUFBUyxFQUFJLEtBQUcsQ0FBQSxDQUFJLElBQUUsQ0FBQyxDQUFDO01BQzVEO0FBQUEsQUFDQSxnQkFBVSxTQUFTLEFBQUMsQ0FBQyxDQUFBLEtBQUssQUFBQyxDQUFDLElBQUcsQ0FBRyxFQUFBLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQ0EsT0FBTSxDQUFBLENBQUc7QUFDTCxnQkFBVSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUN2QjtBQUFBLEVBQ0osS0FDSztBQUNELGNBQVUsU0FBUyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7RUFDOUI7QUFBQSxBQUNKLENBQUM7QUFFRCxLQUFLLFFBQVEsRUFBSSxXQUFTLENBQUM7QUFDM0IiLCJmaWxlIjoiYWN0aXZpdGllcy9leHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBqc2hpbnQgLVcwNTQqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBBY3Rpdml0eSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5XCIpO1xubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcblxuZnVuY3Rpb24gRXhwcmVzc2lvbihleHByKSB7XG4gICAgQWN0aXZpdHkuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmV4cHIgPSBleHByIHx8IG51bGw7XG4gICAgdGhpcy5ub25TZXJpYWxpemVkUHJvcGVydGllcy5hZGQoXCJfZlwiKTtcbn1cblxudXRpbC5pbmhlcml0cyhFeHByZXNzaW9uLCBBY3Rpdml0eSk7XG5cbkV4cHJlc3Npb24ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgYXJncykge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgZXhwciA9IHNlbGYuZXhwcjtcbiAgICBpZiAoZXhwcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGYgPSBzZWxmLl9mO1xuICAgICAgICAgICAgaWYgKCFmKSB7XG4gICAgICAgICAgICAgICAgZiA9IHNlbGYuX2YgPSBuZXcgRnVuY3Rpb24oXCJfXCIsIFwicmV0dXJuIChcIiArIGV4cHIgKyBcIilcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZShmLmNhbGwoc2VsZiwgXykpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKG51bGwpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhwcmVzc2lvbjtcbiJdfQ==
