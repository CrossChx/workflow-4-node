"use strict";
var Activity = require("./activity");
var util = require("util");
var _ = require("lodash");
var activityMarkup = require("./activityMarkup");
var is = require("../common/is");
var templateHelpers = require("./templateHelpers");
var guids = require("../common/guids");
function Template() {
  Activity.call(this);
  this.declare = null;
  this.nonScopedProperties.add("_visitActivities");
  this.nonScopedProperties.add("_getInternalActivities");
}
util.inherits(Template, Activity);
Template.prototype.initializeStructure = function(execContext) {
  var self = this;
  var require = execContext.rootActivity["@require"];
  self.args = [];
  templateHelpers.visitActivities(self.declare, function(markup, parent, key) {
    if (require) {
      markup = _.cloneDeep(markup);
      markup["@require"] = require;
    }
    self.args.push(activityMarkup.parse(markup));
  });
};
Template.prototype.run = function(callContext, args) {
  if (_.isArray(args)) {
    callContext.schedule(args, "_activitiesGot");
  } else {
    callContext.complete();
  }
};
Template.prototype._activitiesGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    if (_.isArray(result) && result.length) {
      var idx = 0;
      var declare = _.cloneDeep(this.declare);
      var setupTasks = [];
      templateHelpers.visitActivities(declare, function(markup, parent, key) {
        setupTasks.push(function() {
          parent[key] = result[idx++];
        });
      });
      var $__3 = true;
      var $__4 = false;
      var $__5 = undefined;
      try {
        for (var $__1 = void 0,
            $__0 = (setupTasks)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
          var t = $__1.value;
          {
            t();
          }
        }
      } catch ($__6) {
        $__4 = true;
        $__5 = $__6;
      } finally {
        try {
          if (!$__3 && $__0.return != null) {
            $__0.return();
          }
        } finally {
          if ($__4) {
            throw $__5;
          }
        }
      }
      callContext.complete(declare);
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Template;
//# sourceMappingURL=data:application/json;base64,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QXVDSSxnQkFBVSxTQUFTLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQztJQUNqQztBQUFBLEVBQ0osS0FDSztBQUNELGNBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0VBQ25DO0FBQUEsQUFDSixDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksU0FBTyxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy90ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBBY3Rpdml0eSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5XCIpO1xubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmxldCBhY3Rpdml0eU1hcmt1cCA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5TWFya3VwXCIpO1xubGV0IGlzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pc1wiKTtcbmxldCB0ZW1wbGF0ZUhlbHBlcnMgPSByZXF1aXJlKFwiLi90ZW1wbGF0ZUhlbHBlcnNcIik7XG5sZXQgZ3VpZHMgPSByZXF1aXJlKFwiLi4vY29tbW9uL2d1aWRzXCIpO1xuXG5mdW5jdGlvbiBUZW1wbGF0ZSgpIHtcbiAgICBBY3Rpdml0eS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5kZWNsYXJlID0gbnVsbDtcblxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJfdmlzaXRBY3Rpdml0aWVzXCIpO1xuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJfZ2V0SW50ZXJuYWxBY3Rpdml0aWVzXCIpO1xufVxuXG51dGlsLmluaGVyaXRzKFRlbXBsYXRlLCBBY3Rpdml0eSk7XG5cblRlbXBsYXRlLnByb3RvdHlwZS5pbml0aWFsaXplU3RydWN0dXJlID0gZnVuY3Rpb24oZXhlY0NvbnRleHQpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IHJlcXVpcmUgPSBleGVjQ29udGV4dC5yb290QWN0aXZpdHlbXCJAcmVxdWlyZVwiXTtcbiAgICBzZWxmLmFyZ3MgPSBbXTtcbiAgICB0ZW1wbGF0ZUhlbHBlcnMudmlzaXRBY3Rpdml0aWVzKHNlbGYuZGVjbGFyZSxcbiAgICAgICAgZnVuY3Rpb24obWFya3VwLCBwYXJlbnQsIGtleSkge1xuICAgICAgICAgICAgaWYgKHJlcXVpcmUpIHtcbiAgICAgICAgICAgICAgICBtYXJrdXAgPSBfLmNsb25lRGVlcChtYXJrdXApO1xuICAgICAgICAgICAgICAgIG1hcmt1cFtcIkByZXF1aXJlXCJdID0gcmVxdWlyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuYXJncy5wdXNoKGFjdGl2aXR5TWFya3VwLnBhcnNlKG1hcmt1cCkpO1xuICAgICAgICB9KTtcbn07XG5cblRlbXBsYXRlLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbihjYWxsQ29udGV4dCwgYXJncykge1xuICAgIGlmIChfLmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgY2FsbENvbnRleHQuc2NoZWR1bGUoYXJncywgXCJfYWN0aXZpdGllc0dvdFwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKCk7XG4gICAgfVxufTtcblxuVGVtcGxhdGUucHJvdG90eXBlLl9hY3Rpdml0aWVzR290ID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XG4gICAgaWYgKHJlYXNvbiA9PT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XG4gICAgICAgIGlmIChfLmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgaWR4ID0gMDtcbiAgICAgICAgICAgIGxldCBkZWNsYXJlID0gXy5jbG9uZURlZXAodGhpcy5kZWNsYXJlKTtcbiAgICAgICAgICAgIGxldCBzZXR1cFRhc2tzID0gW107XG4gICAgICAgICAgICB0ZW1wbGF0ZUhlbHBlcnMudmlzaXRBY3Rpdml0aWVzKGRlY2xhcmUsIGZ1bmN0aW9uKG1hcmt1cCwgcGFyZW50LCBrZXkpIHtcbiAgICAgICAgICAgICAgICBzZXR1cFRhc2tzLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFtrZXldID0gcmVzdWx0W2lkeCsrXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChsZXQgdCBvZiBzZXR1cFRhc2tzKSB7XG4gICAgICAgICAgICAgICAgdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUoZGVjbGFyZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZW1wbGF0ZTsiXX0=
