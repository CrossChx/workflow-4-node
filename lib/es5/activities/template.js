"use strict";
var Activity = require('./activity');
var util = require('util');
var _ = require('lodash');
var activityMarkup = require('./activityMarkup');
var fast = require('fast.js');
var is = require('../common/is');
var templateHelpers = require('./templateHelpers');
var guids = require('../common/guids');
function Template() {
  Activity.call(this);
  this[guids.types.template] = true;
  this.nonScopedProperties.add(guids.types.template);
  this.declare = null;
  this.nonScopedProperties.add('_visitActivities');
  this.nonScopedProperties.add('_getInternalActivities');
}
util.inherits(Template, Activity);
Template.prototype._getInternalActivities = function() {
  var self = this;
  if (!self.args) {
    self.args = [];
    templateHelpers.visitActivities(self.declare, function(markup, parent, key) {
      self.args.push(activityMarkup.parse(markup));
    });
  }
  return self.args;
};
Template.prototype.forEachImmediateChild = function(f) {
  Activity.prototype.forEachImmediateChild.call(this, f);
  fast.forEach(this._getInternalActivities(), function(activity) {
    f(activity);
  });
};
Template.prototype._forEach = function(f, visited, except) {
  Activity.prototype._forEach.call(this, f, visited, except);
  fast.forEach(this._getInternalActivities(), function(activity) {
    activity._forEach(f, visited, except);
  });
};
Template.prototype.run = function(callContext, args) {
  if (_.isArray(args)) {
    callContext.schedule(args, '_activitiesGot');
  } else {
    callContext.complete();
  }
};
Template.prototype._activitiesGot = function(callContext, reason, result) {
  if (reason == Activity.states.complete) {
    if (_.isArray(result) && result.length) {
      var idx = 0;
      var declare = _.cloneDeep(this.get("declare"));
      var setupTasks = [];
      templateHelpers.visitActivities(declare, function(markup, parent, key) {
        setupTasks.push(function() {
          parent[key] = result[idx++];
        });
      });
      fast.forEach(setupTasks, function(t) {
        t();
      });
      callContext.complete(declare);
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Template;
//# sourceMappingURL=data:application/json;base64,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LEFBQUMsQ0FBQyxVQUFTLENBQUcsVUFBUyxDQUFBLENBQUc7QUFBRSxRQUFBLEFBQUMsRUFBQyxDQUFDO01BQUUsQ0FBQyxDQUFDO0FBQzlDLGdCQUFVLFNBQVMsQUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDO0lBQ2pDO0FBQUEsRUFDSixLQUNLO0FBQ0QsY0FBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsT0FBSyxDQUFDLENBQUM7RUFDbkM7QUFBQSxBQUNKLENBQUE7QUFFQSxLQUFLLFFBQVEsRUFBSSxTQUFPLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL3RlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQWN0aXZpdHkgPSByZXF1aXJlKCcuL2FjdGl2aXR5Jyk7XHJcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgYWN0aXZpdHlNYXJrdXAgPSByZXF1aXJlKCcuL2FjdGl2aXR5TWFya3VwJyk7XHJcbnZhciBmYXN0ID0gcmVxdWlyZSgnZmFzdC5qcycpO1xyXG52YXIgaXMgPSByZXF1aXJlKCcuLi9jb21tb24vaXMnKTtcclxudmFyIHRlbXBsYXRlSGVscGVycyA9IHJlcXVpcmUoJy4vdGVtcGxhdGVIZWxwZXJzJyk7XHJcbnZhciBndWlkcyA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ndWlkcycpO1xyXG5cclxuZnVuY3Rpb24gVGVtcGxhdGUoKSB7XHJcbiAgICBBY3Rpdml0eS5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXNbZ3VpZHMudHlwZXMudGVtcGxhdGVdID0gdHJ1ZTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoZ3VpZHMudHlwZXMudGVtcGxhdGUpO1xyXG5cclxuICAgIHRoaXMuZGVjbGFyZSA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZCgnX3Zpc2l0QWN0aXZpdGllcycpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZCgnX2dldEludGVybmFsQWN0aXZpdGllcycpO1xyXG59XHJcblxyXG51dGlsLmluaGVyaXRzKFRlbXBsYXRlLCBBY3Rpdml0eSk7XHJcblxyXG5UZW1wbGF0ZS5wcm90b3R5cGUuX2dldEludGVybmFsQWN0aXZpdGllcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgaWYgKCFzZWxmLmFyZ3MpIHtcclxuICAgICAgICBzZWxmLmFyZ3MgPSBbXTtcclxuICAgICAgICB0ZW1wbGF0ZUhlbHBlcnMudmlzaXRBY3Rpdml0aWVzKHNlbGYuZGVjbGFyZSxcclxuICAgICAgICAgICAgZnVuY3Rpb24obWFya3VwLCBwYXJlbnQsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5hcmdzLnB1c2goYWN0aXZpdHlNYXJrdXAucGFyc2UobWFya3VwKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlbGYuYXJncztcclxufVxyXG5cclxuVGVtcGxhdGUucHJvdG90eXBlLmZvckVhY2hJbW1lZGlhdGVDaGlsZCA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUuZm9yRWFjaEltbWVkaWF0ZUNoaWxkLmNhbGwodGhpcywgZik7XHJcbiAgICBmYXN0LmZvckVhY2godGhpcy5fZ2V0SW50ZXJuYWxBY3Rpdml0aWVzKCksIGZ1bmN0aW9uKGFjdGl2aXR5KSB7XHJcbiAgICAgICAgZihhY3Rpdml0eSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuVGVtcGxhdGUucHJvdG90eXBlLl9mb3JFYWNoID0gZnVuY3Rpb24gKGYsIHZpc2l0ZWQsIGV4Y2VwdCkge1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLl9mb3JFYWNoLmNhbGwodGhpcywgZiwgdmlzaXRlZCwgZXhjZXB0KTtcclxuICAgIGZhc3QuZm9yRWFjaCh0aGlzLl9nZXRJbnRlcm5hbEFjdGl2aXRpZXMoKSwgZnVuY3Rpb24oYWN0aXZpdHkpIHtcclxuICAgICAgICBhY3Rpdml0eS5fZm9yRWFjaChmLCB2aXNpdGVkLCBleGNlcHQpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblRlbXBsYXRlLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbihjYWxsQ29udGV4dCwgYXJncykge1xyXG4gICAgaWYgKF8uaXNBcnJheShhcmdzKSkge1xyXG4gICAgICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKGFyZ3MsICdfYWN0aXZpdGllc0dvdCcpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUoKTtcclxuICAgIH1cclxufVxyXG5cclxuVGVtcGxhdGUucHJvdG90eXBlLl9hY3Rpdml0aWVzR290ID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XHJcbiAgICBpZiAocmVhc29uID09IEFjdGl2aXR5LnN0YXRlcy5jb21wbGV0ZSkge1xyXG4gICAgICAgIGlmIChfLmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBpZHggPSAwO1xyXG4gICAgICAgICAgICB2YXIgZGVjbGFyZSA9IF8uY2xvbmVEZWVwKHRoaXMuZ2V0KFwiZGVjbGFyZVwiKSk7XHJcbiAgICAgICAgICAgIHZhciBzZXR1cFRhc2tzID0gW107XHJcbiAgICAgICAgICAgIHRlbXBsYXRlSGVscGVycy52aXNpdEFjdGl2aXRpZXMoZGVjbGFyZSwgZnVuY3Rpb24obWFya3VwLCBwYXJlbnQsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dXBUYXNrcy5wdXNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFtrZXldID0gcmVzdWx0W2lkeCsrXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZmFzdC5mb3JFYWNoKHNldHVwVGFza3MsIGZ1bmN0aW9uKHQpIHsgdCgpOyB9KTtcclxuICAgICAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUoZGVjbGFyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUZW1wbGF0ZTsiXX0=
