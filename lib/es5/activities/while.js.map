{"version":3,"sources":["activities/while.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;AAErC,SAAS,KAAK,GAAG;AACb,YAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEpB,QAAI,CAAC,SAAS,GAAG,IAAI,CAAC;CACzB;;AAED,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;;AAE/B,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,WAAW,EAAE,IAAI,EAAE;AAC/C,QAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC/B,QAAI,SAAS,EAAE;AACX,mBAAW,CAAC,QAAQ,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;KACpD,MACI;AACD,mBAAW,CAAC,QAAQ,EAAE,CAAC;KAC1B;CACJ,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE;AACnE,QAAI,MAAM,KAAK,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE;AACrC,YAAI,CAAC,MAAM,EAAE;AACT,uBAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SAC9C,MACI;AACD,oBAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;SAClD;KACJ,MACI;AACD,mBAAW,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KACnC;CACJ,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE;AACnE,QAAI,MAAM,KAAK,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE;AACrC,YAAI,CAAC,eAAe,GAAG,MAAM,CAAC;AAC9B,mBAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;KACzD,MACI;AACD,mBAAW,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KACnC;CACJ,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"activities/while.js","sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet WithBody = require(\"./withBody\");\n\nfunction While() {\n    WithBody.call(this);\n\n    this.condition = null;\n}\n\nutil.inherits(While, WithBody);\n\nWhile.prototype.run = function (callContext, args) {\n    let condition = this.condition;\n    if (condition) {\n        callContext.schedule(condition, \"_conditionGot\");\n    }\n    else {\n        callContext.complete();\n    }\n};\n\nWhile.prototype._conditionGot = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        if (!result) {\n            callContext.complete(this._lastBodyResult);\n        }\n        else {\n            WithBody.prototype.run.call(this, callContext);\n        }\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nWhile.prototype.bodyCompleted = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        this._lastBodyResult = result;\n        callContext.schedule(this.condition, \"_conditionGot\");\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nmodule.exports = While;"],"sourceRoot":"/source/"}