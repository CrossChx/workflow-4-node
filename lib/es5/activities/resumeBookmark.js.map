{"version":3,"names":[],"mappings":"","sources":["activities/resumeBookmark.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet errors = require(\"../common/errors\");\r\n\r\nfunction ResumeBookmark() {\r\n    Activity.call(this);\r\n    this.bookmarkName = \"\";\r\n    this.reason = Activity.states.complete;\r\n    this.mustExists = true;\r\n}\r\n\r\nResumeBookmark.validReasons = [Activity.states.complete, Activity.states.fail, Activity.states.cancel];\r\n\r\nutil.inherits(ResumeBookmark, Activity);\r\n\r\nResumeBookmark.prototype.run = function (callContext, args) {\r\n    let bookmarkName = this.bookmarkName;\r\n    let reason = this.reason;\r\n\r\n    if (!bookmarkName) {\r\n        callContext.fail(new errors.ValidationError(\"Bookmark name expected.\"));\r\n    }\r\n    if (ResumeBookmark.validReasons.indexOf(reason) === -1) {\r\n        callContext.fail(new errors.ValidationError(\"Reason value '\" + reason + \"' is not valid.\"));\r\n    }\r\n\r\n    let result = false;\r\n    if (this.mustExists) {\r\n        callContext.resumeBookmark(bookmarkName, reason, args);\r\n        result = true;\r\n    }\r\n    else {\r\n        if (callContext.executionContext.isBookmarkExists(bookmarkName)) {\r\n            callContext.resumeBookmark(bookmarkName, reason, args);\r\n            result = true;\r\n        }\r\n    }\r\n\r\n    callContext.complete(result);\r\n};\r\n\r\nmodule.exports = ResumeBookmark;\r\n"],"file":"activities/resumeBookmark.js","sourceRoot":"/source/"}