{"version":3,"names":[],"mappings":"","sources":["activities/resumeBookmark.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet errors = require(\"../common/errors\");\n\nfunction ResumeBookmark() {\n    Activity.call(this);\n    this.bookmarkName = \"\";\n    this.reason = Activity.states.complete;\n    this.mustExists = true;\n}\n\nResumeBookmark.validReasons = [Activity.states.complete, Activity.states.fail, Activity.states.cancel];\n\nutil.inherits(ResumeBookmark, Activity);\n\nResumeBookmark.prototype.run = function (callContext, args) {\n    let bookmarkName = this.bookmarkName;\n    let reason = this.reason;\n\n    if (!bookmarkName) {\n        callContext.fail(new errors.ValidationError(\"Bookmark name expected.\"));\n    }\n    if (ResumeBookmark.validReasons.indexOf(reason) === -1) {\n        callContext.fail(new errors.ValidationError(\"Reason value '\" + reason + \"' is not valid.\"));\n    }\n\n    let result = false;\n    if (this.mustExists) {\n        callContext.resumeBookmark(bookmarkName, reason, args);\n        result = true;\n    }\n    else {\n        if (callContext.executionContext.isBookmarkExists(bookmarkName)) {\n            callContext.resumeBookmark(bookmarkName, reason, args);\n            result = true;\n        }\n    }\n\n    callContext.complete(result);\n};\n\nmodule.exports = ResumeBookmark;\n"],"file":"activities/resumeBookmark.js","sourceRoot":"/source/"}