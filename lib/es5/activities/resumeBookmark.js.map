{"version":3,"sources":["activities/resumeBookmark.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAEzC,SAAS,cAAc,GAAG;AACtB,YAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,QAAI,CAAC,YAAY,GAAG,EAAE,CAAC;AACvB,QAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC;AACvC,QAAI,CAAC,UAAU,GAAG,IAAI,CAAC;CAC1B;;AAED,cAAc,CAAC,YAAY,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;AAEvG,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;;AAExC,cAAc,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,WAAW,EAAE,IAAI,EAAE;AACxD,QAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;AACrC,QAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;AAEzB,QAAI,CAAC,YAAY,EAAE;AACf,mBAAW,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC,CAAC;KAC3E;AACD,QAAI,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;AACpD,mBAAW,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,eAAe,CAAC,gBAAgB,GAAG,MAAM,GAAG,iBAAiB,CAAC,CAAC,CAAC;KAC/F;;AAED,QAAI,MAAM,GAAG,KAAK,CAAC;AACnB,QAAI,IAAI,CAAC,UAAU,EAAE;AACjB,mBAAW,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;AACvD,cAAM,GAAG,IAAI,CAAC;KACjB,MACI;AACD,YAAI,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE;AAC7D,uBAAW,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;AACvD,kBAAM,GAAG,IAAI,CAAC;SACjB;KACJ;;AAED,eAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;CAChC,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC","file":"activities/resumeBookmark.js","sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet errors = require(\"../common/errors\");\n\nfunction ResumeBookmark() {\n    Activity.call(this);\n    this.bookmarkName = \"\";\n    this.reason = Activity.states.complete;\n    this.mustExists = true;\n}\n\nResumeBookmark.validReasons = [Activity.states.complete, Activity.states.fail, Activity.states.cancel];\n\nutil.inherits(ResumeBookmark, Activity);\n\nResumeBookmark.prototype.run = function (callContext, args) {\n    let bookmarkName = this.bookmarkName;\n    let reason = this.reason;\n\n    if (!bookmarkName) {\n        callContext.fail(new errors.ValidationError(\"Bookmark name expected.\"));\n    }\n    if (ResumeBookmark.validReasons.indexOf(reason) === -1) {\n        callContext.fail(new errors.ValidationError(\"Reason value '\" + reason + \"' is not valid.\"));\n    }\n\n    let result = false;\n    if (this.mustExists) {\n        callContext.resumeBookmark(bookmarkName, reason, args);\n        result = true;\n    }\n    else {\n        if (callContext.executionContext.isBookmarkExists(bookmarkName)) {\n            callContext.resumeBookmark(bookmarkName, reason, args);\n            result = true;\n        }\n    }\n\n    callContext.complete(result);\n};\n\nmodule.exports = ResumeBookmark;\n"],"sourceRoot":"/source/"}