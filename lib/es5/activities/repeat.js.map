{"version":3,"names":[],"mappings":"","sources":["activities/repeat.js"],"sourcesContent":["\"use strict\";\r\nlet Activity = require(\"./activity\");\r\nlet Composite = require(\"./composite\");\r\nlet util = require(\"util\");\r\nlet _ = require(\"lodash\");\r\nrequire(\"date-utils\");\r\nlet timespan = require(\"timespan\");\r\nlet TimeSpan = timespan.TimeSpan;\r\nlet debug = require(\"debug\")(\"wf4node:Repeat\");\r\n\r\nfunction Repeat() {\r\n    Composite.call(this);\r\n\r\n    this.startOn = null;\r\n    this.intervalType = null;\r\n    this.intervalValue = null;\r\n    this.nextPropName = \"next\";\r\n}\r\n\r\nRepeat.intervalTypes = {\r\n    secondly: \"secondly\",\r\n    minutely: \"minutely\",\r\n    hourly: \"hourly\",\r\n    daily: \"daily\",\r\n    weekly: \"weekly\"\r\n};\r\n\r\nutil.inherits(Repeat, Composite);\r\n\r\nRepeat.prototype.createImplementation = function (execContext) {\r\n    let args = this.args;\r\n    this.args = null;\r\n    return {\r\n        \"@block\": {\r\n            startOn: \"= this.$parent.startOn || (new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()))\",\r\n            intervalType: `= this.$parent.intervalType || '${Repeat.intervalTypes.daily}'`,\r\n            intervalValue: \"= this.$parent.intervalValue || 1\",\r\n            next: null,\r\n            args: [\r\n                {\r\n                    \"@assign\": {\r\n                        to: \"next\",\r\n                        value: \"= this.startOn\"\r\n                    }\r\n                },\r\n                {\r\n                    \"@while\": {\r\n                        condition: true,\r\n                        args: [\r\n                            function () {\r\n                                debug(\"Delaying to: %s\", this.next);\r\n                            },\r\n                            {\r\n                                \"@delayTo\": {\r\n                                    to: \"= this.next\"\r\n                                }\r\n                            },\r\n                            function () {\r\n                                debug(\"Delayed to: %s. Running arguments.\", new Date());\r\n                            },\r\n                            {\r\n                                \"@block\": args\r\n                            },\r\n                            {\r\n                                \"@assign\": {\r\n                                    to: \"next\",\r\n                                    value: function () {\r\n                                        let self = this;\r\n                                        let now = new Date();\r\n                                        let next = this.next;\r\n                                        debug(\"Calculating next's value from: %s. intervalType: %s, intervalValue: %d\", next.getTime(), self.intervalType, self.intervalValue);\r\n                                        let value = self.intervalValue;\r\n                                        switch (self.intervalType) {\r\n                                            case \"secondly\":\r\n                                                next = next.add({ milliseconds: value * 1000 });\r\n                                                break;\r\n                                            case \"minutely\":\r\n                                                next = next.add({ minutes: value });\r\n                                                break;\r\n                                            case \"hourly\":\r\n                                                next = next.add({ hours: value });\r\n                                                break;\r\n                                            case \"weekly\":\r\n                                                next = next.add({ weeks: value });\r\n                                                break;\r\n                                            default:\r\n                                                next = next.add({ days: value });\r\n                                                break;\r\n                                        }\r\n                                        debug(\"New next is: %s\", next.getTime());\r\n                                        if (next.getTime() > now.getTime()) {\r\n                                            debug(\"That's a future value, returning.\");\r\n                                            // If this is in the future, then we're done:\r\n                                            return next;\r\n                                        }\r\n                                        else {\r\n                                            debug(\"That's a past value, calculating future value by adding periods.\");\r\n                                            let dSec = (now - next) / 1000.0;\r\n                                            debug(\"Total distance in seconds: %d\", dSec);\r\n                                            let interval;\r\n                                            switch (self.intervalType) {\r\n                                                case \"secondly\":\r\n                                                    interval = timespan.fromSeconds(self.intervalValue);\r\n                                                    break;\r\n                                                case \"minutely\":\r\n                                                    interval = timespan.fromMinutes(self.intervalValue);\r\n                                                    break;\r\n                                                case \"hourly\":\r\n                                                    interval = timespan.fromHours(self.intervalValue);\r\n                                                    break;\r\n                                                case \"weekly\":\r\n                                                    interval = timespan.fromDays(self.intervalValue * 7);\r\n                                                    break;\r\n                                                default:\r\n                                                    interval = timespan.fromDays(self.intervalValue);\r\n                                                    break;\r\n                                            }\r\n                                            interval = interval.totalSeconds();\r\n                                            debug(\"Interval in seconds: %d\", interval);\r\n                                            let mod = dSec % interval;\r\n                                            debug(\"Remainder is: %d\", mod);\r\n                                            let toAdd = interval - mod;\r\n                                            debug(\"To add to now is: %d\", toAdd);\r\n                                            let result = now.add({ seconds: toAdd });\r\n                                            debug(\"Result is: %s\", result.getTime());\r\n                                            return result;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    };\r\n};\r\n\r\nmodule.exports = Repeat;"],"file":"activities/repeat.js","sourceRoot":"/source/"}