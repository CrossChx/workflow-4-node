{"version":3,"sources":["activities/repeat.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AACb,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACvC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,OAAO,CAAC,YAAY,CAAC,CAAC;AACtB,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;AACjC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,gBAAgB,CAAC,CAAC;;AAE/C,SAAS,MAAM,GAAG;AACd,aAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAErB,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,QAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,QAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC1B,QAAI,CAAC,YAAY,GAAG,MAAM,CAAC;CAC9B;;AAED,MAAM,CAAC,aAAa,GAAG;AACnB,YAAQ,EAAE,UAAU;AACpB,YAAQ,EAAE,UAAU;AACpB,UAAM,EAAE,QAAQ;AAChB,SAAK,EAAE,OAAO;AACd,UAAM,EAAE,QAAQ;CACnB,CAAC;;AAEF,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;;AAEjC,MAAM,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAU,WAAW,EAAE;AAC3D,QAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,WAAO;AACH,gBAAQ,EAAE;AACN,mBAAO,EAAE,6GAA6G;AACtH,wBAAY,uCAAqC,MAAM,CAAC,aAAa,CAAC,KAAK,MAAG;AAC9E,yBAAa,EAAE,mCAAmC;AAClD,gBAAI,EAAE,IAAI;AACV,gBAAI,EAAE,CACF;AACI,yBAAS,EAAE;AACP,sBAAE,EAAE,MAAM;AACV,yBAAK,EAAE,gBAAgB;iBAC1B;aACJ,EACD;AACI,wBAAQ,EAAE;AACN,6BAAS,EAAE,IAAI;AACf,wBAAI,EAAE,CACF,YAAY;AACR,6BAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;qBACvC,EACD;AACI,kCAAU,EAAE;AACR,8BAAE,EAAE,aAAa;yBACpB;qBACJ,EACD,YAAY;AACR,6BAAK,CAAC,oCAAoC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;qBAC3D,EACD;AACI,gCAAQ,EAAE,IAAI;qBACjB,EACD;AACI,iCAAS,EAAE;AACP,8BAAE,EAAE,MAAM;AACV,iCAAK,EAAE,iBAAY;AACf,oCAAI,IAAI,GAAG,IAAI,CAAC;AAChB,oCAAI,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;AACrB,oCAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,qCAAK,CAAC,wEAAwE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AACvI,oCAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;AAC/B,wCAAQ,IAAI,CAAC,YAAY;AACrB,yCAAK,UAAU;AACX,4CAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,KAAK,GAAG,IAAI,EAAE,CAAC,CAAC;AAChD,8CAAM;AAAA,AACV,yCAAK,UAAU;AACX,4CAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;AACpC,8CAAM;AAAA,AACV,yCAAK,QAAQ;AACT,4CAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;AAClC,8CAAM;AAAA,AACV,yCAAK,QAAQ;AACT,4CAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;AAClC,8CAAM;AAAA,AACV;AACI,4CAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;AACjC,8CAAM;AAAA,iCACb;AACD,qCAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACzC,oCAAI,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,OAAO,EAAE,EAAE;AAChC,yCAAK,CAAC,mCAAmC,CAAC;;AAAC,AAE3C,2CAAO,IAAI,CAAC;iCACf,MACI;AACD,yCAAK,CAAC,kEAAkE,CAAC,CAAC;AAC1E,wCAAI,IAAI,GAAG,CAAC,GAAG,GAAG,IAAI,CAAA,GAAI,MAAM,CAAC;AACjC,yCAAK,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;AAC7C,wCAAI,QAAQ,YAAA,CAAC;AACb,4CAAQ,IAAI,CAAC,YAAY;AACrB,6CAAK,UAAU;AACX,oDAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACpD,kDAAM;AAAA,AACV,6CAAK,UAAU;AACX,oDAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACpD,kDAAM;AAAA,AACV,6CAAK,QAAQ;AACT,oDAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAClD,kDAAM;AAAA,AACV,6CAAK,QAAQ;AACT,oDAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;AACrD,kDAAM;AAAA,AACV;AACI,oDAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACjD,kDAAM;AAAA,qCACb;AACD,4CAAQ,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC;AACnC,yCAAK,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;AAC3C,wCAAI,GAAG,GAAG,IAAI,GAAG,QAAQ,CAAC;AAC1B,yCAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;AAC/B,wCAAI,KAAK,GAAG,QAAQ,GAAG,GAAG,CAAC;AAC3B,yCAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;AACrC,wCAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;AACzC,yCAAK,CAAC,eAAe,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;AACzC,2CAAO,MAAM,CAAC;iCACjB;6BACJ;yBACJ;qBACJ,CACJ;iBACJ;aACJ,CACJ;SACJ;KACJ,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"activities/repeat.js","sourcesContent":["\"use strict\";\nlet Activity = require(\"./activity\");\nlet Composite = require(\"./composite\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nrequire(\"date-utils\");\nlet timespan = require(\"timespan\");\nlet TimeSpan = timespan.TimeSpan;\nlet debug = require(\"debug\")(\"wf4node:Repeat\");\n\nfunction Repeat() {\n    Composite.call(this);\n\n    this.startOn = null;\n    this.intervalType = null;\n    this.intervalValue = null;\n    this.nextPropName = \"next\";\n}\n\nRepeat.intervalTypes = {\n    secondly: \"secondly\",\n    minutely: \"minutely\",\n    hourly: \"hourly\",\n    daily: \"daily\",\n    weekly: \"weekly\"\n};\n\nutil.inherits(Repeat, Composite);\n\nRepeat.prototype.createImplementation = function (execContext) {\n    let args = this.args;\n    this.args = null;\n    return {\n        \"@block\": {\n            startOn: \"= this.$parent.startOn || (new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()))\",\n            intervalType: `= this.$parent.intervalType || '${Repeat.intervalTypes.daily}'`,\n            intervalValue: \"= this.$parent.intervalValue || 1\",\n            next: null,\n            args: [\n                {\n                    \"@assign\": {\n                        to: \"next\",\n                        value: \"= this.startOn\"\n                    }\n                },\n                {\n                    \"@while\": {\n                        condition: true,\n                        args: [\n                            function () {\n                                debug(\"Delaying to: %s\", this.next);\n                            },\n                            {\n                                \"@delayTo\": {\n                                    to: \"= this.next\"\n                                }\n                            },\n                            function () {\n                                debug(\"Delayed to: %s. Running arguments.\", new Date());\n                            },\n                            {\n                                \"@block\": args\n                            },\n                            {\n                                \"@assign\": {\n                                    to: \"next\",\n                                    value: function () {\n                                        let self = this;\n                                        let now = new Date();\n                                        let next = this.next;\n                                        debug(\"Calculating next's value from: %s. intervalType: %s, intervalValue: %d\", next.getTime(), self.intervalType, self.intervalValue);\n                                        let value = self.intervalValue;\n                                        switch (self.intervalType) {\n                                            case \"secondly\":\n                                                next = next.add({ milliseconds: value * 1000 });\n                                                break;\n                                            case \"minutely\":\n                                                next = next.add({ minutes: value });\n                                                break;\n                                            case \"hourly\":\n                                                next = next.add({ hours: value });\n                                                break;\n                                            case \"weekly\":\n                                                next = next.add({ weeks: value });\n                                                break;\n                                            default:\n                                                next = next.add({ days: value });\n                                                break;\n                                        }\n                                        debug(\"New next is: %s\", next.getTime());\n                                        if (next.getTime() > now.getTime()) {\n                                            debug(\"That's a future value, returning.\");\n                                            // If this is in the future, then we're done:\n                                            return next;\n                                        }\n                                        else {\n                                            debug(\"That's a past value, calculating future value by adding periods.\");\n                                            let dSec = (now - next) / 1000.0;\n                                            debug(\"Total distance in seconds: %d\", dSec);\n                                            let interval;\n                                            switch (self.intervalType) {\n                                                case \"secondly\":\n                                                    interval = timespan.fromSeconds(self.intervalValue);\n                                                    break;\n                                                case \"minutely\":\n                                                    interval = timespan.fromMinutes(self.intervalValue);\n                                                    break;\n                                                case \"hourly\":\n                                                    interval = timespan.fromHours(self.intervalValue);\n                                                    break;\n                                                case \"weekly\":\n                                                    interval = timespan.fromDays(self.intervalValue * 7);\n                                                    break;\n                                                default:\n                                                    interval = timespan.fromDays(self.intervalValue);\n                                                    break;\n                                            }\n                                            interval = interval.totalSeconds();\n                                            debug(\"Interval in seconds: %d\", interval);\n                                            let mod = dSec % interval;\n                                            debug(\"Remainder is: %d\", mod);\n                                            let toAdd = interval - mod;\n                                            debug(\"To add to now is: %d\", toAdd);\n                                            let result = now.add({ seconds: toAdd });\n                                            debug(\"Result is: %s\", result.getTime());\n                                            return result;\n                                        }\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    };\n};\n\nmodule.exports = Repeat;"],"sourceRoot":"/source/"}