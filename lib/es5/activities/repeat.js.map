{"version":3,"names":[],"mappings":"","sources":["activities/repeat.js"],"sourcesContent":["\"use strict\";\nlet Activity = require(\"./activity\");\nlet Composite = require(\"./composite\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nrequire(\"date-utils\");\nlet timespan = require(\"timespan\");\nlet TimeSpan = timespan.TimeSpan;\nlet debug = require(\"debug\")(\"wf4node:Repeat\");\n\nfunction Repeat() {\n    Composite.call(this);\n\n    this.startOn = null;\n    this.intervalType = null;\n    this.intervalValue = null;\n    this.nextPropName = \"next\";\n}\n\nRepeat.intervalTypes = {\n    secondly: \"secondly\",\n    minutely: \"minutely\",\n    hourly: \"hourly\",\n    daily: \"daily\",\n    weekly: \"weekly\"\n};\n\nutil.inherits(Repeat, Composite);\n\nRepeat.prototype.createImplementation = function (execContext) {\n    let args = this.args;\n    this.args = null;\n    return {\n        \"@block\": {\n            startOn: \"= this.$parent.startOn || (new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()))\",\n            intervalType: `= this.$parent.intervalType || '${Repeat.intervalTypes.daily}'`,\n            intervalValue: \"= this.$parent.intervalValue || 1\",\n            next: null,\n            args: [\n                {\n                    \"@assign\": {\n                        to: \"next\",\n                        value: \"= this.startOn\"\n                    }\n                },\n                {\n                    \"@while\": {\n                        condition: true,\n                        args: [\n                            function () {\n                                debug(\"Delaying to: %s\", this.next);\n                            },\n                            {\n                                \"@delayTo\": {\n                                    to: \"= this.next\"\n                                }\n                            },\n                            function () {\n                                debug(\"Delayed to: %s. Running arguments.\", new Date());\n                            },\n                            {\n                                \"@block\": args\n                            },\n                            {\n                                \"@assign\": {\n                                    to: \"next\",\n                                    value: function () {\n                                        let self = this;\n                                        let now = new Date();\n                                        let next = this.next;\n                                        debug(\"Calculating next's value from: %s. intervalType: %s, intervalValue: %d\", next.getTime(), self.intervalType, self.intervalValue);\n                                        let value = self.intervalValue;\n                                        switch (self.intervalType) {\n                                            case \"secondly\":\n                                                next = next.add({ milliseconds: value * 1000 });\n                                                break;\n                                            case \"minutely\":\n                                                next = next.add({ minutes: value });\n                                                break;\n                                            case \"hourly\":\n                                                next = next.add({ hours: value });\n                                                break;\n                                            case \"weekly\":\n                                                next = next.add({ weeks: value });\n                                                break;\n                                            default:\n                                                next = next.add({ days: value });\n                                                break;\n                                        }\n                                        debug(\"New next is: %s\", next.getTime());\n                                        if (next.getTime() > now.getTime()) {\n                                            debug(\"That's a future value, returning.\");\n                                            // If this is in the future, then we're done:\n                                            return next;\n                                        }\n                                        else {\n                                            debug(\"That's a past value, calculating future value by adding periods.\");\n                                            let dSec = (now - next) / 1000.0;\n                                            debug(\"Total distance in seconds: %d\", dSec);\n                                            let interval;\n                                            switch (self.intervalType) {\n                                                case \"secondly\":\n                                                    interval = timespan.fromSeconds(self.intervalValue);\n                                                    break;\n                                                case \"minutely\":\n                                                    interval = timespan.fromMinutes(self.intervalValue);\n                                                    break;\n                                                case \"hourly\":\n                                                    interval = timespan.fromHours(self.intervalValue);\n                                                    break;\n                                                case \"weekly\":\n                                                    interval = timespan.fromDays(self.intervalValue * 7);\n                                                    break;\n                                                default:\n                                                    interval = timespan.fromDays(self.intervalValue);\n                                                    break;\n                                            }\n                                            interval = interval.totalSeconds();\n                                            debug(\"Interval in seconds: %d\", interval);\n                                            let mod = dSec % interval;\n                                            debug(\"Remainder is: %d\", mod);\n                                            let toAdd = interval - mod;\n                                            debug(\"To add to now is: %d\", toAdd);\n                                            let result = now.add({ seconds: toAdd });\n                                            debug(\"Result is: %s\", result.getTime());\n                                            return result;\n                                        }\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    };\n};\n\nmodule.exports = Repeat;"],"file":"activities/repeat.js","sourceRoot":"/source/"}