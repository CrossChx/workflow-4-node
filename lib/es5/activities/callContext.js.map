{"version":3,"names":[],"mappings":"","sources":["activities/callContext.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet common = require(\"../common\");\r\nlet is = common.is;\r\nlet _ = require(\"lodash\");\r\n\r\nfunction CallContext(executionContext, activityOrActivityId, scope) {\r\n    this._executionContext = executionContext;\r\n    this._activity = activityOrActivityId ? this._asActivity(activityOrActivityId) : null;\r\n    this._activityInstanceId = this._activity ? this._activity.instanceId : null;\r\n    this._scope = scope ? scope : null;\r\n    this._executionState = null;\r\n    this._scopePart = null;\r\n}\r\n\r\nObject.defineProperties(\r\n    CallContext.prototype,\r\n    {\r\n        instanceId: {\r\n            get: function () {\r\n                return this._activityInstanceId;\r\n            }\r\n        },\r\n        _parentActivityId: {\r\n            get: function () {\r\n                if (!this._activity) {\r\n                    return null;\r\n                }\r\n                let state = this._executionContext.getExecutionState(this.instanceId);\r\n                return state.parentInstanceId;\r\n            }\r\n        },\r\n        _scopeTree: {\r\n            get: function () {\r\n                return this._executionContext._scopeTree;\r\n            }\r\n        },\r\n        activity: {\r\n            get: function () {\r\n                return this._activity;\r\n            }\r\n        },\r\n        executionContext: {\r\n            get: function () {\r\n                return this._executionContext;\r\n            }\r\n        },\r\n        executionState: {\r\n            get: function () {\r\n                return this._executionState || (this._activity ? (this._executionState = this._executionContext.getExecutionState(this.instanceId)) : null);\r\n            }\r\n        },\r\n        scope: {\r\n            get: function () {\r\n                return this._scope || (this._scope = this._scopeTree.find(this.instanceId));\r\n            }\r\n        }\r\n    }\r\n);\r\n\r\nCallContext.prototype.next = function (childActivityOrActivityId, variables) {\r\n    let child = this._asActivity(childActivityOrActivityId);\r\n    let part = child.createScopePart();\r\n    if (_.isObject(variables)) {\r\n        _.extend(part, variables);\r\n    }\r\n    return new CallContext(\r\n        this._executionContext,\r\n        child,\r\n        this._scopeTree.next(this.instanceId, child.instanceId, part, child.id));\r\n};\r\n\r\nCallContext.prototype.back = function (keepScope) {\r\n    let parentId = this._parentActivityId;\r\n    if (parentId) {\r\n        return new CallContext(\r\n            this._executionContext,\r\n            parentId,\r\n            this._scopeTree.back(this.instanceId, keepScope));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\n\r\nCallContext.prototype._asActivity = function (activityOrActivityId) {\r\n    return is.activity(activityOrActivityId) ? activityOrActivityId : this._executionContext._getKnownActivity(activityOrActivityId);\r\n};\r\n\r\n/* Callbacks */\r\n\r\nCallContext.prototype.complete = function (result) {\r\n    this.activity.complete(this, result);\r\n};\r\n\r\nCallContext.prototype.cancel = function () {\r\n    this.activity.cancel(this);\r\n};\r\n\r\nCallContext.prototype.idle = function () {\r\n    this.activity.idle(this);\r\n};\r\n\r\nCallContext.prototype.fail = function (e) {\r\n    this.activity.fail(this, e);\r\n};\r\n\r\nCallContext.prototype.end = function (reason, result) {\r\n    this.activity.end(this, reason, result);\r\n};\r\n\r\nCallContext.prototype.emitWorkflowEvent = function (args) {\r\n    this.executionContext.emitWorkflowEvent(args);\r\n};\r\n\r\nCallContext.prototype.schedule = function (obj, endcallback) {\r\n    this.activity.schedule(this, obj, endcallback);\r\n};\r\n\r\nCallContext.prototype.createBookmark = function (name, callback) {\r\n    return this._executionContext.createBookmark(this.instanceId, name, callback);\r\n};\r\n\r\nCallContext.prototype.resumeBookmark = function (name, reason, result) {\r\n    this._executionContext.resumeBookmarkInternal(this, name, reason, result);\r\n};\r\n\r\nmodule.exports = CallContext;\r\n"],"file":"activities/callContext.js","sourceRoot":"/source/"}