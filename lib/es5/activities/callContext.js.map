{"version":3,"names":[],"mappings":"","sources":["activities/callContext.js"],"sourcesContent":["\"use strict\";\n\nlet common = require(\"../common\");\nlet is = common.is;\nlet _ = require(\"lodash\");\n\nfunction CallContext(executionContext, activityOrActivityId, scope) {\n    this._executionContext = executionContext;\n    this._activity = activityOrActivityId ? this._asActivity(activityOrActivityId) : null;\n    this._activityInstanceId = this._activity ? this._activity.instanceId : null;\n    this._scope = scope ? scope : null;\n    this._executionState = null;\n    this._scopePart = null;\n}\n\nObject.defineProperties(\n    CallContext.prototype,\n    {\n        instanceId: {\n            get: function () {\n                return this._activityInstanceId;\n            }\n        },\n        _parentActivityId: {\n            get: function () {\n                if (!this._activity) {\n                    return null;\n                }\n                let state = this._executionContext.getExecutionState(this.instanceId);\n                return state.parentInstanceId;\n            }\n        },\n        _scopeTree: {\n            get: function () {\n                return this._executionContext._scopeTree;\n            }\n        },\n        activity: {\n            get: function () {\n                return this._activity;\n            }\n        },\n        executionContext: {\n            get: function () {\n                return this._executionContext;\n            }\n        },\n        executionState: {\n            get: function () {\n                return this._executionState || (this._activity ? (this._executionState = this._executionContext.getExecutionState(this.instanceId)) : null);\n            }\n        },\n        scope: {\n            get: function () {\n                return this._scope || (this._scope = this._scopeTree.find(this.instanceId));\n            }\n        }\n    }\n);\n\nCallContext.prototype.next = function (childActivityOrActivityId, variables) {\n    let child = this._asActivity(childActivityOrActivityId);\n    let part = child.createScopePart();\n    if (_.isObject(variables)) {\n        _.extend(part, variables);\n    }\n    return new CallContext(\n        this._executionContext,\n        child,\n        this._scopeTree.next(this.instanceId, child.instanceId, part, child.id));\n};\n\nCallContext.prototype.back = function (keepScope) {\n    let parentId = this._parentActivityId;\n    if (parentId) {\n        return new CallContext(\n            this._executionContext,\n            parentId,\n            this._scopeTree.back(this.instanceId, keepScope));\n    }\n    else {\n        return null;\n    }\n};\n\nCallContext.prototype._asActivity = function (activityOrActivityId) {\n    return is.activity(activityOrActivityId) ? activityOrActivityId : this._executionContext._getKnownActivity(activityOrActivityId);\n};\n\n/* Callbacks */\n\nCallContext.prototype.complete = function (result) {\n    this.activity.complete(this, result);\n};\n\nCallContext.prototype.cancel = function () {\n    this.activity.cancel(this);\n};\n\nCallContext.prototype.idle = function () {\n    this.activity.idle(this);\n};\n\nCallContext.prototype.fail = function (e) {\n    this.activity.fail(this, e);\n};\n\nCallContext.prototype.end = function (reason, result) {\n    this.activity.end(this, reason, result);\n};\n\nCallContext.prototype.emitWorkflowEvent = function (args) {\n    this.executionContext.emitWorkflowEvent(args);\n};\n\nCallContext.prototype.schedule = function (obj, endcallback) {\n    this.activity.schedule(this, obj, endcallback);\n};\n\nCallContext.prototype.createBookmark = function (name, callback) {\n    return this._executionContext.createBookmark(this.instanceId, name, callback);\n};\n\nCallContext.prototype.resumeBookmark = function (name, reason, result) {\n    this._executionContext.resumeBookmarkInternal(this, name, reason, result);\n};\n\nmodule.exports = CallContext;\n"],"file":"activities/callContext.js","sourceRoot":"/source/"}