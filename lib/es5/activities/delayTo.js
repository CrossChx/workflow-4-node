"use strict";
var Activity = require("./activity");
var Composite = require("./composite");
var util = require("util");
var _ = require("lodash");
var specStrings = require("../common/specStrings");
var errors = require("../common/errors");
var assert = require("assert");
function DelayTo() {
  Composite.call(this);
  this.to = null;
}
util.inherits(DelayTo, Composite);
DelayTo.prototype.createImplementation = function(execContext) {
  assert(!!execContext);
  var methodName = specStrings.hosting.createDelayToMethodName(this.getInstanceId(execContext));
  return {"@block": {
      delayTo: "= this.$parent.to",
      v: null,
      done: false,
      args: [{"@if": {
          condition: "= _.isDate(this.delayTo)",
          then: [{"@while": {
              condition: "= !this.done",
              args: [{"@beginMethod": {
                  methodName: methodName,
                  instanceIdPath: "[0]",
                  "@to": "v"
                }}, {"@if": {
                  condition: "= this.v[1].getTime() === this.delayTo.getTime()",
                  then: {"@assign": {
                      to: "done",
                      value: true
                    }}
                }}, {"@endMethod": {methodName: methodName}}]
            }}]
        }}]
    }};
};
module.exports = DelayTo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlbGF5VG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxBQUFJLEVBQUEsQ0FBQSxRQUFPLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxZQUFXLENBQUMsQ0FBQztBQUNwQyxBQUFJLEVBQUEsQ0FBQSxTQUFRLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxhQUFZLENBQUMsQ0FBQztBQUN0QyxBQUFJLEVBQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUMxQixBQUFJLEVBQUEsQ0FBQSxDQUFBLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUN6QixBQUFJLEVBQUEsQ0FBQSxXQUFVLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyx1QkFBc0IsQ0FBQyxDQUFDO0FBQ2xELEFBQUksRUFBQSxDQUFBLE1BQUssRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGtCQUFpQixDQUFDLENBQUM7QUFDeEMsQUFBSSxFQUFBLENBQUEsTUFBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFFOUIsT0FBUyxRQUFNLENBQUUsQUFBRCxDQUFHO0FBQ2YsVUFBUSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUVwQixLQUFHLEdBQUcsRUFBSSxLQUFHLENBQUM7QUFDbEI7QUFBQSxBQUVBLEdBQUcsU0FBUyxBQUFDLENBQUMsT0FBTSxDQUFHLFVBQVEsQ0FBQyxDQUFDO0FBRWpDLE1BQU0sVUFBVSxxQkFBcUIsRUFBSSxVQUFVLFdBQVUsQ0FBRztBQUM1RCxPQUFLLEFBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVSxDQUFDLENBQUM7QUFDckIsQUFBSSxJQUFBLENBQUEsVUFBUyxFQUFJLENBQUEsV0FBVSxRQUFRLHdCQUF3QixBQUFDLENBQUMsSUFBRyxjQUFjLEFBQUMsQ0FBQyxXQUFVLENBQUMsQ0FBQyxDQUFDO0FBQzdGLE9BQU8sRUFDSCxRQUFPLENBQUc7QUFDTixZQUFNLENBQUcsb0JBQWtCO0FBQzNCLE1BQUEsQ0FBRyxLQUFHO0FBQ04sU0FBRyxDQUFHLE1BQUk7QUFDVixTQUFHLENBQUcsRUFDRixDQUNJLEtBQUksQ0FBRztBQUNILGtCQUFRLENBQUcsMkJBQXlCO0FBQ3BDLGFBQUcsQ0FBRyxFQUNGLENBQ0ksUUFBTyxDQUFHO0FBQ04sc0JBQVEsQ0FBRyxlQUFhO0FBQ3hCLGlCQUFHLENBQUcsRUFDRixDQUNJLGNBQWEsQ0FBRztBQUNaLDJCQUFTLENBQUcsV0FBUztBQUNyQiwrQkFBYSxDQUFHLE1BQUk7QUFDcEIsc0JBQUksQ0FBRyxJQUFFO0FBQUEsZ0JBQ2IsQ0FDSixDQUNBLEVBQ0ksS0FBSSxDQUFHO0FBQ0gsMEJBQVEsQ0FBRyxtREFBaUQ7QUFDNUQscUJBQUcsQ0FBRyxFQUNGLFNBQVEsQ0FBRztBQUNQLHVCQUFDLENBQUcsT0FBSztBQUNULDBCQUFJLENBQUcsS0FBRztBQUFBLG9CQUNkLENBQ0o7QUFBQSxnQkFDSixDQUNKLENBQ0EsRUFDSSxZQUFXLENBQUcsRUFDVixVQUFTLENBQUcsV0FBUyxDQUN6QixDQUNKLENBQ0o7QUFBQSxZQUNKLENBQ0osQ0FDSjtBQUFBLFFBQ0osQ0FDSixDQUNKO0FBQUEsSUFDSixDQUNKLENBQUM7QUFDTCxDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksUUFBTSxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy9kZWxheVRvLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IEFjdGl2aXR5ID0gcmVxdWlyZShcIi4vYWN0aXZpdHlcIik7XG5sZXQgQ29tcG9zaXRlID0gcmVxdWlyZShcIi4vY29tcG9zaXRlXCIpO1xubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmxldCBzcGVjU3RyaW5ncyA9IHJlcXVpcmUoXCIuLi9jb21tb24vc3BlY1N0cmluZ3NcIik7XG5sZXQgZXJyb3JzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9lcnJvcnNcIik7XG5sZXQgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcblxuZnVuY3Rpb24gRGVsYXlUbygpIHtcbiAgICBDb21wb3NpdGUuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMudG8gPSBudWxsO1xufVxuXG51dGlsLmluaGVyaXRzKERlbGF5VG8sIENvbXBvc2l0ZSk7XG5cbkRlbGF5VG8ucHJvdG90eXBlLmNyZWF0ZUltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24gKGV4ZWNDb250ZXh0KSB7XG4gICAgYXNzZXJ0KCEhZXhlY0NvbnRleHQpO1xuICAgIGxldCBtZXRob2ROYW1lID0gc3BlY1N0cmluZ3MuaG9zdGluZy5jcmVhdGVEZWxheVRvTWV0aG9kTmFtZSh0aGlzLmdldEluc3RhbmNlSWQoZXhlY0NvbnRleHQpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBcIkBibG9ja1wiOiB7XG4gICAgICAgICAgICBkZWxheVRvOiBcIj0gdGhpcy4kcGFyZW50LnRvXCIsXG4gICAgICAgICAgICB2OiBudWxsLFxuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIkBpZlwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246IFwiPSBfLmlzRGF0ZSh0aGlzLmRlbGF5VG8pXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkB3aGlsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246IFwiPSAhdGhpcy5kb25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBiZWdpbk1ldGhvZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZFBhdGg6IFwiWzBdXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkB0b1wiOiBcInZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGlmXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbjogXCI9IHRoaXMudlsxXS5nZXRUaW1lKCkgPT09IHRoaXMuZGVsYXlUby5nZXRUaW1lKClcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW46IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBhc3NpZ25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogXCJkb25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGVuZE1ldGhvZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWxheVRvOyJdfQ==
