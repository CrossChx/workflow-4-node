"use strict";
var Activity = require("./activity");
var util = require("util");
var _ = require("lodash");
var WithBody = require("./withBody");
function For() {
  WithBody.call(this);
  this.from = null;
  this.to = null;
  this.step = 1;
  this.varName = "i";
  this.nonScopedProperties.add("_doStep");
}
util.inherits(For, WithBody);
For.prototype.run = function(callContext, args) {
  var varName = this.varName;
  var from = this.from;
  var to = this.to;
  var step = this.step;
  if (!_.isNull(from) && !_.isNull(to) && !_.isNull(step)) {
    this[varName] = null;
    callContext.schedule([from, to, step], "_valuesGot");
  } else {
    callContext.complete();
  }
};
For.prototype._valuesGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    this._from = result[0];
    this._to = result[1];
    this._step = result[2];
    callContext.activity._doStep.call(this, callContext);
  } else {
    callContext.to(reason, result);
  }
};
For.prototype._doStep = function(callContext, lastResult) {
  var varName = this.varName;
  var from = this._from;
  var to = this._to;
  var step = this._step;
  if (!_.isNumber(from)) {
    callContext.fail(new TypeError(("\"For activity's from value '" + from + "' is not a number.")));
    return;
  }
  if (!_.isNumber(to)) {
    callContext.fail(new TypeError(("\"For activity's to value '" + to + "' is not a number.")));
    return;
  }
  if (!_.isNumber(step)) {
    callContext.fail(new TypeError(("\"For activity's from value '" + step + "' is not a number.")));
    return;
  }
  var current;
  if (_.isNull(this[varName])) {
    current = this[varName] = from;
  } else {
    current = this[varName] = (this[varName] + step);
  }
  if (step >= 0 && current >= to) {
    callContext.complete(lastResult);
  } else if (step < 0 && current <= to) {
    callContext.complete(lastResult);
  } else {
    WithBody.prototype.run.call(this, callContext);
  }
};
For.prototype.bodyCompleted = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    callContext.activity._doStep.call(this, callContext, result);
  } else {
    callContext.end(reason, result);
  }
};
module.exports = For;
//# sourceMappingURL=data:application/json;base64,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LENBQUMsVUFBUyxDQUFDLENBQUM7RUFDcEMsS0FDSyxLQUFJLElBQUcsRUFBSSxFQUFBLENBQUEsRUFBSyxDQUFBLE9BQU0sR0FBSyxHQUFDLENBQUc7QUFDaEMsY0FBVSxTQUFTLEFBQUMsQ0FBQyxVQUFTLENBQUMsQ0FBQztFQUNwQyxLQUNLO0FBQ0QsV0FBTyxVQUFVLElBQUksS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFHLFlBQVUsQ0FBQyxDQUFDO0VBQ2xEO0FBQUEsQUFDSixDQUFDO0FBRUQsRUFBRSxVQUFVLGNBQWMsRUFBSSxVQUFVLFdBQVUsQ0FBRyxDQUFBLE1BQUssQ0FBRyxDQUFBLE1BQUssQ0FBRztBQUNqRSxLQUFJLE1BQUssSUFBTSxDQUFBLFFBQU8sT0FBTyxTQUFTLENBQUc7QUFDckMsY0FBVSxTQUFTLFFBQVEsS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFHLFlBQVUsQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNoRSxLQUNLO0FBQ0QsY0FBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsT0FBSyxDQUFDLENBQUM7RUFDbkM7QUFBQSxBQUNKLENBQUM7QUFFRCxLQUFLLFFBQVEsRUFBSSxJQUFFLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL2Zvci5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBBY3Rpdml0eSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5XCIpO1xubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmxldCBXaXRoQm9keSA9IHJlcXVpcmUoXCIuL3dpdGhCb2R5XCIpO1xuXG5mdW5jdGlvbiBGb3IoKSB7XG4gICAgV2l0aEJvZHkuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuZnJvbSA9IG51bGw7XG4gICAgdGhpcy50byA9IG51bGw7XG4gICAgdGhpcy5zdGVwID0gMTtcbiAgICB0aGlzLnZhck5hbWUgPSBcImlcIjtcblxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJfZG9TdGVwXCIpO1xufVxuXG51dGlsLmluaGVyaXRzKEZvciwgV2l0aEJvZHkpO1xuXG5Gb3IucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgYXJncykge1xuICAgIGNvbnN0IHZhck5hbWUgPSB0aGlzLnZhck5hbWU7XG4gICAgbGV0IGZyb20gPSB0aGlzLmZyb207XG4gICAgbGV0IHRvID0gdGhpcy50bztcbiAgICBsZXQgc3RlcCA9IHRoaXMuc3RlcDtcbiAgICBpZiAoIV8uaXNOdWxsKGZyb20pICYmICFfLmlzTnVsbCh0bykgJiYgIV8uaXNOdWxsKHN0ZXApKSB7XG4gICAgICAgIHRoaXNbdmFyTmFtZV0gPSBudWxsO1xuICAgICAgICBjYWxsQ29udGV4dC5zY2hlZHVsZShbZnJvbSwgdG8sIHN0ZXBdLCBcIl92YWx1ZXNHb3RcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZSgpO1xuICAgIH1cbn07XG5cbkZvci5wcm90b3R5cGUuX3ZhbHVlc0dvdCA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcbiAgICBpZiAocmVhc29uID09PSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5fZnJvbSA9IHJlc3VsdFswXTtcbiAgICAgICAgdGhpcy5fdG8gPSByZXN1bHRbMV07XG4gICAgICAgIHRoaXMuX3N0ZXAgPSByZXN1bHRbMl07XG4gICAgICAgIGNhbGxDb250ZXh0LmFjdGl2aXR5Ll9kb1N0ZXAuY2FsbCh0aGlzLCBjYWxsQ29udGV4dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsQ29udGV4dC50byhyZWFzb24sIHJlc3VsdCk7XG4gICAgfVxufTtcblxuRm9yLnByb3RvdHlwZS5fZG9TdGVwID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCBsYXN0UmVzdWx0KSB7XG4gICAgY29uc3QgdmFyTmFtZSA9IHRoaXMudmFyTmFtZTtcbiAgICBsZXQgZnJvbSA9IHRoaXMuX2Zyb207XG4gICAgbGV0IHRvID0gdGhpcy5fdG87XG4gICAgbGV0IHN0ZXAgPSB0aGlzLl9zdGVwO1xuICAgIGlmICghXy5pc051bWJlcihmcm9tKSkge1xuICAgICAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBUeXBlRXJyb3IoYFwiRm9yIGFjdGl2aXR5J3MgZnJvbSB2YWx1ZSAnJHtmcm9tfScgaXMgbm90IGEgbnVtYmVyLmApKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIV8uaXNOdW1iZXIodG8pKSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IFR5cGVFcnJvcihgXCJGb3IgYWN0aXZpdHkncyB0byB2YWx1ZSAnJHt0b30nIGlzIG5vdCBhIG51bWJlci5gKSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFfLmlzTnVtYmVyKHN0ZXApKSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IFR5cGVFcnJvcihgXCJGb3IgYWN0aXZpdHkncyBmcm9tIHZhbHVlICcke3N0ZXB9JyBpcyBub3QgYSBudW1iZXIuYCkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjdXJyZW50O1xuICAgIGlmIChfLmlzTnVsbCh0aGlzW3Zhck5hbWVdKSkge1xuICAgICAgICBjdXJyZW50ID0gdGhpc1t2YXJOYW1lXSA9IGZyb207XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjdXJyZW50ID0gdGhpc1t2YXJOYW1lXSA9ICh0aGlzW3Zhck5hbWVdICsgc3RlcCk7XG4gICAgfVxuICAgIGlmIChzdGVwID49IDAgJiYgY3VycmVudCA+PSB0bykge1xuICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZShsYXN0UmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3RlcCA8IDAgJiYgY3VycmVudCA8PSB0bykge1xuICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZShsYXN0UmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIFdpdGhCb2R5LnByb3RvdHlwZS5ydW4uY2FsbCh0aGlzLCBjYWxsQ29udGV4dCk7XG4gICAgfVxufTtcblxuRm9yLnByb3RvdHlwZS5ib2R5Q29tcGxldGVkID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xuICAgIGlmIChyZWFzb24gPT09IEFjdGl2aXR5LnN0YXRlcy5jb21wbGV0ZSkge1xuICAgICAgICBjYWxsQ29udGV4dC5hY3Rpdml0eS5fZG9TdGVwLmNhbGwodGhpcywgY2FsbENvbnRleHQsIHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRm9yOyJdfQ==
