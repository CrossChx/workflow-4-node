{"version":3,"names":[],"mappings":"","sources":["activities/scopeNode.js"],"sourcesContent":["\"use strict\";\n\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nlet is = require(\"../common/is\");\nlet assert = require(\"assert\");\n\nfunction ScopeNode(instanceId, scopePart, userId, activity) {\n    assert(instanceId);\n    assert(scopePart);\n    this.instanceId = instanceId;\n    this.userId = userId;\n    this.activity = activity || null;\n    this._parent = null;\n    this._children = new Map();\n    this._scopePart = scopePart;\n    this._keys = [];\n    for (let key in scopePart) {\n        this._keys.push(key);\n    }\n}\n\nObject.defineProperties(ScopeNode.prototype, {\n    _keys: {\n        value: null,\n        writable: true,\n        enumerable: false\n    },\n    scopePart: {\n        get: function() {\n            return this._scopePart;\n        }\n    },\n    parent: {\n        get: function () {\n            return this._parent;\n        },\n        set: function (value) {\n            if (value !== null && !(value instanceof ScopeNode)) {\n                throw new TypeError(\"Node argument expected.\");\n            }\n            if (this._parent !== null) {\n                throw new Error(\"Parent already defined.\");\n            }\n            value.addChild(this);\n        }\n    }\n});\n\nScopeNode.prototype.walkToRoot = function* () {\n    let current = this;\n    while (current) {\n        yield current;\n        current = current._parent;\n    }\n};\n\nScopeNode.prototype.children = function* () {\n    for (let child of this._children.values()) {\n        yield child;\n    }\n};\n\nScopeNode.prototype.addChild = function (childItem) {\n    if (!(childItem instanceof ScopeNode)) {\n        throw new TypeError(\"Node argument expected.\");\n    }\n    if (childItem._parent) {\n        throw new Error(\"Item has been already ha a parent node.\");\n    }\n    childItem._parent = this;\n    this._children.set(childItem.instanceId, childItem);\n};\n\nScopeNode.prototype.removeChild = function (childItem) {\n    if (!(childItem instanceof ScopeNode)) {\n        throw new TypeError(\"Node argument expected.\");\n    }\n    if (childItem._parent !== this) {\n        throw new Error(\"Item is not a current node's child.\");\n    }\n    childItem._parent = null;\n    this._children.delete(childItem.instanceId);\n};\n\nScopeNode.prototype.clearChildren = function () {\n    this._children.clear();\n};\n\nScopeNode.prototype.isPropertyExists = function (name) {\n    return !_.isUndefined(this._scopePart[name]);\n};\n\nScopeNode.prototype.getPropertyValue = function (name, canReturnPrivate) {\n    if (canReturnPrivate) {\n        return this._scopePart[name];\n    }\n    else if (!this._isPrivate(name)) {\n        return this._scopePart[name];\n    }\n};\n\nScopeNode.prototype.setPropertyValue = function (name, value, canSetPrivate) {\n    if (this._isPrivate(name)) {\n        if (canSetPrivate) {\n            if (!this.isPropertyExists(name)) {\n                this._keys.push(name);\n            }\n            this._scopePart[name] = value;\n            return true;\n        }\n    }\n    else if (!_.isUndefined(this._scopePart[name])) {\n        this._scopePart[name] = value;\n        return true;\n    }\n    return false;\n};\n\nScopeNode.prototype.createPropertyWithValue = function (name, value) {\n    if (!this.isPropertyExists(name)) {\n        this._keys.push(name);\n    }\n    this._scopePart[name] = value;\n};\n\nScopeNode.prototype.deleteProperty = function (name, canDeletePrivate) {\n    if (!_.isUndefined(this._scopePart[name])) {\n        if (this._isPrivate(name)) {\n            if (canDeletePrivate) {\n                this._keys.splice(_.indexOf(this._keys, name), 1);\n                delete this._scopePart[name];\n                return true;\n            }\n        }\n        else {\n            this._keys.splice(_.indexOf(this._keys, name), 1);\n            delete this._scopePart[name];\n            return true;\n        }\n    }\n    return false;\n};\n\nScopeNode.prototype.enumeratePropertyNames = function* (canEnumeratePrivate) {\n    if (canEnumeratePrivate) {\n        for (let i = 0; i < this._keys.length; i++) {\n            yield this._keys[i];\n        }\n    }\n    else {\n        for (let i = 0; i < this._keys.length; i++) {\n            let key = this._keys[i];\n            if (!this._isPrivate(key)) {\n                yield key;\n            }\n        }\n    }\n};\n\nScopeNode.prototype.properties = function* () {\n    let self = this;\n    for (let fn of self._keys) {\n        yield { name: fn, value: self._scopePart[fn] };\n    }\n};\n\nScopeNode.prototype._isPrivate = function (key) {\n    return key[0] === \"_\";\n};\n\nmodule.exports = ScopeNode;\n"],"file":"activities/scopeNode.js","sourceRoot":"/source/"}