{"version":3,"names":[],"mappings":"","sources":["activities/scopeNode.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet util = require(\"util\");\r\nlet _ = require(\"lodash\");\r\nlet is = require(\"../common/is\");\r\nlet assert = require(\"assert\");\r\n\r\nfunction ScopeNode(instanceId, scopePart, userId, activity) {\r\n    assert(instanceId);\r\n    assert(scopePart);\r\n    this.instanceId = instanceId;\r\n    this.userId = userId;\r\n    this.activity = activity || null;\r\n    this._parent = null;\r\n    this._children = new Map();\r\n    this._scopePart = scopePart;\r\n    this._keys = [];\r\n    for (let key in scopePart) {\r\n        this._keys.push(key);\r\n    }\r\n}\r\n\r\nObject.defineProperties(ScopeNode.prototype, {\r\n    _keys: {\r\n        value: null,\r\n        writable: true,\r\n        enumerable: false\r\n    },\r\n    scopePart: {\r\n        get: function() {\r\n            return this._scopePart;\r\n        }\r\n    },\r\n    parent: {\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        set: function (value) {\r\n            if (value !== null && !(value instanceof ScopeNode)) {\r\n                throw new TypeError(\"Node argument expected.\");\r\n            }\r\n            if (this._parent !== null) {\r\n                throw new Error(\"Parent already defined.\");\r\n            }\r\n            value.addChild(this);\r\n        }\r\n    }\r\n});\r\n\r\nScopeNode.prototype.walkToRoot = function* () {\r\n    let current = this;\r\n    while (current) {\r\n        yield current;\r\n        current = current._parent;\r\n    }\r\n};\r\n\r\nScopeNode.prototype.children = function* () {\r\n    for (let child of this._children.values()) {\r\n        yield child;\r\n    }\r\n};\r\n\r\nScopeNode.prototype.addChild = function (childItem) {\r\n    if (!(childItem instanceof ScopeNode)) {\r\n        throw new TypeError(\"Node argument expected.\");\r\n    }\r\n    if (childItem._parent) {\r\n        throw new Error(\"Item has been already ha a parent node.\");\r\n    }\r\n    childItem._parent = this;\r\n    this._children.set(childItem.instanceId, childItem);\r\n};\r\n\r\nScopeNode.prototype.removeChild = function (childItem) {\r\n    if (!(childItem instanceof ScopeNode)) {\r\n        throw new TypeError(\"Node argument expected.\");\r\n    }\r\n    if (childItem._parent !== this) {\r\n        throw new Error(\"Item is not a current node's child.\");\r\n    }\r\n    childItem._parent = null;\r\n    this._children.delete(childItem.instanceId);\r\n};\r\n\r\nScopeNode.prototype.clearChildren = function () {\r\n    this._children.clear();\r\n};\r\n\r\nScopeNode.prototype.isPropertyExists = function (name) {\r\n    return !_.isUndefined(this._scopePart[name]);\r\n};\r\n\r\nScopeNode.prototype.getPropertyValue = function (name, canReturnPrivate) {\r\n    if (canReturnPrivate) {\r\n        return this._scopePart[name];\r\n    }\r\n    else if (!this._isPrivate(name)) {\r\n        return this._scopePart[name];\r\n    }\r\n};\r\n\r\nScopeNode.prototype.setPropertyValue = function (name, value, canSetPrivate) {\r\n    if (this._isPrivate(name)) {\r\n        if (canSetPrivate) {\r\n            if (!this.isPropertyExists(name)) {\r\n                this._keys.push(name);\r\n            }\r\n            this._scopePart[name] = value;\r\n            return true;\r\n        }\r\n    }\r\n    else if (!_.isUndefined(this._scopePart[name])) {\r\n        this._scopePart[name] = value;\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nScopeNode.prototype.createPropertyWithValue = function (name, value) {\r\n    if (!this.isPropertyExists(name)) {\r\n        this._keys.push(name);\r\n    }\r\n    this._scopePart[name] = value;\r\n};\r\n\r\nScopeNode.prototype.deleteProperty = function (name, canDeletePrivate) {\r\n    if (!_.isUndefined(this._scopePart[name])) {\r\n        if (this._isPrivate(name)) {\r\n            if (canDeletePrivate) {\r\n                this._keys.splice(_.indexOf(this._keys, name), 1);\r\n                delete this._scopePart[name];\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            this._keys.splice(_.indexOf(this._keys, name), 1);\r\n            delete this._scopePart[name];\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nScopeNode.prototype.enumeratePropertyNames = function* (canEnumeratePrivate) {\r\n    if (canEnumeratePrivate) {\r\n        for (let i = 0; i < this._keys.length; i++) {\r\n            yield this._keys[i];\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < this._keys.length; i++) {\r\n            let key = this._keys[i];\r\n            if (!this._isPrivate(key)) {\r\n                yield key;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nScopeNode.prototype.properties = function* () {\r\n    let self = this;\r\n    for (let fn of self._keys) {\r\n        yield { name: fn, value: self._scopePart[fn] };\r\n    }\r\n};\r\n\r\nScopeNode.prototype._isPrivate = function (key) {\r\n    return key[0] === \"_\";\r\n};\r\n\r\nmodule.exports = ScopeNode;\r\n"],"file":"activities/scopeNode.js","sourceRoot":"/source/"}