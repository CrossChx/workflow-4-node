{"version":3,"names":[],"mappings":"","sources":["activities/for.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet _ = require(\"lodash\");\r\nlet WithBody = require(\"./withBody\");\r\n\r\nfunction For() {\r\n    WithBody.call(this);\r\n\r\n    this.from = null;\r\n    this.to = null;\r\n    this.step = 1;\r\n    this.varName = \"i\";\r\n\r\n    this.nonScopedProperties.add(\"_doStep\");\r\n}\r\n\r\nutil.inherits(For, WithBody);\r\n\r\nFor.prototype.run = function (callContext, args) {\r\n    const varName = this.varName;\r\n    let from = this.from;\r\n    let to = this.to;\r\n    let step = this.step;\r\n    if (!_.isNull(from) && !_.isNull(to) && !_.isNull(step)) {\r\n        this[varName] = null;\r\n        callContext.schedule([from, to, step], \"_valuesGot\");\r\n    }\r\n    else {\r\n        callContext.complete();\r\n    }\r\n};\r\n\r\nFor.prototype._valuesGot = function (callContext, reason, result) {\r\n    if (reason === Activity.states.complete) {\r\n        this._from = result[0];\r\n        this._to = result[1];\r\n        this._step = result[2];\r\n        callContext.activity._doStep.call(this, callContext);\r\n    }\r\n    else {\r\n        callContext.to(reason, result);\r\n    }\r\n};\r\n\r\nFor.prototype._doStep = function (callContext, lastResult) {\r\n    const varName = this.varName;\r\n    let from = this._from;\r\n    let to = this._to;\r\n    let step = this._step;\r\n    if (!_.isNumber(from)) {\r\n        callContext.fail(new TypeError(`\"For activity's from value '${from}' is not a number.`));\r\n        return;\r\n    }\r\n    if (!_.isNumber(to)) {\r\n        callContext.fail(new TypeError(`\"For activity's to value '${to}' is not a number.`));\r\n        return;\r\n    }\r\n    if (!_.isNumber(step)) {\r\n        callContext.fail(new TypeError(`\"For activity's from value '${step}' is not a number.`));\r\n        return;\r\n    }\r\n    let current;\r\n    if (_.isNull(this[varName])) {\r\n        current = this[varName] = from;\r\n    }\r\n    else {\r\n        current = this[varName] = (this[varName] + step);\r\n    }\r\n    if (step >= 0 && current >= to) {\r\n        callContext.complete(lastResult);\r\n    }\r\n    else if (step < 0 && current <= to) {\r\n        callContext.complete(lastResult);\r\n    }\r\n    else {\r\n        WithBody.prototype.run.call(this, callContext);\r\n    }\r\n};\r\n\r\nFor.prototype.bodyCompleted = function (callContext, reason, result) {\r\n    if (reason === Activity.states.complete) {\r\n        callContext.activity._doStep.call(this, callContext, result);\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nmodule.exports = For;"],"file":"activities/for.js","sourceRoot":"/source/"}