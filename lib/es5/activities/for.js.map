{"version":3,"names":[],"mappings":"","sources":["activities/for.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nlet WithBody = require(\"./withBody\");\n\nfunction For() {\n    WithBody.call(this);\n\n    this.from = null;\n    this.to = null;\n    this.step = 1;\n    this.varName = \"i\";\n\n    this.nonScopedProperties.add(\"_doStep\");\n}\n\nutil.inherits(For, WithBody);\n\nFor.prototype.run = function (callContext, args) {\n    const varName = this.varName;\n    let from = this.from;\n    let to = this.to;\n    let step = this.step;\n    if (!_.isNull(from) && !_.isNull(to) && !_.isNull(step)) {\n        this[varName] = null;\n        callContext.schedule([from, to, step], \"_valuesGot\");\n    }\n    else {\n        callContext.complete();\n    }\n};\n\nFor.prototype._valuesGot = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        this._from = result[0];\n        this._to = result[1];\n        this._step = result[2];\n        callContext.activity._doStep.call(this, callContext);\n    }\n    else {\n        callContext.to(reason, result);\n    }\n};\n\nFor.prototype._doStep = function (callContext, lastResult) {\n    const varName = this.varName;\n    let from = this._from;\n    let to = this._to;\n    let step = this._step;\n    if (!_.isNumber(from)) {\n        callContext.fail(new TypeError(`\"For activity's from value '${from}' is not a number.`));\n        return;\n    }\n    if (!_.isNumber(to)) {\n        callContext.fail(new TypeError(`\"For activity's to value '${to}' is not a number.`));\n        return;\n    }\n    if (!_.isNumber(step)) {\n        callContext.fail(new TypeError(`\"For activity's from value '${step}' is not a number.`));\n        return;\n    }\n    let current;\n    if (_.isNull(this[varName])) {\n        current = this[varName] = from;\n    }\n    else {\n        current = this[varName] = (this[varName] + step);\n    }\n    if (step >= 0 && current >= to) {\n        callContext.complete(lastResult);\n    }\n    else if (step < 0 && current <= to) {\n        callContext.complete(lastResult);\n    }\n    else {\n        WithBody.prototype.run.call(this, callContext);\n    }\n};\n\nFor.prototype.bodyCompleted = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        callContext.activity._doStep.call(this, callContext, result);\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nmodule.exports = For;"],"file":"activities/for.js","sourceRoot":"/source/"}