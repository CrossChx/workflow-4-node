{"version":3,"names":[],"mappings":"","sources":["activities/try.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet errors = require(\"../common/errors\");\nlet _ = require(\"lodash\");\nlet Block = require(\"./block\");\n\nfunction Try() {\n    Activity.call(this);\n\n    this.arrayProperties.add(\"catch\");\n    this.arrayProperties.add(\"finally\");\n    this.nonScopedProperties.add(\"continueAfterFinally\");\n\n    this.varName = \"e\";\n    this._body = null;\n    this.catch = null;\n    this.finally = null;\n}\n\nutil.inherits(Try, Activity);\n\nTry.prototype.initializeStructure = function() {\n    this._body = new Block();\n    this._body.args = this.args;\n    this.args = null;\n    if (this.catch) {\n        let prev = this.catch;\n        this.catch = new Block();\n        this.catch.args = prev;\n    }\n    if (this.finally) {\n        let prev = this.finally;\n        this.finally = new Block();\n        this.finally.args = prev;\n    }\n};\n\nTry.prototype.run = function (callContext, args) {\n    callContext.schedule(this._body, \"_bodyFinished\");\n};\n\nTry.prototype._bodyFinished = function(callContext, reason, result) {\n    if (this.catch || this.finally) {\n        this._originalResult = result;\n        this._originalReason = reason;\n        if (reason === Activity.states.fail && !(result instanceof errors.ActivityRuntimeError) && this.catch) {\n            this[this.varName] = result;\n            this.Try_ReThrow = false;\n            callContext.schedule(this.catch, \"_catchDone\");\n            return;\n        }\n        else if ((reason === Activity.states.fail || reason === Activity.states.complete) && this.finally) {\n            callContext.schedule(this.finally, \"_finallyDone\");\n            return;\n        }\n    }\n    callContext.end(reason, result);\n};\n\nTry.prototype._catchDone = function(callContext, reason, result) {\n    if (reason !== Activity.states.complete) {\n        callContext.end(reason, result);\n        return;\n    }\n\n    this._catchResult = result;\n    if (this.finally) {\n        callContext.schedule(this.finally, \"_finallyDone\");\n    }\n    else {\n        callContext.activity.continueAfterFinally.call(this, callContext);\n    }\n};\n\nTry.prototype._finallyDone = function(callContext, reason, result) {\n    if (reason !== Activity.states.complete) {\n        callContext.end(reason, result);\n        return;\n    }\n\n    callContext.activity.continueAfterFinally.call(this, callContext);\n};\n\nTry.prototype.continueAfterFinally = function(callContext) {\n    let reason = this._originalReason;\n    let result = this._originalResult;\n    if (reason === Activity.states.fail && !_.isUndefined(this.Try_ReThrow)) {\n        // We've came from a catch:\n        if (this.Try_ReThrow === true) {\n            callContext.fail(result);\n        }\n        else if (this.Try_ReThrow instanceof Error) {\n            callContext.fail(this.Try_ReThrow);\n        }\n        else {\n            callContext.complete(this._catchResult);\n        }\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nmodule.exports = Try;"],"file":"activities/try.js","sourceRoot":"/source/"}