{"version":3,"names":[],"mappings":"","sources":["activities/try.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet errors = require(\"../common/errors\");\r\nlet _ = require(\"lodash\");\r\nlet Block = require(\"./block\");\r\n\r\nfunction Try() {\r\n    Activity.call(this);\r\n\r\n    this.arrayProperties.add(\"catch\");\r\n    this.arrayProperties.add(\"finally\");\r\n    this.nonScopedProperties.add(\"continueAfterFinally\");\r\n\r\n    this.varName = \"e\";\r\n    this._body = null;\r\n    this.catch = null;\r\n    this.finally = null;\r\n}\r\n\r\nutil.inherits(Try, Activity);\r\n\r\nTry.prototype.initializeStructure = function() {\r\n    this._body = new Block();\r\n    this._body.args = this.args;\r\n    this.args = null;\r\n    if (this.catch) {\r\n        let prev = this.catch;\r\n        this.catch = new Block();\r\n        this.catch.args = prev;\r\n    }\r\n    if (this.finally) {\r\n        let prev = this.finally;\r\n        this.finally = new Block();\r\n        this.finally.args = prev;\r\n    }\r\n};\r\n\r\nTry.prototype.run = function (callContext, args) {\r\n    callContext.schedule(this._body, \"_bodyFinished\");\r\n};\r\n\r\nTry.prototype._bodyFinished = function(callContext, reason, result) {\r\n    if (this.catch || this.finally) {\r\n        this._originalResult = result;\r\n        this._originalReason = reason;\r\n        if (reason === Activity.states.fail && !(result instanceof errors.ActivityRuntimeError) && this.catch) {\r\n            this[this.varName] = result;\r\n            this.Try_ReThrow = false;\r\n            callContext.schedule(this.catch, \"_catchDone\");\r\n            return;\r\n        }\r\n        else if ((reason === Activity.states.fail || reason === Activity.states.complete) && this.finally) {\r\n            callContext.schedule(this.finally, \"_finallyDone\");\r\n            return;\r\n        }\r\n    }\r\n    callContext.end(reason, result);\r\n};\r\n\r\nTry.prototype._catchDone = function(callContext, reason, result) {\r\n    if (reason !== Activity.states.complete) {\r\n        callContext.end(reason, result);\r\n        return;\r\n    }\r\n\r\n    this._catchResult = result;\r\n    if (this.finally) {\r\n        callContext.schedule(this.finally, \"_finallyDone\");\r\n    }\r\n    else {\r\n        callContext.activity.continueAfterFinally.call(this, callContext);\r\n    }\r\n};\r\n\r\nTry.prototype._finallyDone = function(callContext, reason, result) {\r\n    if (reason !== Activity.states.complete) {\r\n        callContext.end(reason, result);\r\n        return;\r\n    }\r\n\r\n    callContext.activity.continueAfterFinally.call(this, callContext);\r\n};\r\n\r\nTry.prototype.continueAfterFinally = function(callContext) {\r\n    let reason = this._originalReason;\r\n    let result = this._originalResult;\r\n    if (reason === Activity.states.fail && !_.isUndefined(this.Try_ReThrow)) {\r\n        // We've came from a catch:\r\n        if (this.Try_ReThrow === true) {\r\n            callContext.fail(result);\r\n        }\r\n        else if (this.Try_ReThrow instanceof Error) {\r\n            callContext.fail(this.Try_ReThrow);\r\n        }\r\n        else {\r\n            callContext.complete(this._catchResult);\r\n        }\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nmodule.exports = Try;"],"file":"activities/try.js","sourceRoot":"/source/"}