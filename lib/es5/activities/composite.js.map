{"version":3,"names":[],"mappings":"","sources":["activities/composite.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet constants = require(\"../common/constants\");\nlet Declarator = require(\"./declarator\");\nlet is = require(\"../common/is\");\nlet _ = require(\"lodash\");\nlet activityMarkup = require(\"./activityMarkup\");\nlet assert = require(\"assert\");\n\nfunction Composite() {\n    Declarator.call(this);\n\n    this.reservedProperties.add(\"_implementation\");\n    this.nonSerializedProperties.add(\"_implementation\");\n    this.nonScopedProperties.add(\"createImplementation\");\n    this.nonScopedProperties.add(\"ensureImplementationCreated\");\n    this.nonScopedProperties.add(\"implementationCompleted\");\n}\n\nutil.inherits(Composite, Declarator);\n\nComposite.prototype.createImplementation = function (execContext) {\n    throw new Error(\"Method 'createImplementation' not implemented.\");\n};\n\nComposite.prototype.ensureImplementationCreated = function (execContext) {\n    assert(!!execContext);\n    if (_.isUndefined(this._implementation)) {\n        this._implementation = this.createImplementation(execContext);\n        if (_.isPlainObject(this._implementation)) {\n            this._implementation = activityMarkup.parse(this._implementation);\n        }\n        if (!(this._implementation instanceof Activity)) {\n            throw new Error(\"Method 'createImplementation' must return an activity.\");\n        }\n    }\n};\n\nComposite.prototype.initializeStructure = function (execContext) {\n    assert(!!execContext);\n    this.ensureImplementationCreated(execContext);\n};\n\nComposite.prototype.run = function (callContext, args) {\n    if (!(this._implementation instanceof Activity)) {\n        throw new Error(\"Composite activity's implementation is not available.\");\n    }\n    Declarator.prototype.run.call(this, callContext, args);\n};\n\nComposite.prototype.varsDeclared = function (callContext, args) {\n    callContext.schedule(this._implementation, \"_implInvoked\");\n};\n\nComposite.prototype._implInvoked = function (callContext, reason, result) {\n    callContext.activity.implementationCompleted.call(this, callContext, reason, result);\n};\n\nComposite.prototype.implementationCompleted = function (callContext, reason, result) {\n    callContext.end(reason, result);\n};\n\nmodule.exports = Composite;"],"file":"activities/composite.js","sourceRoot":"/source/"}