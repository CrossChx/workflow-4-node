{"version":3,"names":[],"mappings":"","sources":["activities/func.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nlet common = require(\"../common\");\nlet errors = common.errors;\nlet constants = common.constants;\nlet async = common.asyncHelpers.async;\n\nfunction Func(code) {\n    Activity.call(this);\n    this.code = code || null;\n    this.codeProperties.add(\"code\");\n}\n\nFunc.async = function(code) {\n    return new Func(async(code));\n};\n\nutil.inherits(Func, Activity);\n\nFunc.prototype.run = function (callContext, args) {\n    callContext.schedule(args, \"_argsGot\");\n};\n\nFunc.prototype._argsGot = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        this._args = result;\n        callContext.schedule(this.code, \"_codeGot\");\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nFunc.prototype._codeGot = function (callContext, reason, result) {\n    let code = result;\n    if (reason === Activity.states.complete) {\n        if (!_.isFunction(code)) {\n            callContext.fail(new errors.ValidationError(\"Func activity's property 'code' is not a function.\"));\n            return;\n        }\n\n        try {\n            let fResult = code.apply(this, (this._args || []).concat(_));\n            if (_.isObject(fResult) && _.isFunction(fResult.then)) {\n                fResult.then(\n                    function (v) {\n                        callContext.complete(v);\n                    },\n                    function (err) {\n                        callContext.fail(err);\n                    });\n            }\n            else {\n                callContext.complete(fResult);\n            }\n        }\n        catch(e) {\n            callContext.fail(e);\n        }\n    }\n    else {\n        callContext.end(reason, this._args);\n    }\n};\n\nmodule.exports = Func;"],"file":"activities/func.js","sourceRoot":"/source/"}