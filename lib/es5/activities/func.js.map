{"version":3,"names":[],"mappings":"","sources":["activities/func.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet _ = require(\"lodash\");\r\nlet common = require(\"../common\");\r\nlet errors = common.errors;\r\nlet constants = common.constants;\r\nlet async = common.asyncHelpers.async;\r\n\r\nfunction Func(code) {\r\n    Activity.call(this);\r\n    this.code = code || null;\r\n    this.codeProperties.add(\"code\");\r\n}\r\n\r\nFunc.async = function(code) {\r\n    return new Func(async(code));\r\n};\r\n\r\nutil.inherits(Func, Activity);\r\n\r\nFunc.prototype.run = function (callContext, args) {\r\n    callContext.schedule(args, \"_argsGot\");\r\n};\r\n\r\nFunc.prototype._argsGot = function (callContext, reason, result) {\r\n    if (reason === Activity.states.complete) {\r\n        this._args = result;\r\n        callContext.schedule(this.code, \"_codeGot\");\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nFunc.prototype._codeGot = function (callContext, reason, result) {\r\n    let code = result;\r\n    if (reason === Activity.states.complete) {\r\n        if (!_.isFunction(code)) {\r\n            callContext.fail(new errors.ValidationError(\"Func activity's property 'code' is not a function.\"));\r\n            return;\r\n        }\r\n\r\n        try {\r\n            let fResult = code.apply(this, (this._args || []).concat(_, this));\r\n            if (_.isObject(fResult) && _.isFunction(fResult.then)) {\r\n                fResult.then(\r\n                    function (v) {\r\n                        callContext.complete(v);\r\n                    },\r\n                    function (err) {\r\n                        callContext.fail(err);\r\n                    });\r\n            }\r\n            else {\r\n                callContext.complete(fResult);\r\n            }\r\n        }\r\n        catch(e) {\r\n            callContext.fail(e);\r\n        }\r\n    }\r\n    else {\r\n        callContext.end(reason, this._args);\r\n    }\r\n};\r\n\r\nmodule.exports = Func;"],"file":"activities/func.js","sourceRoot":"/source/"}