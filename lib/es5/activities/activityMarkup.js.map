{"version":3,"names":[],"mappings":"","sources":["activities/activityMarkup.js"],"sourcesContent":["\"use strict\";\n\n/* jshint -W061 */\n\nlet _ = require(\"lodash\");\nlet errors = require(\"../common/errors\");\nlet Activity = require(\"./activity\");\nlet is = require(\"../common/is\");\nlet path = require(\"path\");\nlet fs = require(\"fs\");\nlet Reflection = require(\"backpack-node\").system.Reflection;\nlet templateHelpers = require('./templateHelpers');\n\nconst activityTypeNameRex = /^\\@([a-zA-Z_]+[0-9a-zA-Z_]*)$/;\nfunction getActivityTypeName(str) {\n    if (_.isString(str)) {\n        let result = activityTypeNameRex.exec(str);\n        if (result && result.length === 2) {\n            return result[1];\n        }\n    }\n    return null;\n}\n\nfunction requireFromRoot(resource) {\n    let pPos = resource.indexOf(\"/\");\n    if (pPos === -1) {\n        return require(resource);\n    }\n    let module = resource.substr(0, pPos);\n    if (!module) {\n        return require(resource);\n    }\n    try {\n        module = require(module);\n        let obj = module;\n        for (let key of resource.substr(pPos + 1).split(\"/\")) {\n            obj = obj[key];\n        }\n        return obj;\n    }\n    catch (e) {\n        return require(resource);\n    }\n}\n\nfunction ActivityMarkup() {\n    this._systemTypes = new Map();\n    this._registerSystemTypes();\n}\n\nActivityMarkup.prototype._registerSystemTypes = function () {\n    this._registerTypes(__dirname);\n};\n\nActivityMarkup.prototype._registerTypes = function (sourcePath) {\n    this._registerTypesTo(this._systemTypes, sourcePath);\n};\n\nActivityMarkup.prototype._registerTypesTo = function (types, sourcePath) {\n    let self = this;\n    let obj = requireFromRoot(sourcePath);\n    Reflection.visitObject(obj, function (inObj) {\n        let alias = self.getAlias(inObj);\n        if (alias && !types.has(alias)) {\n            // This is an activity type\n            types.set(alias, inObj);\n        }\n        return alias === null;\n    });\n};\n\nActivityMarkup.prototype.getAlias = function (type) {\n    if (_.isFunction(type) && !_.isUndefined(type.super_)) {\n        let alias = this._toCamelCase(type.name);\n        do\n        {\n            if (type.super_ === Activity) {\n                return alias;\n            }\n            type = type.super_;\n        }\n        while (type);\n    }\n    return null;\n};\n\nActivityMarkup.prototype._toCamelCase = function (id) {\n    return id[0].toLowerCase() + id.substr(1);\n};\n\nActivityMarkup.prototype.parse = function (markup) {\n    if (!markup) {\n        throw new TypeError(\"Parameter 'markup' expected.\");\n    }\n    if (_.isString(markup)) {\n        markup = JSON.parse(markup);\n    }\n    if (!_.isPlainObject(markup)) {\n        throw new TypeError(\"Parameter 'markup' is not a plain object.\");\n    }\n\n    let types = new Map();\n    for (let kvp of this._systemTypes.entries()) {\n        types.set(kvp[0], kvp[1]);\n    }\n    let req = markup[\"@require\"];\n    if (req) {\n        this._require(types, req);\n    }\n    let activity = this._createActivity(types, markup);\n    if (req) {\n        activity[\"@require\"] = req;\n    }\n    return activity;\n};\n\nActivityMarkup.prototype._createActivity = function (types, markup) {\n    let filedNames = _.filter(_.keys(markup), function (k) { return k !== \"@require\"; });\n    if (filedNames.length !== 1) {\n        throw new errors.ActivityMarkupError(\"There should be one field.\" + this._errorHint(markup));\n    }\n\n    let activityAlias = getActivityTypeName(filedNames[0]);\n    if (activityAlias) {\n        return this._createAndInitActivityInstance(types, activityAlias, markup);\n    }\n    else {\n        throw new errors.ActivityMarkupError(\"Root entry is not an activity type name '\" + filedNames[0] + \"'.\" + this._errorHint(markup));\n    }\n};\n\nActivityMarkup.prototype._createAndInitActivityInstance = function (types, typeName, markup) {\n    let activity = this._createActivityInstance(types, typeName);\n    if (!activity) {\n        throw new errors.ActivityMarkupError(\"Unknown activity type name '\" + typeName + \"'.\" + this._errorHint(markup));\n    }\n    let activityRef = {\n        name: typeName,\n        value: activity\n    };\n    let pars = markup[\"@\" + typeName];\n    if (pars) {\n        this._setupActivity(types, activityRef, pars);\n    }\n    return activityRef.value;\n};\n\nActivityMarkup.prototype._createActivityInstance = function (types, alias) {\n    let Constructor = types.get(alias);\n    if (_.isUndefined(Constructor)) {\n        return null;\n    }\n    return new Constructor();\n};\n\nActivityMarkup.prototype._setupActivity = function (types, activityRef, pars) {\n    let self = this;\n    let activity = activityRef.value;\n\n    function noFunction(fieldName) {\n        return activity.codeProperties.has(fieldName);\n    }\n\n    if (_.isArray(pars)) {\n        // args\n        activity.args = [];\n        for (let obj of pars) {\n            activity.args.push(self._createValue(types, obj, false, is.template(activity)));\n        }\n    }\n    else if (_.isObject(pars)) {\n        let to = null;\n        // values\n        for (let fieldName in pars) {\n            if (pars.hasOwnProperty(fieldName)) {\n                if (activity.isArrayProperty(fieldName)) {\n                    let v = self._createValue(types, pars[fieldName], true, is.template(activity));\n                    if (!_.isArray(v)) {\n                        v = [v];\n                    }\n                    activity[fieldName] = v;\n                }\n                else if (fieldName === \"@to\") {\n                    if (to) {\n                        throw new errors.ActivityMarkupError(\"Multiple to defined in activity '\" + activityRef.name + \".\" + this._errorHint(pars));\n                    }\n                    to = pars[fieldName];\n                }\n                else if (fieldName[0] === \"!\") {\n                    // Promoted:\n                    if (!activity.promotedProperties || !_.isFunction(activity.promoted)) {\n                        throw new errors.ActivityMarkupError(\"Activity '\" + activityRef.name + \" cannot have promoted properties.\" + this._errorHint(pars));\n                    }\n                    activity.promoted(fieldName.substr(1), self._createValue(types, pars[fieldName], true, is.template(activity)));\n                }\n                else if (fieldName[0] === \"`\") {\n                    // Reserved:\n                    if (!activity.reservedProperties || !_.isFunction(activity.reserved)) {\n                        throw new errors.ActivityMarkupError(\"Activity '\" + activityRef.name + \" cannot have reserved properties.\" + this._errorHint(pars));\n                    }\n                    activity.reserved(fieldName.substr(1), self._createValue(types, pars[fieldName], true, is.template(activity)));\n                }\n                else if (fieldName === \"@require\") {\n                    // Require:\n                    self._require(types, pars[fieldName]);\n                }\n                else {\n                    activity[fieldName] = self._createValue(types, pars[fieldName], false, is.template(activity), noFunction(fieldName));\n                }\n            }\n        }\n        if (to) {\n            let current = activity;\n            let assign = activityRef.value = this._createActivityInstance(types, \"assign\");\n            assign.value = current;\n            assign.to = to;\n        }\n    }\n    else {\n        // 1 arg\n        activity.args = [self._createValue(types, pars, false, is.template(activity))];\n    }\n};\n\nActivityMarkup.prototype._require = function (types, markup) {\n    let self = this;\n\n    if (_.isArray(markup)) {\n        for (let item of markup) {\n            self._require(types, item);\n        }\n    }\n    else if (_.isString(markup)) {\n        self._registerTypesTo(types, markup);\n    }\n    else {\n        throw new errors.ActivityMarkupError(\"Cannot register '\" + markup + \"'.\" + self._errorHint(markup));\n    }\n};\n\nActivityMarkup.prototype._createValue = function (types, markup, canBeArray, noTemplate, noFunction) {\n    let self = this;\n\n    // Helpers\n    function templatize(_markup) {\n        let template = self._createActivityInstance(types, \"template\");\n        template.declare = _markup;\n        return template;\n    }\n\n    function funcletize(f) {\n        let func = self._createActivityInstance(types, \"func\");\n        func.code = f;\n        return func;\n    }\n\n    function expressionize(str) {\n        let expr = self._createActivityInstance(types, \"expression\");\n        expr.expr = str;\n        return expr;\n    }\n\n    if (_.isArray(markup)) {\n        if (canBeArray) {\n            let result = [];\n            for (let v of markup) {\n                result.push(self._createValue(types, v));\n            }\n            return result;\n        }\n        else if (!noTemplate && templateHelpers.isTemplate(markup)) {\n            return templatize(markup);\n        }\n    }\n    else if (_.isPlainObject(markup)) {\n        let filedNames = _.keys(markup);\n        if (filedNames.length === 1) {\n            let fieldName = filedNames[0];\n            let fieldValue = markup[fieldName];\n\n            if (fieldName === \"_\") {\n                // Escape:\n                return fieldValue;\n            }\n\n            let activityTypeName = getActivityTypeName(fieldName);\n            if (activityTypeName) {\n                // Activity:\n                return self._createAndInitActivityInstance(types, activityTypeName, markup);\n            }\n        }\n\n        // Plain object:\n        if (!noTemplate && templateHelpers.isTemplate(markup)) {\n            return templatize(markup);\n        }\n    }\n    else if (_.isString(markup)) {\n        let str = markup.trim();\n        if (templateHelpers.isFunctionString(str)) {\n            let f;\n            eval(\"f = function(_){return (\" + str + \");}\");\n            f = f(_);\n            if (!noFunction) {\n                return funcletize(f);\n            }\n            else {\n                return f; // aka when func.code\n            }\n        }\n        else if (str.length > 1) {\n            if (str[0] === \"=\") {\n                // Expression\n                return expressionize(str.substr(1));\n            }\n        }\n    }\n    else if (_.isFunction(markup)) {\n        if (!noFunction) {\n            return funcletize(markup);\n        }\n    }\n\n    return markup;\n};\n\nActivityMarkup.prototype._errorHint = function (markup) {\n    let len = 20;\n    let json = JSON.stringify(markup);\n    if (json.length > len) {\n        json = json.substr(0, len) + \" ...\";\n    }\n    return \"\\nSee error near:\\n\" + json;\n};\n\nActivityMarkup.prototype.stringify = function (obj) {\n    if (_.isString(obj)) {\n        return obj;\n    }\n    if (is.activity(obj)) {\n        obj = this.toMarkup(obj);\n    }\n    if (!_.isPlainObject(obj)) {\n        throw new TypeError(\"Parameter 'obj' is not a plain object.\");\n    }\n    let cloned = _.cloneDeep(obj);\n    this._functionsToString(cloned);\n    return JSON.stringify(cloned);\n};\n\nActivityMarkup.prototype._functionsToString = function (obj) {\n    let self = this;\n    for (let fieldName in obj) {\n        let fieldValue = obj[fieldName];\n        if (_.isFunction(fieldValue)) {\n            obj[fieldName] = fieldValue.toString();\n        }\n        else if (_.isObject(fieldValue)) {\n            self._functionsToString(fieldValue);\n        }\n        else if (_.isArray(fieldValue)) {\n            for (let v of fieldValue) {\n                self._functionsToString(v);\n            }\n        }\n    }\n};\n\n// To Markup:\n\nActivityMarkup.prototype.toMarkup = function (activity) {\n    /*if (!is.activity(activity)) {\n        throw new TypeError(\"Argument is not an activity instance.\");\n    }\n    let markup = {};\n    let alias = this.getAlias(activity.constructor);\n    let activityMarkup = this._createMarkupOfActivity(activity);*/\n    throw new Error(\"Not supported yet!\");\n};\n\n// Exports:\n\nlet activityMarkup = null;\n\nmodule.exports = {\n    parse: function (markup) {\n        return (activityMarkup = (activityMarkup || new ActivityMarkup())).parse(markup);\n    },\n\n    toMarkup: function (activity) {\n        return (activityMarkup = (activityMarkup || new ActivityMarkup())).toMarkup(activity);\n    },\n\n    stringify: function (obj) {\n        return (activityMarkup = (activityMarkup || new ActivityMarkup())).stringify(obj);\n    },\n\n    getAlias: function (activity) {\n        return (activityMarkup = (activityMarkup || new ActivityMarkup())).getAlias(activity.constructor);\n    }\n};"],"file":"activities/activityMarkup.js","sourceRoot":"/source/"}