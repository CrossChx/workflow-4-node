{"version":3,"names":[],"mappings":"","sources":["activities/activityMarkup.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* jshint -W061 */\r\n\r\nlet _ = require(\"lodash\");\r\nlet errors = require(\"../common/errors\");\r\nlet Activity = require(\"./activity\");\r\nlet is = require(\"../common/is\");\r\nlet path = require(\"path\");\r\nlet fs = require(\"fs\");\r\nlet Reflection = require(\"backpack-node\").system.Reflection;\r\nlet templateHelpers = require('./templateHelpers');\r\n\r\nconst activityTypeNameRex = /^\\@([a-zA-Z_]+[0-9a-zA-Z_]*)$/;\r\nfunction getActivityTypeName(str) {\r\n    if (_.isString(str)) {\r\n        let result = activityTypeNameRex.exec(str);\r\n        if (result && result.length === 2) {\r\n            return result[1];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction requireFromRoot(resource) {\r\n    try {\r\n        return require(resource);\r\n    }\r\n    catch (e) {\r\n        _.noop(e);\r\n    }\r\n    let pPos = resource.indexOf(\"/\");\r\n    if (pPos === -1) {\r\n        return require(resource);\r\n    }\r\n    let module = resource.substr(0, pPos);\r\n    if (!module) {\r\n        return require(resource);\r\n    }\r\n    try {\r\n        module = require(module);\r\n        let obj = module;\r\n        for (let key of resource.substr(pPos + 1).split(\"/\")) {\r\n            obj = obj[key];\r\n        }\r\n        return obj;\r\n    }\r\n    catch (e) {\r\n        return require(resource);\r\n    }\r\n}\r\n\r\nfunction ActivityMarkup() {\r\n    this._systemTypes = new Map();\r\n    this._registerSystemTypes();\r\n}\r\n\r\nActivityMarkup.prototype._registerSystemTypes = function () {\r\n    this._registerTypes(__dirname);\r\n};\r\n\r\nActivityMarkup.prototype._registerTypes = function (sourcePath) {\r\n    this._registerTypesTo(this._systemTypes, sourcePath);\r\n};\r\n\r\nActivityMarkup.prototype._registerTypesTo = function (types, sourcePath) {\r\n    let self = this;\r\n    let obj = requireFromRoot(sourcePath);\r\n    Reflection.visitObject(obj, function (inObj) {\r\n        let alias = self.getAlias(inObj);\r\n        if (alias && !types.has(alias)) {\r\n            // This is an activity type\r\n            types.set(alias, inObj);\r\n        }\r\n        return alias === null;\r\n    });\r\n};\r\n\r\nActivityMarkup.prototype.getAlias = function (type) {\r\n    if (_.isFunction(type) && !_.isUndefined(type.super_)) {\r\n        let alias = this._toCamelCase(type.name);\r\n        do\r\n        {\r\n            if (type.super_ === Activity) {\r\n                return alias;\r\n            }\r\n            type = type.super_;\r\n        }\r\n        while (type);\r\n    }\r\n    return null;\r\n};\r\n\r\nActivityMarkup.prototype._toCamelCase = function (id) {\r\n    return id[0].toLowerCase() + id.substr(1);\r\n};\r\n\r\nActivityMarkup.prototype.parse = function (markup) {\r\n    if (!markup) {\r\n        throw new TypeError(\"Parameter 'markup' expected.\");\r\n    }\r\n    if (_.isString(markup)) {\r\n        markup = JSON.parse(markup);\r\n    }\r\n    if (!_.isPlainObject(markup)) {\r\n        throw new TypeError(\"Parameter 'markup' is not a plain object.\");\r\n    }\r\n\r\n    let types = new Map();\r\n    for (let kvp of this._systemTypes.entries()) {\r\n        types.set(kvp[0], kvp[1]);\r\n    }\r\n    let req = markup[\"@require\"];\r\n    if (req) {\r\n        this._require(types, req);\r\n    }\r\n    let activity = this._createActivity(types, markup);\r\n    if (req) {\r\n        activity[\"@require\"] = req;\r\n    }\r\n    return activity;\r\n};\r\n\r\nActivityMarkup.prototype._createActivity = function (types, markup) {\r\n    let filedNames = _.filter(_.keys(markup), function (k) { return k !== \"@require\"; });\r\n    if (filedNames.length !== 1) {\r\n        throw new errors.ActivityMarkupError(\"There should be one field.\" + this._errorHint(markup));\r\n    }\r\n\r\n    let activityAlias = getActivityTypeName(filedNames[0]);\r\n    if (activityAlias) {\r\n        return this._createAndInitActivityInstance(types, activityAlias, markup);\r\n    }\r\n    else {\r\n        throw new errors.ActivityMarkupError(\"Root entry is not an activity type name '\" + filedNames[0] + \"'.\" + this._errorHint(markup));\r\n    }\r\n};\r\n\r\nActivityMarkup.prototype._createAndInitActivityInstance = function (types, typeName, markup) {\r\n    let activity = this._createActivityInstance(types, typeName);\r\n    if (!activity) {\r\n        throw new errors.ActivityMarkupError(\"Unknown activity type name '\" + typeName + \"'.\" + this._errorHint(markup));\r\n    }\r\n    let activityRef = {\r\n        name: typeName,\r\n        value: activity\r\n    };\r\n    let pars = markup[\"@\" + typeName];\r\n    if (pars) {\r\n        this._setupActivity(types, activityRef, pars);\r\n    }\r\n    return activityRef.value;\r\n};\r\n\r\nActivityMarkup.prototype._createActivityInstance = function (types, alias) {\r\n    let Constructor = types.get(alias);\r\n    if (_.isUndefined(Constructor)) {\r\n        return null;\r\n    }\r\n    return new Constructor();\r\n};\r\n\r\nActivityMarkup.prototype._setupActivity = function (types, activityRef, pars) {\r\n    let self = this;\r\n    let activity = activityRef.value;\r\n\r\n    function noFunction(fieldName) {\r\n        return activity.codeProperties.has(fieldName);\r\n    }\r\n\r\n    if (_.isArray(pars)) {\r\n        // args\r\n        activity.args = [];\r\n        for (let obj of pars) {\r\n            activity.args.push(self._createValue(types, obj, false, is.template(activity)));\r\n        }\r\n    }\r\n    else if (_.isObject(pars)) {\r\n        let to = null;\r\n        // values\r\n        for (let fieldName in pars) {\r\n            if (pars.hasOwnProperty(fieldName)) {\r\n                if (activity.isArrayProperty(fieldName)) {\r\n                    let v = self._createValue(types, pars[fieldName], true, is.template(activity));\r\n                    if (!_.isArray(v)) {\r\n                        v = [v];\r\n                    }\r\n                    activity[fieldName] = v;\r\n                }\r\n                else if (fieldName === \"@to\") {\r\n                    if (to) {\r\n                        throw new errors.ActivityMarkupError(\"Multiple to defined in activity '\" + activityRef.name + \".\" + this._errorHint(pars));\r\n                    }\r\n                    to = pars[fieldName];\r\n                }\r\n                else if (fieldName[0] === \"!\") {\r\n                    // Promoted:\r\n                    if (!activity.promotedProperties || !_.isFunction(activity.promoted)) {\r\n                        throw new errors.ActivityMarkupError(\"Activity '\" + activityRef.name + \" cannot have promoted properties.\" + this._errorHint(pars));\r\n                    }\r\n                    activity.promoted(fieldName.substr(1), self._createValue(types, pars[fieldName], true, is.template(activity)));\r\n                }\r\n                else if (fieldName[0] === \"`\") {\r\n                    // Reserved:\r\n                    if (!activity.reservedProperties || !_.isFunction(activity.reserved)) {\r\n                        throw new errors.ActivityMarkupError(\"Activity '\" + activityRef.name + \" cannot have reserved properties.\" + this._errorHint(pars));\r\n                    }\r\n                    activity.reserved(fieldName.substr(1), self._createValue(types, pars[fieldName], true, is.template(activity)));\r\n                }\r\n                else if (fieldName === \"@require\") {\r\n                    // Require:\r\n                    self._require(types, pars[fieldName]);\r\n                }\r\n                else {\r\n                    activity[fieldName] = self._createValue(types, pars[fieldName], false, is.template(activity), noFunction(fieldName));\r\n                }\r\n            }\r\n        }\r\n        if (to) {\r\n            let current = activity;\r\n            let assign = activityRef.value = this._createActivityInstance(types, \"assign\");\r\n            assign.value = current;\r\n            assign.to = to;\r\n        }\r\n    }\r\n    else {\r\n        // 1 arg\r\n        activity.args = [self._createValue(types, pars, false, is.template(activity))];\r\n    }\r\n};\r\n\r\nActivityMarkup.prototype._require = function (types, markup) {\r\n    let self = this;\r\n\r\n    if (_.isArray(markup)) {\r\n        for (let item of markup) {\r\n            self._require(types, item);\r\n        }\r\n    }\r\n    else if (_.isString(markup)) {\r\n        self._registerTypesTo(types, markup);\r\n    }\r\n    else {\r\n        throw new errors.ActivityMarkupError(\"Cannot register '\" + markup + \"'.\" + self._errorHint(markup));\r\n    }\r\n};\r\n\r\nActivityMarkup.prototype._createValue = function (types, markup, canBeArray, noTemplate, noFunction) {\r\n    let self = this;\r\n\r\n    // Helpers\r\n    function templatize(_markup) {\r\n        let template = self._createActivityInstance(types, \"template\");\r\n        template.declare = _markup;\r\n        return template;\r\n    }\r\n\r\n    function funcletize(f) {\r\n        let func = self._createActivityInstance(types, \"func\");\r\n        func.code = f;\r\n        return func;\r\n    }\r\n\r\n    function expressionize(str) {\r\n        let expr = self._createActivityInstance(types, \"expression\");\r\n        expr.expr = str;\r\n        return expr;\r\n    }\r\n\r\n    if (_.isArray(markup)) {\r\n        if (canBeArray) {\r\n            let result = [];\r\n            for (let v of markup) {\r\n                result.push(self._createValue(types, v));\r\n            }\r\n            return result;\r\n        }\r\n        else if (!noTemplate && templateHelpers.isTemplate(markup)) {\r\n            return templatize(markup);\r\n        }\r\n    }\r\n    else if (_.isPlainObject(markup)) {\r\n        let filedNames = _.keys(markup);\r\n        if (filedNames.length === 1) {\r\n            let fieldName = filedNames[0];\r\n            let fieldValue = markup[fieldName];\r\n\r\n            if (fieldName === \"_\") {\r\n                // Escape:\r\n                return fieldValue;\r\n            }\r\n\r\n            let activityTypeName = getActivityTypeName(fieldName);\r\n            if (activityTypeName) {\r\n                // Activity:\r\n                return self._createAndInitActivityInstance(types, activityTypeName, markup);\r\n            }\r\n        }\r\n\r\n        // Plain object:\r\n        if (!noTemplate && templateHelpers.isTemplate(markup)) {\r\n            return templatize(markup);\r\n        }\r\n    }\r\n    else if (_.isString(markup)) {\r\n        let str = markup.trim();\r\n        if (templateHelpers.isFunctionString(str)) {\r\n            let f;\r\n            eval(\"f = function(_){return (\" + str + \");}\");\r\n            f = f(_);\r\n            if (!noFunction) {\r\n                return funcletize(f);\r\n            }\r\n            else {\r\n                return f; // aka when func.code\r\n            }\r\n        }\r\n        else if (str.length > 1) {\r\n            if (str[0] === \"=\") {\r\n                // Expression\r\n                return expressionize(str.substr(1));\r\n            }\r\n        }\r\n    }\r\n    else if (_.isFunction(markup)) {\r\n        if (!noFunction) {\r\n            return funcletize(markup);\r\n        }\r\n    }\r\n\r\n    return markup;\r\n};\r\n\r\nActivityMarkup.prototype._errorHint = function (markup) {\r\n    let len = 20;\r\n    let json = JSON.stringify(markup);\r\n    if (json.length > len) {\r\n        json = json.substr(0, len) + \" ...\";\r\n    }\r\n    return \"\\nSee error near:\\n\" + json;\r\n};\r\n\r\nActivityMarkup.prototype.stringify = function (obj) {\r\n    if (_.isString(obj)) {\r\n        return obj;\r\n    }\r\n    if (is.activity(obj)) {\r\n        obj = this.toMarkup(obj);\r\n    }\r\n    if (!_.isPlainObject(obj)) {\r\n        throw new TypeError(\"Parameter 'obj' is not a plain object.\");\r\n    }\r\n    let cloned = _.cloneDeep(obj);\r\n    this._functionsToString(cloned);\r\n    return JSON.stringify(cloned);\r\n};\r\n\r\nActivityMarkup.prototype._functionsToString = function (obj) {\r\n    let self = this;\r\n    for (let fieldName in obj) {\r\n        let fieldValue = obj[fieldName];\r\n        if (_.isFunction(fieldValue)) {\r\n            obj[fieldName] = fieldValue.toString();\r\n        }\r\n        else if (_.isObject(fieldValue)) {\r\n            self._functionsToString(fieldValue);\r\n        }\r\n        else if (_.isArray(fieldValue)) {\r\n            for (let v of fieldValue) {\r\n                self._functionsToString(v);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// To Markup:\r\n\r\nActivityMarkup.prototype.toMarkup = function (activity) {\r\n    /*if (!is.activity(activity)) {\r\n        throw new TypeError(\"Argument is not an activity instance.\");\r\n    }\r\n    let markup = {};\r\n    let alias = this.getAlias(activity.constructor);\r\n    let activityMarkup = this._createMarkupOfActivity(activity);*/\r\n    throw new Error(\"Not supported yet!\");\r\n};\r\n\r\n// Exports:\r\n\r\nlet activityMarkup = null;\r\n\r\nmodule.exports = {\r\n    parse: function (markup) {\r\n        return (activityMarkup = (activityMarkup || new ActivityMarkup())).parse(markup);\r\n    },\r\n\r\n    toMarkup: function (activity) {\r\n        return (activityMarkup = (activityMarkup || new ActivityMarkup())).toMarkup(activity);\r\n    },\r\n\r\n    stringify: function (obj) {\r\n        return (activityMarkup = (activityMarkup || new ActivityMarkup())).stringify(obj);\r\n    },\r\n\r\n    getAlias: function (activity) {\r\n        return (activityMarkup = (activityMarkup || new ActivityMarkup())).getAlias(activity.constructor);\r\n    }\r\n};"],"file":"activities/activityMarkup.js","sourceRoot":"/source/"}