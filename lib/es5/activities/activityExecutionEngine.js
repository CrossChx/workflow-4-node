"use strict";
"use strict";
var Activity = require("./activity");
var ActivityExecutionContext = require("./activityExecutionContext");
var ActivityExecutionState = require("./activityExecutionState");
var CallContext = require("./callContext");
var EventEmitter = require('events').EventEmitter;
var util = require("util");
var errors = require("../common/errors");
var _ = require("lodash");
var ActivityStateTracker = require("./activityStateTracker");
var enums = require("../common/enums");
var Promise = require("bluebird");
var asyncHelpers = require("../common/asyncHelpers");
var async = asyncHelpers.async;
var activityMarkup = require("./activityMarkup");
function ActivityExecutionEngine(rootActivity) {
  if (!(rootActivity instanceof Activity)) {
    if (_.isPlainObject(rootActivity)) {
      rootActivity = activityMarkup.parse(rootActivity);
    } else {
      throw new TypeError("Argument 'rootActivity' is not an activity or a markup.");
    }
  }
  this._rootActivity = rootActivity;
  this._context = new ActivityExecutionContext();
  this._isInitialized = false;
  this._rootState = null;
  this._trackers = [];
  this._hookContext();
  this._timestamp = null;
}
util.inherits(ActivityExecutionEngine, EventEmitter);
Object.defineProperties(ActivityExecutionEngine.prototype, {
  rootActivity: {get: function() {
      return this._rootActivity;
    }},
  execState: {get: function() {
      if (this._rootState) {
        return this._rootState.execState;
      } else {
        return null;
      }
    }},
  version: {get: function() {
      return this._rootActivity.version;
    }},
  updatedOn: {get: function() {
      return this._timestamp;
    }}
});
ActivityExecutionEngine.prototype._idle = {toString: function() {
    return enums.ActivityStates.idle;
  }};
ActivityExecutionEngine.prototype.isIdle = function(result) {
  return result === this._idle;
};
ActivityExecutionEngine.prototype._initialize = function() {
  if (!this._isInitialized) {
    this._context.initialize(this._rootActivity);
    this._isInitialized = true;
  }
};
ActivityExecutionEngine.prototype._setRootState = function(state) {
  var self = this;
  if (!self._rootState) {
    self._rootState = state;
    self._rootState.on(Activity.states.cancel, function() {
      self.emit(Activity.states.cancel);
    });
    self._rootState.on(Activity.states.complete, function(result) {
      self.emit(Activity.states.complete, result);
    });
    self._rootState.on(Activity.states.end, function(reason, result) {
      self._timestamp = new Date();
      self.emit(Activity.states.end, reason, result);
    });
    self._rootState.on(Activity.states.fail, function(e) {
      self.emit(Activity.states.fail, e);
    });
    self._rootState.on(Activity.states.run, function() {
      self.emit(Activity.states.run);
    });
    self._rootState.on(Activity.states.idle, function() {
      self.emit(Activity.states.idle);
    });
  }
};
ActivityExecutionEngine.prototype._hookContext = function() {
  var self = this;
  self._context.on(Activity.states.run, function(activity) {
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (self._trackers)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var t = $__1.value;
        {
          t.activityStateChanged(activity, Activity.states.run);
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
  });
  self._context.on(Activity.states.end, function(activity, reason, result) {
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (self._trackers)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var t = $__1.value;
        {
          t.activityStateChanged(activity, reason, result);
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
  });
};
ActivityExecutionEngine.prototype.addTracker = function(tracker) {
  if (!_.isObject(tracker)) {
    throw new TypeError("Parameter is not an object.");
  }
  this._trackers.push(new ActivityStateTracker(tracker));
};
ActivityExecutionEngine.prototype.removeTracker = function(tracker) {
  var idx = -1;
  for (var i = 0; i < this._trackers.length; i++) {
    var t = this._trackers[i];
    if (t._impl === tracker) {
      idx = i;
      break;
    }
  }
  if (idx !== -1) {
    this._trackers.splice(idx, 1);
  }
};
ActivityExecutionEngine.prototype.start = async($traceurRuntime.initGeneratorFunction(function $__7() {
  var args,
      $__3,
      $__4,
      $__5,
      $__1,
      $__0,
      a,
      $__8,
      $__9,
      $__10,
      $__11,
      $__12,
      $__13,
      $__14,
      $__15;
  var $arguments = arguments;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          this._verifyNotStarted();
          this._initialize();
          args = [new CallContext(this._context)];
          $__3 = true;
          $__4 = false;
          $__5 = undefined;
          try {
            for ($__1 = void 0, $__0 = ($arguments)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
              a = $__1.value;
              {
                args.push(a);
              }
            }
          } catch ($__6) {
            $__4 = true;
            $__5 = $__6;
          } finally {
            try {
              if (!$__3 && $__0.return != null) {
                $__0.return();
              }
            } finally {
              if ($__4) {
                throw $__5;
              }
            }
          }
          $ctx.state = 10;
          break;
        case 10:
          $__8 = this._setRootState;
          $__9 = this._rootActivity;
          $__10 = $__9.start;
          $__11 = $__10.apply;
          $__12 = this._rootActivity;
          $__13 = $__11.call($__10, $__12, args);
          $ctx.state = 6;
          break;
        case 6:
          $ctx.state = 2;
          return $__13;
        case 2:
          $__14 = $ctx.sent;
          $ctx.state = 4;
          break;
        case 4:
          $__15 = $__8.call(this, $__14);
          $ctx.state = -2;
          break;
        default:
          return $ctx.end();
      }
  }, $__7, this);
}));
ActivityExecutionEngine.prototype.invoke = function() {
  var self = this;
  self._verifyNotStarted();
  self._initialize();
  var argRemoveToken = null;
  var args = [];
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (arguments)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var a = $__1.value;
      {
        args.push(a);
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  if (args.length) {
    argRemoveToken = self._context.appendToContext(args);
  }
  args.unshift(new CallContext(self._context));
  return new Promise(function(resolve, reject) {
    try {
      self._setRootState(self._context.getState(self._rootActivity.instanceId));
      self.once(Activity.states.end, function(reason, result) {
        try {
          switch (reason) {
            case Activity.states.complete:
              resolve(result);
              break;
            case Activity.states.cancel:
              reject(new errors.Cancelled());
              break;
            case Activity.states.idle:
              resolve(self._idle);
              break;
            default:
              result = result || new errors.ActivityRuntimeError("Unknown error.");
              reject(result);
              break;
          }
        } finally {
          if (argRemoveToken) {
            self._context.removeFromContext(argRemoveToken);
            argRemoveToken = null;
          }
        }
      });
      self._rootActivity.start.apply(self._rootActivity, args);
    } catch (e) {
      reject(e);
      if (argRemoveToken) {
        self._context.removeFromContext(argRemoveToken);
        argRemoveToken = null;
      }
    }
  });
};
ActivityExecutionEngine.prototype._verifyNotStarted = function() {
  if (this.execState) {
    throw new errors.ActivityStateExceptionError("Workflow has been started already.");
  }
};
ActivityExecutionEngine.prototype.resumeBookmark = function(name, reason, result) {
  var self = this;
  self._initialize();
  return new Promise(function(resolve, reject) {
    try {
      self._setRootState(self._context.getState(self._rootActivity.instanceId));
      if (self.execState === enums.ActivityStates.idle) {
        var bmTimestamp = self._context.getBookmarkTimestamp(name);
        self.once(Activity.states.end, function(_reason, _result) {
          try {
            if (_reason === enums.ActivityStates.complete || _reason === enums.ActivityStates.idle) {
              var endBmTimestamp = self._context.getBookmarkTimestamp(name);
              if (endBmTimestamp && endBmTimestamp === bmTimestamp) {
                if (_reason === enums.ActivityStates.complete) {
                  reject(new errors.ActivityRuntimeError("Workflow has been completed before bookmark '" + name + "' reached."));
                } else {
                  reject(new errors.Idle("Workflow has been gone to idle before bookmark '" + name + "' reached."));
                }
              } else {
                resolve();
              }
            } else if (_reason === enums.ActivityStates.cancel) {
              reject(new errors.ActivityRuntimeError("Workflow has been cancelled before bookmark '" + name + "' reached."));
            } else if (_reason === enums.ActivityStates.fail) {
              reject(_result);
            }
          } catch (e) {
            reject(e);
          }
        });
        self._context.resumeBookmarkExternal(name, reason, result);
      } else {
        reject(new errors.ActivityRuntimeError("Cannot resume bookmark, while the workflow is not in the idle state."));
      }
    } catch (e) {
      reject(e);
    }
  });
};
ActivityExecutionEngine.prototype.getStateAndPromotions = function(serializer, getPromotions) {
  if (serializer && !_.isObject(serializer)) {
    throw new Error("Argument 'serializer' is not an object.");
  }
  this._initialize();
  return this._context.getStateAndPromotions(serializer, getPromotions);
};
ActivityExecutionEngine.prototype.setState = function(serializer, json) {
  if (serializer && !_.isObject(serializer)) {
    throw new Error("Argument 'serializer' is not an object.");
  }
  if (!_.isObject(json)) {
    throw new TypeError("Argument 'json' is not an object.");
  }
  this._initialize();
  this._timestamp = new Date();
  this._context.setState(serializer, json);
};
module.exports = ActivityExecutionEngine;
//# sourceMappingURL=data:application/json;base64,
