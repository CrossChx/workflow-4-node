{"version":3,"sources":["activities/scope.js"],"names":[],"mappings":"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","file":"activities/scope.js","sourcesContent":["\"use strict\";\n\nlet _ = require(\"lodash\");\n\nlet scopeFactory = {\n    create: function(scopeTree, node) {\n        let Proxy;\n        try {\n            Proxy = require(\"node-proxy\");\n        }\n        catch(e) {\n            _.noop(e);\n        }\n        if (Proxy) {\n            // node-proxy is successfully compiled and loadded\n            return Proxy.create({\n                has: function (name) {\n                    return scopeTree.hasProperty(node, name);\n                },\n\n                get: function (target, name) {\n                    if (name === \"$keys\") {\n                        return scopeTree.enumeratePropertyNames(node);\n                    }\n                    else if (name === \"delete\") {\n                        return this.delete;\n                    }\n                    else if (name === \"update\") {\n                        return _.noop;\n                    }\n                    return scopeTree.getValue(node, name);\n                },\n\n                set: function (target, name, value) {\n                    if (name === \"$keys\" || name === \"delete\" || name === \"update\") {\n                        throw new TypeError(`${name} is read only.`);\n                    }\n                    scopeTree.setValue(node, name, value);\n                    return value;\n                },\n\n                delete: function (name) {\n                    return scopeTree.deleteProperty(node, name);\n                },\n\n                enumerate: function (target) {\n                    return scopeTree.enumeratePropertyNames(node);\n                }\n            });\n        }\n        else {\n            // node-proxy is unavailable, we should emulate a proxy:\n            let SimpleProxy = require(\"../common/simpleProxy\");\n\n            let getKeys = function() {\n                let keys = [];\n                let has = new Set();\n                for (let key of scopeTree.enumeratePropertyNames(node)) {\n                    if (!has.has(key)) {\n                        keys.push(key);\n                        has.add(key);\n                    }\n                }\n                return keys;\n            };\n\n            return new SimpleProxy({\n                getKeys: function (proxy) {\n                    return getKeys();\n                },\n                getValue: function (proxy, name) {\n                    return scopeTree.getValue(node, name);\n                },\n                setValue: function (proxy, name, value) {\n                    scopeTree.setValue(node, name, value);\n                    return value;\n                },\n                delete: function (proxy, name) {\n                    scopeTree.deleteProperty(node, name);\n                }\n            });\n        }\n    }\n};\n\nmodule.exports = scopeFactory;"],"sourceRoot":"/source/"}