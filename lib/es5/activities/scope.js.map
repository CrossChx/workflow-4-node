{"version":3,"names":[],"mappings":"","sources":["activities/scope.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet _ = require(\"lodash\");\r\n\r\nlet scopeFactory = {\r\n    create: function(scopeTree, node) {\r\n        let Proxy;\r\n        try {\r\n            Proxy = require(\"node-proxy\");\r\n        }\r\n        catch(e) {\r\n            _.noop(e);\r\n        }\r\n        if (Proxy) {\r\n            // node-proxy is successfully compiled and loadded\r\n            return Proxy.create({\r\n                has: function (name) {\r\n                    return scopeTree.hasProperty(node, name);\r\n                },\r\n\r\n                get: function (target, name) {\r\n                    if (name === \"$keys\") {\r\n                        return scopeTree.enumeratePropertyNames(node);\r\n                    }\r\n                    else if (name === \"delete\") {\r\n                        return this.delete;\r\n                    }\r\n                    else if (name === \"update\") {\r\n                        return _.noop;\r\n                    }\r\n                    return scopeTree.getValue(node, name);\r\n                },\r\n\r\n                set: function (target, name, value) {\r\n                    if (name === \"$keys\" || name === \"delete\" || name === \"update\") {\r\n                        throw new TypeError(`${name} is read only.`);\r\n                    }\r\n                    scopeTree.setValue(node, name, value);\r\n                    return value;\r\n                },\r\n\r\n                delete: function (name) {\r\n                    return scopeTree.deleteProperty(node, name);\r\n                },\r\n\r\n                enumerate: function (target) {\r\n                    return scopeTree.enumeratePropertyNames(node);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // node-proxy is unavailable, we should emulate a proxy:\r\n            let SimpleProxy = require(\"../common/simpleProxy\");\r\n\r\n            let getKeys = function() {\r\n                let keys = [];\r\n                let has = new Set();\r\n                for (let key of scopeTree.enumeratePropertyNames(node)) {\r\n                    if (!has.has(key)) {\r\n                        keys.push(key);\r\n                        has.add(key);\r\n                    }\r\n                }\r\n                return keys;\r\n            };\r\n\r\n            return new SimpleProxy({\r\n                getKeys: function (proxy) {\r\n                    return getKeys();\r\n                },\r\n                getValue: function (proxy, name) {\r\n                    return scopeTree.getValue(node, name);\r\n                },\r\n                setValue: function (proxy, name, value) {\r\n                    scopeTree.setValue(node, name, value);\r\n                    return value;\r\n                },\r\n                delete: function (proxy, name) {\r\n                    scopeTree.deleteProperty(node, name);\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = scopeFactory;"],"file":"activities/scope.js","sourceRoot":"/source/"}