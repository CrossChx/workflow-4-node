{"version":3,"names":[],"mappings":"","sources":["activities/scope.js"],"sourcesContent":["\"use strict\";\n\nlet _ = require(\"lodash\");\n\nlet scopeFactory = {\n    create: function(scopeTree, node) {\n        let Proxy;\n        try {\n            Proxy = require(\"node-proxy\");\n        }\n        catch(e) {\n            _.noop(e);\n        }\n        if (Proxy) {\n            // node-proxy is successfully compiled and loadded\n            return Proxy.create({\n                has: function (name) {\n                    return scopeTree.hasProperty(node, name);\n                },\n\n                get: function (target, name) {\n                    if (name === \"$keys\") {\n                        return scopeTree.enumeratePropertyNames(node);\n                    }\n                    else if (name === \"delete\") {\n                        return this.delete;\n                    }\n                    else if (name === \"update\") {\n                        return _.noop;\n                    }\n                    return scopeTree.getValue(node, name);\n                },\n\n                set: function (target, name, value) {\n                    if (name === \"$keys\" || name === \"delete\" || name === \"update\") {\n                        throw new TypeError(`${name} is read only.`);\n                    }\n                    scopeTree.setValue(node, name, value);\n                    return value;\n                },\n\n                delete: function (name) {\n                    return scopeTree.deleteProperty(node, name);\n                },\n\n                enumerate: function (target) {\n                    return scopeTree.enumeratePropertyNames(node);\n                }\n            });\n        }\n        else {\n            // node-proxy is unavailable, we should emulate a proxy:\n            let SimpleProxy = require(\"../common/simpleProxy\");\n\n            let getKeys = function() {\n                let keys = [];\n                let has = new Set();\n                for (let key of scopeTree.enumeratePropertyNames(node)) {\n                    if (!has.has(key)) {\n                        keys.push(key);\n                        has.add(key);\n                    }\n                }\n                return keys;\n            };\n\n            return new SimpleProxy({\n                getKeys: function (proxy) {\n                    return getKeys();\n                },\n                getValue: function (proxy, name) {\n                    return scopeTree.getValue(node, name);\n                },\n                setValue: function (proxy, name, value) {\n                    scopeTree.setValue(node, name, value);\n                    return value;\n                },\n                delete: function (proxy, name) {\n                    scopeTree.deleteProperty(node, name);\n                }\n            });\n        }\n    }\n};\n\nmodule.exports = scopeFactory;"],"file":"activities/scope.js","sourceRoot":"/source/"}