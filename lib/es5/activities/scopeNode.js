"use strict";
"use strict";
var util = require("util");
var _ = require("lodash");
var is = require("../common/is");
var assert = require("assert");
function ScopeNode(instanceId, scopePart, userId) {
  assert(instanceId);
  assert(scopePart);
  this.instanceId = instanceId;
  this.userId = userId;
  this._parent = null;
  this._children = new Map();
  this._scopePart = scopePart;
  this._keys = [];
  for (var key in scopePart) {
    this._keys.push(key);
  }
}
Object.defineProperties(ScopeNode.prototype, {
  _keys: {
    value: null,
    writable: true,
    enumerable: false
  },
  scopePart: {get: function() {
      return this._scopePart;
    }},
  parent: {
    get: function() {
      return this._parent;
    },
    set: function(value) {
      if (value !== null && !(value instanceof ScopeNode)) {
        throw new TypeError("Node argument expected.");
      }
      if (this._parent !== null) {
        throw new Error("Parent already defined.");
      }
      value.addChild(this);
    }
  }
});
ScopeNode.prototype.forEachToRoot = function(f, noWalk) {
  var current = this;
  while (current) {
    if (f.call(this, current) === false) {
      return ;
    }
    if (noWalk) {
      break;
    }
    current = current._parent;
  }
};
ScopeNode.prototype.forEachChild = function(f) {
  this._children.forEach(f);
};
ScopeNode.prototype.addChild = function(childItem) {
  if (!(childItem instanceof ScopeNode)) {
    throw new TypeError("Node argument expected.");
  }
  if (childItem._parent) {
    throw new Error("Item has been already ha a parent node.");
  }
  childItem._parent = this;
  this._children.set(childItem.instanceId, childItem);
};
ScopeNode.prototype.removeChild = function(childItem) {
  if (!(childItem instanceof ScopeNode)) {
    throw new TypeError("Node argument expected.");
  }
  if (childItem._parent !== this) {
    throw new Error("Item is not a current node's child.");
  }
  childItem._parent = null;
  this._children.delete(childItem.instanceId);
};
ScopeNode.prototype.clearChildren = function() {
  this._children.clear();
};
ScopeNode.prototype.isPropertyExists = function(name) {
  return is.defined(this._scopePart[name]);
};
ScopeNode.prototype.getPropertyValue = function(name, canReturnPrivate) {
  if (canReturnPrivate) {
    return this._scopePart[name];
  } else if (!this._isPrivate(name)) {
    return this._scopePart[name];
  }
};
ScopeNode.prototype.setPropertyValue = function(name, value, canSetPrivate) {
  if (this._isPrivate(name)) {
    if (canSetPrivate) {
      if (!is.defined(this._scopePart[name])) {
        this._keys.push(name);
      }
      this._scopePart[name] = value;
      return true;
    }
  } else if (is.defined(this._scopePart[name])) {
    this._scopePart[name] = value;
    return true;
  }
  return false;
};
ScopeNode.prototype.createPropertyWithValue = function(name, value) {
  if (!is.defined(this._scopePart[name])) {
    this._keys.push(name);
  }
  this._scopePart[name] = value;
};
ScopeNode.prototype.deleteProperty = function(name, canDeletePrivate) {
  if (is.defined(this._scopePart[name])) {
    if (this._isPrivate(name)) {
      if (canDeletePrivate) {
        this._keys.splice(_.indexOf(this._keys, name), 1);
        delete this._scopePart[name];
        return true;
      }
    } else {
      this._keys.splice(_.indexOf(this._keys, name), 1);
      delete this._scopePart[name];
      return true;
    }
  }
  return false;
};
ScopeNode.prototype.enumeratePropertyNames = $traceurRuntime.initGeneratorFunction(function $__8(canEnumeratePrivate) {
  var i,
      i$__7,
      key;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          $ctx.state = (canEnumeratePrivate) ? 6 : 16;
          break;
        case 6:
          i = 0;
          $ctx.state = 7;
          break;
        case 7:
          $ctx.state = (i < this._keys.length) ? 1 : -2;
          break;
        case 4:
          i++;
          $ctx.state = 7;
          break;
        case 1:
          $ctx.state = 2;
          return this._keys[i];
        case 2:
          $ctx.maybeThrow();
          $ctx.state = 4;
          break;
        case 16:
          i$__7 = 0;
          $ctx.state = 17;
          break;
        case 17:
          $ctx.state = (i$__7 < this._keys.length) ? 13 : -2;
          break;
        case 11:
          i$__7++;
          $ctx.state = 17;
          break;
        case 13:
          key = this._keys[i$__7];
          $ctx.state = 14;
          break;
        case 14:
          $ctx.state = (!this._isPrivate(key)) ? 8 : 11;
          break;
        case 8:
          $ctx.state = 9;
          return key;
        case 9:
          $ctx.maybeThrow();
          $ctx.state = 11;
          break;
        default:
          return $ctx.end();
      }
  }, $__8, this);
});
ScopeNode.prototype.forEachProperty = function(f) {
  var self = this;
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (self._keys)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var fn = $__1.value;
      {
        f(fn, self._scopePart[fn]);
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
};
ScopeNode.prototype._isPrivate = function(key) {
  return key[0] === "_";
};
module.exports = ScopeNode;
//# sourceMappingURL=data:application/json;base64,
