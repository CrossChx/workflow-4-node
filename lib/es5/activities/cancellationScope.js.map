{"version":3,"names":[],"mappings":"","sources":["activities/cancellationScope.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet errors = require(\"../common/errors\");\nlet Block = require(\"./block\");\n\nfunction CancellationScope() {\n    Activity.call(this);\n\n    this.cancelled = null;\n    this.arrayProperties.add(\"cancelled\");\n}\n\nutil.inherits(CancellationScope, Activity);\n\nCancellationScope.prototype.initializeStructure = function () {\n    this._body = new Block();\n    this._body.args = this.args;\n    this.args = null;\n    if (this.cancelled) {\n        let prev = this.cancelled;\n        this.cancelled = new Block();\n        this.cancelled.args = prev;\n    }\n};\n\nCancellationScope.prototype.run = function (callContext, args) {\n    callContext.schedule(this._body, \"_bodyFinished\");\n};\n\nCancellationScope.prototype._bodyFinished = function (callContext, reason, result) {\n    if (this.cancelled &&\n        (reason === Activity.states.cancel ||\n         (reason === Activity.states.fail && result instanceof errors.Cancelled))) {\n        callContext.schedule(this.cancelled);\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nmodule.exports = CancellationScope;"],"file":"activities/cancellationScope.js","sourceRoot":"/source/"}