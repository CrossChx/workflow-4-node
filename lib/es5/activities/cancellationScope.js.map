{"version":3,"names":[],"mappings":"","sources":["activities/cancellationScope.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet errors = require(\"../common/errors\");\r\nlet Block = require(\"./block\");\r\n\r\nfunction CancellationScope() {\r\n    Activity.call(this);\r\n\r\n    this.cancelled = null;\r\n    this.arrayProperties.add(\"cancelled\");\r\n}\r\n\r\nutil.inherits(CancellationScope, Activity);\r\n\r\nCancellationScope.prototype.initializeStructure = function () {\r\n    this._body = new Block();\r\n    this._body.args = this.args;\r\n    this.args = null;\r\n    if (this.cancelled) {\r\n        let prev = this.cancelled;\r\n        this.cancelled = new Block();\r\n        this.cancelled.args = prev;\r\n    }\r\n};\r\n\r\nCancellationScope.prototype.run = function (callContext, args) {\r\n    callContext.schedule(this._body, \"_bodyFinished\");\r\n};\r\n\r\nCancellationScope.prototype._bodyFinished = function (callContext, reason, result) {\r\n    if (this.cancelled &&\r\n        (reason === Activity.states.cancel ||\r\n         (reason === Activity.states.fail && result instanceof errors.Cancelled))) {\r\n        callContext.schedule(this.cancelled);\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nmodule.exports = CancellationScope;"],"file":"activities/cancellationScope.js","sourceRoot":"/source/"}