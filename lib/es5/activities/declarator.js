"use strict";
"use strict";
var Activity = require("./activity");
var util = require("util");
var is = require("../common/is");
function Declarator() {
  Activity.call(this);
  this.nonScopedProperties.add("reservedProperties");
  this.nonScopedProperties.add("reserved");
  this.nonScopedProperties.add("promotedProperties");
  this.nonScopedProperties.add("promoted");
  this.nonScopedProperties.add("varsDeclared");
  this.reservedProperties = new Set();
  this.promotedProperties = new Set();
}
util.inherits(Declarator, Activity);
Declarator.prototype.reserved = function(name, value) {
  if (this.promotedProperties.has(name)) {
    throw new Error("Property '" + name + "' cannot be reserved because it's promoted.");
  }
  if (is.defined(value)) {
    this[name] = value;
  }
  this.reservedProperties.add(name);
};
Declarator.prototype.promoted = function(name, value) {
  if (this.reservedProperties.has(name)) {
    throw new Error("Property '" + name + "' cannot be promoted because it's reserved.");
  }
  if (is.defined(value)) {
    this[name] = value;
  }
  this.promotedProperties.add(name);
};
Declarator.prototype.run = function(callContext, args) {
  var self = this;
  var activityVariables = [];
  var _activityVariableFieldNames = [];
  self.set("_activityVariableFieldNames", _activityVariableFieldNames);
  var resProps = callContext.activity.reservedProperties;
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (callContext.activity._getScopeKeys())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var fieldName = $__1.value;
      {
        if (!resProps.has(fieldName)) {
          var fieldValue = self.get(fieldName);
          if (fieldValue instanceof Activity) {
            activityVariables.push(fieldValue);
            _activityVariableFieldNames.push(fieldName);
          }
        }
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  if (activityVariables.length) {
    self.set("_savedArgs", args);
    callContext.schedule(activityVariables, "_varsGot");
  } else {
    self.delete("_activityVariableFieldNames");
    callContext.activity.varsDeclared.call(self, callContext, args);
  }
};
Declarator.prototype._varsGot = function(callContext, reason, result) {
  var self = this;
  if (reason === Activity.states.complete) {
    var idx = 0;
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (self.get("_activityVariableFieldNames"))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var fieldName = $__1.value;
        {
          self.set(fieldName, result[idx++]);
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
    var args = self.get("_savedArgs");
    self.delete("_savedArgs");
    self.delete("_activityVariableFieldNames");
    callContext.activity.varsDeclared.call(self, callContext, args);
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Declarator;
//# sourceMappingURL=data:application/json;base64,
