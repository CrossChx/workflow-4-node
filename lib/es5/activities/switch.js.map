{"version":3,"names":[],"mappings":"","sources":["activities/switch.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet _ = require(\"lodash\");\r\nlet Case = require(\"./case\");\r\nlet When = require(\"./when\");\r\nlet Default = require(\"./default\");\r\nlet errors = require(\"../common/errors\");\r\nlet constants = require(\"../common/constants\");\r\n\r\nfunction Switch() {\r\n    Activity.call(this);\r\n\r\n    this.expression = null;\r\n}\r\n\r\nutil.inherits(Switch, Activity);\r\n\r\nSwitch.prototype.run = function (callContext, args) {\r\n    if (args && args.length) {\r\n        let parts = {\r\n            cases: [],\r\n            whens: [],\r\n            default: null\r\n        };\r\n        for (let arg of args) {\r\n            if (arg instanceof Case) {\r\n                parts.cases.push(arg);\r\n            }\r\n            else if (arg instanceof When) {\r\n                parts.whens.push(arg);\r\n            }\r\n            else if (arg instanceof Default) {\r\n                if (parts.default === null) {\r\n                    parts.default = arg;\r\n                }\r\n                else {\r\n                    throw new errors.ActivityRuntimeError(\"Multiple default for a switch is not allowed.\");\r\n                }\r\n            }\r\n        }\r\n        if (parts.cases.length || parts.whens.length || parts.default) {\r\n            this._parts = parts;\r\n            if (parts.cases.length) {\r\n                this._doCase = true;\r\n                callContext.schedule(this.expression, \"_expressionGot\");\r\n            }\r\n            else {\r\n                this._doCase = false;\r\n                callContext.activity._step.call(this, callContext);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    callContext.complete();\r\n};\r\n\r\nSwitch.prototype._expressionGot = function (callContext, reason, result) {\r\n    if (reason === Activity.states.complete) {\r\n        this.expression = result;\r\n        callContext.activity._step.call(this, callContext);\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nSwitch.prototype._step = function (callContext) {\r\n    let parts = this._parts;\r\n    let doCase = this._doCase;\r\n    if (doCase && parts.cases.length) {\r\n        let next = parts.cases[0];\r\n        parts.cases.splice(0, 1);\r\n        callContext.schedule(next, \"_partCompleted\");\r\n    }\r\n    else if (!doCase && parts.whens.length) {\r\n        let next = parts.whens[0];\r\n        parts.whens.splice(0, 1);\r\n        callContext.schedule(next, \"_partCompleted\");\r\n    }\r\n    else if (parts.default) {\r\n        callContext.schedule(parts.default, \"_partCompleted\");\r\n    }\r\n    else {\r\n        callContext.complete();\r\n    }\r\n};\r\n\r\nSwitch.prototype._partCompleted = function (callContext, reason, result) {\r\n    if (reason === Activity.states.complete) {\r\n        if (result === constants.markers.nope) {\r\n            callContext.activity._step.call(this, callContext);\r\n        }\r\n        else {\r\n            callContext.complete(result);\r\n        }\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nmodule.exports = Switch;"],"file":"activities/switch.js","sourceRoot":"/source/"}