{"version":3,"names":[],"mappings":"","sources":["activities/switch.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nlet Case = require(\"./case\");\nlet When = require(\"./when\");\nlet Default = require(\"./default\");\nlet errors = require(\"../common/errors\");\nlet constants = require(\"../common/constants\");\n\nfunction Switch() {\n    Activity.call(this);\n\n    this.expression = null;\n}\n\nutil.inherits(Switch, Activity);\n\nSwitch.prototype.run = function (callContext, args) {\n    if (args && args.length) {\n        let parts = {\n            cases: [],\n            whens: [],\n            default: null\n        };\n        for (let arg of args) {\n            if (arg instanceof Case) {\n                parts.cases.push(arg);\n            }\n            else if (arg instanceof When) {\n                parts.whens.push(arg);\n            }\n            else if (arg instanceof Default) {\n                if (parts.default === null) {\n                    parts.default = arg;\n                }\n                else {\n                    throw new errors.ActivityRuntimeError(\"Multiple default for a switch is not allowed.\");\n                }\n            }\n        }\n        if (parts.cases.length || parts.whens.length || parts.default) {\n            this._parts = parts;\n            if (parts.cases.length) {\n                this._doCase = true;\n                callContext.schedule(this.expression, \"_expressionGot\");\n            }\n            else {\n                this._doCase = false;\n                callContext.activity._step.call(this, callContext);\n            }\n            return;\n        }\n    }\n    callContext.complete();\n};\n\nSwitch.prototype._expressionGot = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        this.expression = result;\n        callContext.activity._step.call(this, callContext);\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nSwitch.prototype._step = function (callContext) {\n    let parts = this._parts;\n    let doCase = this._doCase;\n    if (doCase && parts.cases.length) {\n        let next = parts.cases[0];\n        parts.cases.splice(0, 1);\n        callContext.schedule(next, \"_partCompleted\");\n    }\n    else if (!doCase && parts.whens.length) {\n        let next = parts.whens[0];\n        parts.whens.splice(0, 1);\n        callContext.schedule(next, \"_partCompleted\");\n    }\n    else if (parts.default) {\n        callContext.schedule(parts.default, \"_partCompleted\");\n    }\n    else {\n        callContext.complete();\n    }\n};\n\nSwitch.prototype._partCompleted = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        if (result === constants.markers.nope) {\n            callContext.activity._step.call(this, callContext);\n        }\n        else {\n            callContext.complete(result);\n        }\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nmodule.exports = Switch;"],"file":"activities/switch.js","sourceRoot":"/source/"}