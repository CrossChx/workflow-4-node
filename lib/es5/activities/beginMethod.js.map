{"version":3,"names":[],"mappings":"","sources":["activities/beginMethod.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet _ = require(\"lodash\");\r\nlet specStrings = require(\"../common/specStrings\");\r\nlet errors = require(\"../common/errors\");\r\n\r\nfunction BeginMethod() {\r\n    Activity.call(this);\r\n    this.canCreateInstance = false;\r\n    this.methodName = null;\r\n    this.instanceIdPath = null;\r\n}\r\n\r\nutil.inherits(BeginMethod, Activity);\r\n\r\nBeginMethod.prototype.run = function (callContext, args) {\r\n    let methodName = this.methodName;\r\n    if (_.isString(methodName)) {\r\n        let mn = methodName.trim();\r\n        if (mn) {\r\n            callContext.createBookmark(specStrings.hosting.createBeginMethodBMName(mn), \"_methodInvoked\");\r\n            callContext.idle();\r\n            return;\r\n        }\r\n    }\r\n    callContext.fail(new errors.ValidationError(\"BeginMethod activity methodName property's value '\" + methodName + \"' must be a valid identifier.\"));\r\n};\r\n\r\nBeginMethod.prototype._methodInvoked = function (callContext, reason, result) {\r\n    callContext.end(reason, result);\r\n};\r\n\r\nmodule.exports = BeginMethod;"],"file":"activities/beginMethod.js","sourceRoot":"/source/"}