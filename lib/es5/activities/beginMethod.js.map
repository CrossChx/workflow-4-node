{"version":3,"sources":["activities/beginMethod.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,WAAW,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AACnD,IAAI,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAEzC,SAAS,WAAW,GAAG;AACnB,YAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,QAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;AAC/B,QAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,QAAI,CAAC,cAAc,GAAG,IAAI,CAAC;CAC9B;;AAED,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;;AAErC,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,WAAW,EAAE,IAAI,EAAE;AACrD,QAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACjC,QAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;AACxB,YAAI,EAAE,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;AAC3B,YAAI,EAAE,EAAE;AACJ,uBAAW,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,uBAAuB,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;AAC9F,uBAAW,CAAC,IAAI,EAAE,CAAC;AACnB,mBAAO;SACV;KACJ;AACD,eAAW,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,eAAe,CAAC,oDAAoD,GAAG,UAAU,GAAG,+BAA+B,CAAC,CAAC,CAAC;CACrJ,CAAC;;AAEF,WAAW,CAAC,SAAS,CAAC,cAAc,GAAG,UAAU,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE;AAC1E,eAAW,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;CACnC,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"activities/beginMethod.js","sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nlet specStrings = require(\"../common/specStrings\");\nlet errors = require(\"../common/errors\");\n\nfunction BeginMethod() {\n    Activity.call(this);\n    this.canCreateInstance = false;\n    this.methodName = null;\n    this.instanceIdPath = null;\n}\n\nutil.inherits(BeginMethod, Activity);\n\nBeginMethod.prototype.run = function (callContext, args) {\n    let methodName = this.methodName;\n    if (_.isString(methodName)) {\n        let mn = methodName.trim();\n        if (mn) {\n            callContext.createBookmark(specStrings.hosting.createBeginMethodBMName(mn), \"_methodInvoked\");\n            callContext.idle();\n            return;\n        }\n    }\n    callContext.fail(new errors.ValidationError(\"BeginMethod activity methodName property's value '\" + methodName + \"' must be a valid identifier.\"));\n};\n\nBeginMethod.prototype._methodInvoked = function (callContext, reason, result) {\n    callContext.end(reason, result);\n};\n\nmodule.exports = BeginMethod;"],"sourceRoot":"/source/"}