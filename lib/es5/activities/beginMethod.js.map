{"version":3,"names":[],"mappings":"","sources":["activities/beginMethod.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nlet specStrings = require(\"../common/specStrings\");\nlet errors = require(\"../common/errors\");\n\nfunction BeginMethod() {\n    Activity.call(this);\n    this.canCreateInstance = false;\n    this.methodName = null;\n    this.instanceIdPath = null;\n}\n\nutil.inherits(BeginMethod, Activity);\n\nBeginMethod.prototype.run = function (callContext, args) {\n    let methodName = this.methodName;\n    if (_.isString(methodName)) {\n        let mn = methodName.trim();\n        if (mn) {\n            callContext.createBookmark(specStrings.hosting.createBeginMethodBMName(mn), \"_methodInvoked\");\n            callContext.idle();\n            return;\n        }\n    }\n    callContext.fail(new errors.ValidationError(\"BeginMethod activity methodName property's value '\" + methodName + \"' must be a valid identifier.\"));\n};\n\nBeginMethod.prototype._methodInvoked = function (callContext, reason, result) {\n    callContext.end(reason, result);\n};\n\nmodule.exports = BeginMethod;"],"file":"activities/beginMethod.js","sourceRoot":"/source/"}