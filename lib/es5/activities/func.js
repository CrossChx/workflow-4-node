"use strict";
"use strict";
var Activity = require("./activity");
var util = require("util");
var _ = require("lodash");
var errors = require("../common/errors");
var guids = require('../common/guids');
function Func() {
  Activity.call(this);
  this.code = null;
  this.codeProperties.add('code');
}
util.inherits(Func, Activity);
Func.prototype.run = function(callContext, args) {
  if (!_.isFunction(this.get("code"))) {
    callContext.fail(new errors.ValidationError("Func activity's property 'code' is not a function."));
    return ;
  }
  callContext.schedule(args, "_argsGot");
};
Func.prototype._argsGot = function(callContext, reason, result) {
  var self = this;
  if (reason === Activity.states.complete) {
    try {
      var fResult = self.get("code").apply(self, result || []);
      if (_.isObject(fResult) && _.isFunction(fResult.then)) {
        fResult.then(function(v) {
          callContext.complete(v);
        }, function(err) {
          callContext.fail(err);
        });
      } else {
        callContext.complete(fResult);
      }
    } catch (e) {
      callContext.fail(e);
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Func;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxXQUFXLENBQUM7QUFFWixBQUFJLEVBQUEsQ0FBQSxRQUFPLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxZQUFXLENBQUMsQ0FBQztBQUNwQyxBQUFJLEVBQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUMxQixBQUFJLEVBQUEsQ0FBQSxDQUFBLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUN6QixBQUFJLEVBQUEsQ0FBQSxNQUFLLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxrQkFBaUIsQ0FBQyxDQUFDO0FBQ3hDLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFFdEMsT0FBUyxLQUFHLENBQUUsQUFBRCxDQUFHO0FBQ1osU0FBTyxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUNuQixLQUFHLEtBQUssRUFBSSxLQUFHLENBQUM7QUFDaEIsS0FBRyxlQUFlLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQ25DO0FBQUEsQUFFQSxHQUFHLFNBQVMsQUFBQyxDQUFDLElBQUcsQ0FBRyxTQUFPLENBQUMsQ0FBQztBQUU3QixHQUFHLFVBQVUsSUFBSSxFQUFJLFVBQVUsV0FBVSxDQUFHLENBQUEsSUFBRyxDQUFHO0FBQzlDLEtBQUksQ0FBQyxDQUFBLFdBQVcsQUFBQyxDQUFDLElBQUcsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFDLENBQUMsQ0FBRztBQUNqQyxjQUFVLEtBQUssQUFBQyxDQUFDLEdBQUksQ0FBQSxNQUFLLGdCQUFnQixBQUFDLENBQUMsb0RBQW1ELENBQUMsQ0FBQyxDQUFDO0FBQ2xHLFdBQU07RUFDVjtBQUFBLEFBRUEsWUFBVSxTQUFTLEFBQUMsQ0FBQyxJQUFHLENBQUcsV0FBUyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUVELEdBQUcsVUFBVSxTQUFTLEVBQUksVUFBVSxXQUFVLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDN0QsQUFBSSxJQUFBLENBQUEsSUFBRyxFQUFJLEtBQUcsQ0FBQztBQUNmLEtBQUksTUFBSyxJQUFNLENBQUEsUUFBTyxPQUFPLFNBQVMsQ0FBRztBQUNyQyxNQUFJO0FBQ0EsQUFBSSxRQUFBLENBQUEsT0FBTSxFQUFJLENBQUEsSUFBRyxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUMsTUFBTSxBQUFDLENBQUMsSUFBRyxDQUFHLENBQUEsTUFBSyxHQUFLLEdBQUMsQ0FBQyxDQUFDO0FBQ3hELFNBQUksQ0FBQSxTQUFTLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQSxFQUFLLENBQUEsQ0FBQSxXQUFXLEFBQUMsQ0FBQyxPQUFNLEtBQUssQ0FBQyxDQUFHO0FBQ25ELGNBQU0sS0FBSyxBQUFDLENBQ1IsU0FBVSxDQUFBLENBQUc7QUFDVCxvQkFBVSxTQUFTLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztRQUMzQixDQUNBLFVBQVUsR0FBRSxDQUFHO0FBQ1gsb0JBQVUsS0FBSyxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDO01BQ1YsS0FDSztBQUNELGtCQUFVLFNBQVMsQUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDO01BQ2pDO0FBQUEsSUFDSixDQUNBLE9BQU0sQ0FBQSxDQUFHO0FBQ0wsZ0JBQVUsS0FBSyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDdkI7QUFBQSxFQUNKLEtBQ0s7QUFDRCxjQUFVLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNuQztBQUFBLEFBQ0osQ0FBQztBQUVELEtBQUssUUFBUSxFQUFJLEtBQUcsQ0FBQztBQUFBIiwiZmlsZSI6ImFjdGl2aXRpZXMvZnVuYy5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBBY3Rpdml0eSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5XCIpO1xubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmxldCBlcnJvcnMgPSByZXF1aXJlKFwiLi4vY29tbW9uL2Vycm9yc1wiKTtcbmxldCBndWlkcyA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ndWlkcycpO1xuXG5mdW5jdGlvbiBGdW5jKCkge1xuICAgIEFjdGl2aXR5LmNhbGwodGhpcyk7XG4gICAgdGhpcy5jb2RlID0gbnVsbDtcbiAgICB0aGlzLmNvZGVQcm9wZXJ0aWVzLmFkZCgnY29kZScpO1xufVxuXG51dGlsLmluaGVyaXRzKEZ1bmMsIEFjdGl2aXR5KTtcblxuRnVuYy5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24odGhpcy5nZXQoXCJjb2RlXCIpKSkge1xuICAgICAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBlcnJvcnMuVmFsaWRhdGlvbkVycm9yKFwiRnVuYyBhY3Rpdml0eSdzIHByb3BlcnR5ICdjb2RlJyBpcyBub3QgYSBmdW5jdGlvbi5cIikpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbENvbnRleHQuc2NoZWR1bGUoYXJncywgXCJfYXJnc0dvdFwiKTtcbn07XG5cbkZ1bmMucHJvdG90eXBlLl9hcmdzR290ID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBpZiAocmVhc29uID09PSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBmUmVzdWx0ID0gc2VsZi5nZXQoXCJjb2RlXCIpLmFwcGx5KHNlbGYsIHJlc3VsdCB8fCBbXSk7XG4gICAgICAgICAgICBpZiAoXy5pc09iamVjdChmUmVzdWx0KSAmJiBfLmlzRnVuY3Rpb24oZlJlc3VsdC50aGVuKSkge1xuICAgICAgICAgICAgICAgIGZSZXN1bHQudGhlbihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKHYpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUoZlJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmM7Il19
