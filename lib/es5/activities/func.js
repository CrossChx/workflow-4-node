"use strict";
var Activity = require("./activity");
var util = require("util");
var _ = require("lodash");
var common = require("../common");
var errors = common.errors;
var guids = common.guids;
var async = common.asyncHelpers.async;
function Func(code) {
  Activity.call(this);
  this.code = code || null;
  this.codeProperties.add("code");
}
Func.async = function(code) {
  return new Func(async(code));
};
util.inherits(Func, Activity);
Func.prototype.run = function(callContext, args) {
  callContext.schedule(args, "_argsGot");
};
Func.prototype._argsGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    this._args = result;
    callContext.schedule(this.code, "_codeGot");
  } else {
    callContext.end(reason, result);
  }
};
Func.prototype._codeGot = function(callContext, reason, result) {
  var code = result;
  if (reason === Activity.states.complete) {
    if (!_.isFunction(code)) {
      callContext.fail(new errors.ValidationError("Func activity's property 'code' is not a function."));
      return;
    }
    try {
      var fResult = code.apply(this, (this._args || []).concat(_));
      if (_.isObject(fResult) && _.isFunction(fResult.then)) {
        fResult.then(function(v) {
          callContext.complete(v);
        }, function(err) {
          callContext.fail(err);
        });
      } else {
        callContext.complete(fResult);
      }
    } catch (e) {
      callContext.fail(e);
    }
  } else {
    callContext.end(reason, this._args);
  }
};
module.exports = Func;
//# sourceMappingURL=data:application/json;base64,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LFNBQVUsQ0FBQSxDQUFHO0FBQ1Qsb0JBQVUsU0FBUyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7UUFDM0IsQ0FDQSxVQUFVLEdBQUUsQ0FBRztBQUNYLG9CQUFVLEtBQUssQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQztNQUNWLEtBQ0s7QUFDRCxrQkFBVSxTQUFTLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQztNQUNqQztBQUFBLElBQ0osQ0FDQSxPQUFNLENBQUEsQ0FBRztBQUNMLGdCQUFVLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ3ZCO0FBQUEsRUFDSixLQUNLO0FBQ0QsY0FBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsQ0FBQSxJQUFHLE1BQU0sQ0FBQyxDQUFDO0VBQ3ZDO0FBQUEsQUFDSixDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksS0FBRyxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy9mdW5jLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IEFjdGl2aXR5ID0gcmVxdWlyZShcIi4vYWN0aXZpdHlcIik7XG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xubGV0IGNvbW1vbiA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG5sZXQgZXJyb3JzID0gY29tbW9uLmVycm9ycztcbmxldCBndWlkcyA9IGNvbW1vbi5ndWlkcztcbmxldCBhc3luYyA9IGNvbW1vbi5hc3luY0hlbHBlcnMuYXN5bmM7XG5cbmZ1bmN0aW9uIEZ1bmMoY29kZSkge1xuICAgIEFjdGl2aXR5LmNhbGwodGhpcyk7XG4gICAgdGhpcy5jb2RlID0gY29kZSB8fCBudWxsO1xuICAgIHRoaXMuY29kZVByb3BlcnRpZXMuYWRkKFwiY29kZVwiKTtcbn1cblxuRnVuYy5hc3luYyA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICByZXR1cm4gbmV3IEZ1bmMoYXN5bmMoY29kZSkpO1xufTtcblxudXRpbC5pbmhlcml0cyhGdW5jLCBBY3Rpdml0eSk7XG5cbkZ1bmMucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgYXJncykge1xuICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKGFyZ3MsIFwiX2FyZ3NHb3RcIik7XG59O1xuXG5GdW5jLnByb3RvdHlwZS5fYXJnc0dvdCA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcbiAgICBpZiAocmVhc29uID09PSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5fYXJncyA9IHJlc3VsdDtcbiAgICAgICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5jb2RlLCBcIl9jb2RlR290XCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcbiAgICB9XG59O1xuXG5GdW5jLnByb3RvdHlwZS5fY29kZUdvdCA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcbiAgICBsZXQgY29kZSA9IHJlc3VsdDtcbiAgICBpZiAocmVhc29uID09PSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUpIHtcbiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oY29kZSkpIHtcbiAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IGVycm9ycy5WYWxpZGF0aW9uRXJyb3IoXCJGdW5jIGFjdGl2aXR5J3MgcHJvcGVydHkgJ2NvZGUnIGlzIG5vdCBhIGZ1bmN0aW9uLlwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGZSZXN1bHQgPSBjb2RlLmFwcGx5KHRoaXMsICh0aGlzLl9hcmdzIHx8IFtdKS5jb25jYXQoXykpO1xuICAgICAgICAgICAgaWYgKF8uaXNPYmplY3QoZlJlc3VsdCkgJiYgXy5pc0Z1bmN0aW9uKGZSZXN1bHQudGhlbikpIHtcbiAgICAgICAgICAgICAgICBmUmVzdWx0LnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZSh2KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKGZSZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHRoaXMuX2FyZ3MpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuYzsiXX0=
