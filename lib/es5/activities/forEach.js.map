{"version":3,"names":[],"mappings":"","sources":["activities/forEach.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet _ = require(\"lodash\");\r\nlet is = require(\"../common/is\");\r\nlet Block = require(\"./block\");\r\nlet WithBody = require(\"./withBody\");\r\nlet errors = require(\"../common/errors\");\r\n\r\nfunction ForEach() {\r\n    WithBody.call(this);\r\n\r\n    this.items = null;\r\n    this.varName = \"item\";\r\n    this.parallel = false;\r\n    this._bodies = null;\r\n}\r\n\r\nutil.inherits(ForEach, WithBody);\r\n\r\nForEach.prototype.initializeStructure = function() {\r\n    if (this.parallel) {\r\n        let numCPUs = require(\"os\").cpus().length;\r\n        this._bodies = [];\r\n        if (this.args && this.args.length) {\r\n            for (let i = 0; i < Math.min(process.env.UV_THREADPOOL_SIZE || 100000, numCPUs); i++) {\r\n                let newArgs = [];\r\n                for (let arg of this.args) {\r\n                    if (arg instanceof Activity) {\r\n                        newArgs.push(arg.clone());\r\n                    }\r\n                    else {\r\n                        newArgs.push(arg);\r\n                    }\r\n                }\r\n                let newBody = new Block();\r\n                newBody.args = newArgs;\r\n                this._bodies.push(newBody);\r\n            }\r\n        }\r\n        this.args = null;\r\n    }\r\n    else {\r\n        WithBody.prototype.initializeStructure.call(this);\r\n    }\r\n};\r\n\r\nForEach.prototype.run = function (callContext, args) {\r\n    const varName = this.varName;\r\n    let items = this.items;\r\n    if (!_.isNull(items)) {\r\n        this[varName] = null;\r\n        callContext.schedule(items, \"_itemsGot\");\r\n    }\r\n    else {\r\n        callContext.complete();\r\n    }\r\n};\r\n\r\nForEach.prototype._itemsGot = function (callContext, reason, result) {\r\n    if (reason === Activity.states.complete && !_.isUndefined(result)) {\r\n        if (result && _.isFunction(result.next)) {\r\n            this._iterator = result;\r\n        }\r\n        else {\r\n            this._remainingItems = _.isArray(result) ? result : [result];\r\n        }\r\n        callContext.activity._doStep.call(this, callContext);\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nForEach.prototype._doStep = function (callContext, lastResult) {\r\n    const varName = this.varName;\r\n    let remainingItems = this._remainingItems;\r\n    let iterator = this._iterator;\r\n    if (remainingItems && remainingItems.length) {\r\n        if (this.parallel) {\r\n            let bodies = this._bodies;\r\n            let pack = [];\r\n            let idx = 0;\r\n            while (remainingItems.length && idx < bodies.length) {\r\n                let item = remainingItems[0];\r\n                remainingItems.splice(0, 1);\r\n                let variables = {};\r\n                variables[varName] = item;\r\n                pack.push({\r\n                    variables: variables,\r\n                    activity: bodies[idx++]\r\n                });\r\n            }\r\n            callContext.schedule(pack, \"_bodyFinished\");\r\n        }\r\n        else {\r\n            let item = remainingItems[0];\r\n            remainingItems.splice(0, 1);\r\n            let variables = {};\r\n            variables[varName] = item;\r\n            callContext.schedule({ activity: this._body, variables: variables }, \"_bodyFinished\");\r\n        }\r\n        return;\r\n    }\r\n\r\n    if (iterator) {\r\n        if (this.parallel) {\r\n            callContext.fail(new errors.ActivityRuntimeError(\"Parallel execution not supported with generators.\"));\r\n            return;\r\n        }\r\n        else {\r\n            let next = iterator.next();\r\n            if (!next.done) {\r\n                let variables = {};\r\n                variables[varName] = next.value;\r\n                callContext.schedule({ activity: this._body, variables: variables }, \"_bodyFinished\");\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    callContext.complete(lastResult);\r\n};\r\n\r\nForEach.prototype._bodyFinished = function (callContext, reason, result) {\r\n    if (reason === Activity.states.complete) {\r\n        callContext.activity._doStep.call(this, callContext, result);\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nmodule.exports = ForEach;"],"file":"activities/forEach.js","sourceRoot":"/source/"}