{"version":3,"names":[],"mappings":"","sources":["activities/forEach.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nlet is = require(\"../common/is\");\nlet Block = require(\"./block\");\nlet WithBody = require(\"./withBody\");\n\nfunction ForEach() {\n    WithBody.call(this);\n\n    this.items = null;\n    this.varName = \"item\";\n    this.parallel = false;\n    this._bodies = null;\n}\n\nutil.inherits(ForEach, WithBody);\n\nForEach.prototype.initializeStructure = function() {\n    if (this.parallel) {\n        let numCPUs = require(\"os\").cpus().length;\n        this._bodies = [];\n        if (this.args && this.args.length) {\n            for (let i = 0; i < Math.min(process.env.UV_THREADPOOL_SIZE || 100000, numCPUs); i++) {\n                let newArgs = [];\n                for (let arg of this.args) {\n                    if (arg instanceof Activity) {\n                        newArgs.push(arg.clone());\n                    }\n                    else {\n                        newArgs.push(arg);\n                    }\n                }\n                let newBody = new Block();\n                newBody.args = newArgs;\n                this._bodies.push(newBody);\n            }\n        }\n        this.args = null;\n    }\n    else {\n        WithBody.prototype.initializeStructure.call(this);\n    }\n};\n\nForEach.prototype.run = function (callContext, args) {\n    const varName = this.varName;\n    let items = this.items;\n    if (!_.isNull(items)) {\n        this[varName] = null;\n        callContext.schedule(items, \"_itemsGot\");\n    }\n    else {\n        callContext.complete();\n    }\n};\n\nForEach.prototype._itemsGot = function (callContext, reason, result) {\n    if (reason === Activity.states.complete && !_.isUndefined(result)) {\n        this._todo = _.isArray(result) ? result : [ result ];\n        callContext.activity._doStep.call(this, callContext);\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nForEach.prototype._doStep = function (callContext, lastResult) {\n    const varName = this.varName;\n    let todo = this._todo;\n    if (todo && todo.length) {\n        if (this.parallel) {\n            let bodies = this._bodies;\n            let pack = [];\n            let idx = 0;\n            while (todo.length && idx < bodies.length) {\n                let item = todo[0];\n                todo.splice(0, 1);\n                let variables = {};\n                variables[varName] = item;\n                pack.push({\n                    variables: variables,\n                    activity: bodies[idx++]\n                });\n            }\n            callContext.schedule(pack, \"_bodyFinished\");\n        }\n        else {\n            let item = todo[0];\n            todo.splice(0, 1);\n            let variables = {};\n            variables[varName] = item;\n            callContext.schedule({ activity: this._body, variables: variables }, \"_bodyFinished\");\n        }\n    }\n    else {\n        callContext.complete(lastResult);\n    }\n};\n\nForEach.prototype._bodyFinished = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        callContext.activity._doStep.call(this, callContext, result);\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nmodule.exports = ForEach;"],"file":"activities/forEach.js","sourceRoot":"/source/"}