"use strict";
"use strict";
var Activity = require("./activity");
var util = require("util");
var WithBody = require("./withBody");
function While() {
  WithBody.call(this);
  this.condition = null;
}
util.inherits(While, WithBody);
While.prototype.run = function(callContext, args) {
  var condition = this.get("condition");
  if (condition) {
    callContext.schedule(condition, "_conditionGot");
  } else {
    callContext.complete();
  }
};
While.prototype._conditionGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    if (!result) {
      callContext.complete(this.get("_lastBodyResult"));
    } else {
      WithBody.prototype.run.call(this, callContext);
    }
  } else {
    callContext.end(reason, result);
  }
};
While.prototype.bodyCompleted = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    this.set("_lastBodyResult", result);
    callContext.schedule(this.get("condition"), "_conditionGot");
  } else {
    callContext.end(reason, result);
  }
};
module.exports = While;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndoaWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsV0FBVyxDQUFDO0FBRVosQUFBSSxFQUFBLENBQUEsUUFBTyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsWUFBVyxDQUFDLENBQUM7QUFDcEMsQUFBSSxFQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsTUFBSyxDQUFDLENBQUM7QUFDMUIsQUFBSSxFQUFBLENBQUEsUUFBTyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsWUFBVyxDQUFDLENBQUM7QUFFcEMsT0FBUyxNQUFJLENBQUUsQUFBRCxDQUFHO0FBQ2IsU0FBTyxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUVuQixLQUFHLFVBQVUsRUFBSSxLQUFHLENBQUM7QUFDekI7QUFBQSxBQUVBLEdBQUcsU0FBUyxBQUFDLENBQUMsS0FBSSxDQUFHLFNBQU8sQ0FBQyxDQUFDO0FBRTlCLElBQUksVUFBVSxJQUFJLEVBQUksVUFBVSxXQUFVLENBQUcsQ0FBQSxJQUFHLENBQUc7QUFDL0MsQUFBSSxJQUFBLENBQUEsU0FBUSxFQUFJLENBQUEsSUFBRyxJQUFJLEFBQUMsQ0FBQyxXQUFVLENBQUMsQ0FBQztBQUNyQyxLQUFJLFNBQVEsQ0FBRztBQUNYLGNBQVUsU0FBUyxBQUFDLENBQUMsU0FBUSxDQUFHLGdCQUFjLENBQUMsQ0FBQztFQUNwRCxLQUNLO0FBQ0QsY0FBVSxTQUFTLEFBQUMsRUFBQyxDQUFDO0VBQzFCO0FBQUEsQUFDSixDQUFDO0FBRUQsSUFBSSxVQUFVLGNBQWMsRUFBSSxVQUFVLFdBQVUsQ0FBRyxDQUFBLE1BQUssQ0FBRyxDQUFBLE1BQUssQ0FBRztBQUNuRSxLQUFJLE1BQUssSUFBTSxDQUFBLFFBQU8sT0FBTyxTQUFTLENBQUc7QUFDckMsT0FBSSxDQUFDLE1BQUssQ0FBRztBQUNULGdCQUFVLFNBQVMsQUFBQyxDQUFDLElBQUcsSUFBSSxBQUFDLENBQUMsaUJBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ3JELEtBQ0s7QUFDRCxhQUFPLFVBQVUsSUFBSSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUcsWUFBVSxDQUFDLENBQUM7SUFDbEQ7QUFBQSxFQUNKLEtBQ0s7QUFDRCxjQUFVLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNuQztBQUFBLEFBQ0osQ0FBQztBQUVELElBQUksVUFBVSxjQUFjLEVBQUksVUFBVSxXQUFVLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDbkUsS0FBSSxNQUFLLElBQU0sQ0FBQSxRQUFPLE9BQU8sU0FBUyxDQUFHO0FBQ3JDLE9BQUcsSUFBSSxBQUFDLENBQUMsaUJBQWdCLENBQUcsT0FBSyxDQUFDLENBQUM7QUFDbkMsY0FBVSxTQUFTLEFBQUMsQ0FBQyxJQUFHLElBQUksQUFBQyxDQUFDLFdBQVUsQ0FBQyxDQUFHLGdCQUFjLENBQUMsQ0FBQztFQUNoRSxLQUNLO0FBQ0QsY0FBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsT0FBSyxDQUFDLENBQUM7RUFDbkM7QUFBQSxBQUNKLENBQUM7QUFFRCxLQUFLLFFBQVEsRUFBSSxNQUFJLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL3doaWxlLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IEFjdGl2aXR5ID0gcmVxdWlyZShcIi4vYWN0aXZpdHlcIik7XG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IFdpdGhCb2R5ID0gcmVxdWlyZShcIi4vd2l0aEJvZHlcIik7XG5cbmZ1bmN0aW9uIFdoaWxlKCkge1xuICAgIFdpdGhCb2R5LmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmNvbmRpdGlvbiA9IG51bGw7XG59XG5cbnV0aWwuaW5oZXJpdHMoV2hpbGUsIFdpdGhCb2R5KTtcblxuV2hpbGUucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgYXJncykge1xuICAgIGxldCBjb25kaXRpb24gPSB0aGlzLmdldChcImNvbmRpdGlvblwiKTtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKGNvbmRpdGlvbiwgXCJfY29uZGl0aW9uR290XCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUoKTtcbiAgICB9XG59O1xuXG5XaGlsZS5wcm90b3R5cGUuX2NvbmRpdGlvbkdvdCA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcbiAgICBpZiAocmVhc29uID09PSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKHRoaXMuZ2V0KFwiX2xhc3RCb2R5UmVzdWx0XCIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFdpdGhCb2R5LnByb3RvdHlwZS5ydW4uY2FsbCh0aGlzLCBjYWxsQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XG4gICAgfVxufTtcblxuV2hpbGUucHJvdG90eXBlLmJvZHlDb21wbGV0ZWQgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XG4gICAgaWYgKHJlYXNvbiA9PT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMuc2V0KFwiX2xhc3RCb2R5UmVzdWx0XCIsIHJlc3VsdCk7XG4gICAgICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKHRoaXMuZ2V0KFwiY29uZGl0aW9uXCIpLCBcIl9jb25kaXRpb25Hb3RcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV2hpbGU7Il19
