{"version":3,"names":[],"mappings":"","sources":["activities/delayTo.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet Composite = require(\"./composite\");\nlet util = require(\"util\");\nlet _ = require(\"lodash\");\nlet specStrings = require(\"../common/specStrings\");\nlet errors = require(\"../common/errors\");\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\n\nfunction DelayTo() {\n    Composite.call(this);\n\n    this.to = null;\n    this._inHost = false;\n}\n\nutil.inherits(DelayTo, Composite);\n\nDelayTo.prototype.createImplementation = function (execContext) {\n    assert(!!execContext);\n    let methodName = specStrings.hosting.createDelayToMethodName(this.instanceId);\n    return {\n        \"@block\": {\n            inHost: \"= this.$parent._inHost\",\n            delayTo: \"= this.$parent.to\",\n            args: {\n                \"@if\": {\n                    condition: \"= this.inHost\",\n                    then: {\n                        \"@block\": {\n                            v: null,\n                            done: false,\n                            args: [\n                                {\n                                    \"@if\": {\n                                        condition: \"= _.isDate(this.delayTo)\",\n                                        then: [\n                                            {\n                                                \"@while\": {\n                                                    condition: \"= !this.done\",\n                                                    args: [\n                                                        {\n                                                            \"@beginMethod\": {\n                                                                methodName: methodName,\n                                                                instanceIdPath: \"[0]\",\n                                                                \"@to\": \"v\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"@if\": {\n                                                                condition: \"= this.v[1].getTime() === this.delayTo.getTime()\",\n                                                                then: {\n                                                                    \"@assign\": {\n                                                                        to: \"done\",\n                                                                        value: true\n                                                                    }\n                                                                }\n                                                            }\n                                                        },\n                                                        {\n                                                            \"@endMethod\": {\n                                                                methodName: methodName\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    },\n                    else: function() {\n                        if (this.delayTo && _.isDate(this.delayTo)) {\n                            let ms = this.delayTo - new Date();\n                            if (ms < 0) {\n                                ms = 0;\n                            }\n                            if (ms) {\n                                return Bluebird.delay(ms);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n};\n\nDelayTo.prototype.run = function(callContext, args) {\n    this._inHost = !!callContext.executionContext.engine.instance;\n    Composite.prototype.run.call(this, callContext, args);\n};\n\nmodule.exports = DelayTo;"],"file":"activities/delayTo.js","sourceRoot":"/source/"}