"use strict";
"use strict";
var _ = require("lodash");
var Reflection = require("backpack-node").system.Reflection;
var maxDepth = 10;
var templateHelpers = {
  asGet: function(expr) {
    var parts = expr.split(".");
    var result;
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (parts)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var part = $__1.value;
        {
          if (!result) {
            result = "(function() { var v = this.get('" + part.trim() + "');";
          } else {
            result += "v = _.isFunction(v.get) ? v.get('" + part.trim() + "') : v." + part.trim() + ";";
          }
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
    result += "return v;}).bind(this)()";
    return result;
  },
  isFunctionString: function(str) {
    return _.isString(str) && str.match(/^\s*function\s*\w*\s*\((?:\w+,)*(?:\w+)?\)\s*\{/);
  },
  isTemplate: function(obj) {
    var activityCount = 0;
    templateHelpers.visitActivities(obj, function() {
      activityCount++;
    });
    return activityCount > 0;
  },
  visitActivities: function(obj, f) {
    if (!_.isPlainObject(obj) && !_.isArray(obj)) {
      return ;
    }
    Reflection.visitObject(obj, function(subObj, parent, pkey) {
      if (_.isString(subObj)) {
        var str = subObj.trim();
        if (str.length > 1) {
          if (str[0] === "#") {
            var markup = {"@expression": {expr: str.substr(1)}};
            f(markup, parent, pkey);
            return false;
          }
          if (str[0] === "=") {
            var markup$__7 = {"@expression": {expr: templateHelpers.asGet(str.substr(1))}};
            f(markup$__7, parent, pkey);
            return false;
          }
          if (templateHelpers.isFunctionString(str)) {
            var markup$__8 = {"@func": {code: str}};
            f(markup$__8, parent, pkey);
            return false;
          }
        }
      } else if (_.isPlainObject(subObj)) {
        var keys = _.keys(subObj);
        if (keys.length === 1) {
          var key = keys[0];
          if (key[0] === "@" && key.length > 1) {
            var markup$__9 = {};
            markup$__9[key] = subObj[key];
            f(markup$__9, parent, pkey);
            return false;
          }
        } else if (keys.length === 2) {
          var key1 = keys[0];
          var key2 = keys[1];
          if (key1 === "@require" && key2[0] === "@" && key2.length > 1) {
            var markup$__10 = {};
            markup$__10[key1] = subObj[key1];
            markup$__10[key2] = subObj[key2];
            f(markup$__10, parent, pkey);
            return false;
          } else if (key2 === "@require" && key1[0] === "@" && key1.length > 1) {
            var markup$__11 = {};
            markup$__11[key2] = subObj[key2];
            markup$__11[key1] = subObj[key1];
            f(markup$__11, parent, pkey);
            return false;
          }
        }
      } else if (_.isFunction(subObj)) {
        var markup$__12 = {"@func": {code: subObj}};
        f(markup$__12, parent, pkey);
        return false;
      }
      return true;
    }, maxDepth);
  }
};
module.exports = templateHelpers;
//# sourceMappingURL=data:application/json;base64,
