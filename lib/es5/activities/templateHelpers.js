"use strict";
var _ = require('lodash');
var Reflection = require('backpack-node').system.Reflection;
var maxDepth = 10;
var templateHelpers = {
  isTemplate: function(obj) {
    var activityCount = 0;
    templateHelpers.visitActivities(obj, function() {
      activityCount++;
    });
    return activityCount > 0;
  },
  visitActivities: function(obj, f) {
    if (!_.isPlainObject(obj) && !_.isArray(obj))
      return ;
    Reflection.visitObject(obj, function(subObj, parent, pkey) {
      if (_.isString(subObj)) {
        var str = subObj.trim();
        if (str.length > 1 && str[0] === '#') {
          var markup = {expression: {expr: str.substr(1)}};
          f(markup, parent, pkey);
          return false;
        }
      } else if (_.isPlainObject(subObj)) {
        var keys = _.keys(subObj);
        if (keys.length === 1) {
          var key = keys[0];
          if (key[0] === '@' && key.length > 1) {
            var markup = {};
            markup[key.substr(1)] = subObj[key];
            f(markup, parent, pkey);
            return false;
          }
        } else if (keys.length == 2) {
          var key1 = keys[0];
          var key2 = keys[1];
          if (key1 === '@require' && key2[0] === '@' && key2.length > 1) {
            var markup = {};
            markup[key1] = subObj[key1];
            markup[key2.substr(1)] = subObj[key2];
            f(markup, parent, pkey);
            return false;
          } else if (key2 === '@require' && key1[0] === '@' && key1.length > 1) {
            var markup = {};
            markup[key2] = subObj[key2];
            markup[key1.substr(1)] = subObj[key1];
            f(markup, parent, pkey);
            return false;
          }
        }
      }
      return true;
    }, maxDepth);
  }
};
module.exports = templateHelpers;
//# sourceMappingURL=data:application/json;base64,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ZXMvdGVtcGxhdGVIZWxwZXJzLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgUmVmbGVjdGlvbiA9IHJlcXVpcmUoJ2JhY2twYWNrLW5vZGUnKS5zeXN0ZW0uUmVmbGVjdGlvbjtcclxuXHJcbnZhciBtYXhEZXB0aCA9IDEwO1xyXG5cclxudmFyIHRlbXBsYXRlSGVscGVycyA9IHtcclxuXHJcbiAgICBpc1RlbXBsYXRlOiBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgdmFyIGFjdGl2aXR5Q291bnQgPSAwO1xyXG4gICAgICAgIHRlbXBsYXRlSGVscGVycy52aXNpdEFjdGl2aXRpZXMob2JqLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGFjdGl2aXR5Q291bnQrKztcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYWN0aXZpdHlDb3VudCA+IDA7XHJcbiAgICB9LFxyXG5cclxuICAgIHZpc2l0QWN0aXZpdGllczogZnVuY3Rpb24gKG9iaiwgZikge1xyXG4gICAgICAgIGlmICghXy5pc1BsYWluT2JqZWN0KG9iaikgJiYgIV8uaXNBcnJheShvYmopKSByZXR1cm47XHJcbiAgICAgICAgUmVmbGVjdGlvbi52aXNpdE9iamVjdChvYmosIGZ1bmN0aW9uIChzdWJPYmosIHBhcmVudCwgcGtleSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uaXNTdHJpbmcoc3ViT2JqKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0ciA9IHN1Yk9iai50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCA+IDEgJiYgc3RyWzBdID09PSAnIycpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFya3VwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByOiBzdHIuc3Vic3RyKDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGYobWFya3VwLCBwYXJlbnQsIHBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChfLmlzUGxhaW5PYmplY3Qoc3ViT2JqKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBrZXlzID0gXy5rZXlzKHN1Yk9iaik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleVswXSA9PT0gJ0AnICYmIGtleS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrdXAgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya3VwW2tleS5zdWJzdHIoMSldID0gc3ViT2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYobWFya3VwLCBwYXJlbnQsIHBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5cy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkxID0ga2V5c1swXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5MiA9IGtleXNbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleTEgPT09ICdAcmVxdWlyZScgJiYga2V5MlswXSA9PT0gJ0AnICYmIGtleTIubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya3VwID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmt1cFtrZXkxXSA9IHN1Yk9ialtrZXkxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya3VwW2tleTIuc3Vic3RyKDEpXSA9IHN1Yk9ialtrZXkyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZihtYXJrdXAsIHBhcmVudCwgcGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5MiA9PT0gJ0ByZXF1aXJlJyAmJiBrZXkxWzBdID09PSAnQCcgJiYga2V5MS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrdXAgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya3VwW2tleTJdID0gc3ViT2JqW2tleTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrdXBba2V5MS5zdWJzdHIoMSldID0gc3ViT2JqW2tleTFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmKG1hcmt1cCwgcGFyZW50LCBwa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LCBtYXhEZXB0aCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHRlbXBsYXRlSGVscGVyczsiXX0=
