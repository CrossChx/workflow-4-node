{"version":3,"names":[],"mappings":"","sources":["activities/declarator.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet Activity = require(\"./activity\");\r\nlet util = require(\"util\");\r\nlet is = require(\"../common/is\");\r\nlet _ = require(\"lodash\");\r\n\r\nfunction Declarator() {\r\n    Activity.call(this);\r\n    this.nonScopedProperties.add(\"reservedProperties\");\r\n    this.nonScopedProperties.add(\"reserved\");\r\n    this.nonScopedProperties.add(\"promotedProperties\");\r\n    this.nonScopedProperties.add(\"promoted\");\r\n    this.nonScopedProperties.add(\"varsDeclared\");\r\n\r\n    // Properties those cannot be declared freely\r\n    this.reservedProperties = new Set();\r\n\r\n    // Properties those will be promoted during serialization\r\n    this.promotedProperties = new Set();\r\n}\r\n\r\nutil.inherits(Declarator, Activity);\r\n\r\nDeclarator.prototype.reserved = function (name, value) {\r\n    if (this.promotedProperties.has(name)) {\r\n        throw new Error(\"Property '\" + name + \"' cannot be reserved because it's promoted.\");\r\n    }\r\n    if (!_.isUndefined(value)) {\r\n        this[name] = value;\r\n    }\r\n    this.reservedProperties.add(name);\r\n};\r\n\r\nDeclarator.prototype.promoted = function (name, value) {\r\n    if (this.reservedProperties.has(name)) {\r\n        throw new Error(\"Property '\" + name + \"' cannot be promoted because it's reserved.\");\r\n    }\r\n    if (!_.isUndefined(value)) {\r\n        this[name] = value;\r\n    }\r\n    this.promotedProperties.add(name);\r\n};\r\n\r\nDeclarator.prototype.run = function (callContext, args) {\r\n    let activityVariables = [];\r\n    let _activityVariableFieldNames = [];\r\n    this._activityVariableFieldNames = _activityVariableFieldNames;\r\n    let resProps = callContext.activity.reservedProperties;\r\n    for (let fieldName of callContext.activity._getScopeKeys()) {\r\n        if (!resProps.has(fieldName)) {\r\n            let fieldValue = this[fieldName];\r\n            if (fieldValue instanceof Activity) {\r\n                activityVariables.push(fieldValue);\r\n                _activityVariableFieldNames.push(fieldName);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (activityVariables.length) {\r\n        this._savedArgs = args;\r\n        callContext.schedule(activityVariables, \"_varsGot\");\r\n    }\r\n    else {\r\n        this.delete(\"_activityVariableFieldNames\");\r\n        callContext.activity.varsDeclared.call(this, callContext, args);\r\n    }\r\n};\r\n\r\nDeclarator.prototype._varsGot = function (callContext, reason, result) {\r\n    if (reason === Activity.states.complete) {\r\n        let idx = 0;\r\n        for (let fieldName of this._activityVariableFieldNames) {\r\n            this[fieldName] = result[idx++];\r\n        }\r\n        let args = this._savedArgs;\r\n        this.delete(\"_savedArgs\");\r\n        this.delete(\"_activityVariableFieldNames\");\r\n        callContext.activity.varsDeclared.call(this, callContext, args);\r\n    }\r\n    else {\r\n        callContext.end(reason, result);\r\n    }\r\n};\r\n\r\nmodule.exports = Declarator;"],"file":"activities/declarator.js","sourceRoot":"/source/"}