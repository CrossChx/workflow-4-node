{"version":3,"names":[],"mappings":"","sources":["activities/declarator.js"],"sourcesContent":["\"use strict\";\n\nlet Activity = require(\"./activity\");\nlet util = require(\"util\");\nlet is = require(\"../common/is\");\nlet _ = require(\"lodash\");\n\nfunction Declarator() {\n    Activity.call(this);\n    this.nonScopedProperties.add(\"reservedProperties\");\n    this.nonScopedProperties.add(\"reserved\");\n    this.nonScopedProperties.add(\"promotedProperties\");\n    this.nonScopedProperties.add(\"promoted\");\n    this.nonScopedProperties.add(\"varsDeclared\");\n\n    // Properties those cannot be declared freely\n    this.reservedProperties = new Set();\n\n    // Properties those will be promoted during serialization\n    this.promotedProperties = new Set();\n}\n\nutil.inherits(Declarator, Activity);\n\nDeclarator.prototype.reserved = function (name, value) {\n    if (this.promotedProperties.has(name)) {\n        throw new Error(\"Property '\" + name + \"' cannot be reserved because it's promoted.\");\n    }\n    if (!_.isUndefined(value)) {\n        this[name] = value;\n    }\n    this.reservedProperties.add(name);\n};\n\nDeclarator.prototype.promoted = function (name, value) {\n    if (this.reservedProperties.has(name)) {\n        throw new Error(\"Property '\" + name + \"' cannot be promoted because it's reserved.\");\n    }\n    if (!_.isUndefined(value)) {\n        this[name] = value;\n    }\n    this.promotedProperties.add(name);\n};\n\nDeclarator.prototype.run = function (callContext, args) {\n    let activityVariables = [];\n    let _activityVariableFieldNames = [];\n    this._activityVariableFieldNames = _activityVariableFieldNames;\n    let resProps = callContext.activity.reservedProperties;\n    for (let fieldName of callContext.activity._getScopeKeys()) {\n        if (!resProps.has(fieldName)) {\n            let fieldValue = this[fieldName];\n            if (fieldValue instanceof Activity) {\n                activityVariables.push(fieldValue);\n                _activityVariableFieldNames.push(fieldName);\n            }\n        }\n    }\n\n    if (activityVariables.length) {\n        this._savedArgs = args;\n        callContext.schedule(activityVariables, \"_varsGot\");\n    }\n    else {\n        this.delete(\"_activityVariableFieldNames\");\n        callContext.activity.varsDeclared.call(this, callContext, args);\n    }\n};\n\nDeclarator.prototype._varsGot = function (callContext, reason, result) {\n    if (reason === Activity.states.complete) {\n        let idx = 0;\n        for (let fieldName of this._activityVariableFieldNames) {\n            this[fieldName] = result[idx++];\n        }\n        let args = this._savedArgs;\n        this.delete(\"_savedArgs\");\n        this.delete(\"_activityVariableFieldNames\");\n        callContext.activity.varsDeclared.call(this, callContext, args);\n    }\n    else {\n        callContext.end(reason, result);\n    }\n};\n\nmodule.exports = Declarator;"],"file":"activities/declarator.js","sourceRoot":"/source/"}