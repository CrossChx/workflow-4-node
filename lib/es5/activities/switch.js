"use strict";
"use strict";
var Activity = require("./activity");
var util = require("util");
var _ = require("lodash");
var Case = require("./case");
var When = require("./when");
var Default = require("./default");
var errors = require("../common/errors");
var guids = require("../common/guids");
function Switch() {
  Activity.call(this);
  this.expression = null;
}
util.inherits(Switch, Activity);
Switch.prototype.run = function(callContext, args) {
  if (args && args.length) {
    var parts = {
      cases: [],
      whens: [],
      default: null
    };
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (args)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var arg = $__1.value;
        {
          if (arg instanceof Case) {
            parts.cases.push(arg);
          } else if (arg instanceof When) {
            parts.whens.push(arg);
          } else if (arg instanceof Default) {
            if (parts.default === null) {
              parts.default = arg;
            } else {
              throw new errors.ActivityRuntimeError("Multiple default for a switch is not allowed.");
            }
          }
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
    if (parts.cases.length || parts.whens.length || parts.default) {
      this.set("_parts", parts);
      if (parts.cases.length) {
        this.set("_doCase", true);
        callContext.schedule(this.get("expression"), "_expressionGot");
      } else {
        this.set("_doCase", false);
        callContext.activity._step.call(this, callContext);
      }
      return ;
    }
  }
  callContext.complete();
};
Switch.prototype._expressionGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    this.set("expression", result);
    callContext.activity._step.call(this, callContext);
  } else {
    callContext.end(reason, result);
  }
};
Switch.prototype._step = function(callContext) {
  var parts = this.get("_parts");
  var doCase = this.get("_doCase");
  if (doCase && parts.cases.length) {
    var next = parts.cases[0];
    parts.cases.splice(0, 1);
    callContext.schedule(next, "_partCompleted");
  } else if (!doCase && parts.whens.length) {
    var next$__7 = parts.whens[0];
    parts.whens.splice(0, 1);
    callContext.schedule(next$__7, "_partCompleted");
  } else if (parts.default) {
    callContext.schedule(parts.default, "_partCompleted");
  } else {
    callContext.complete();
  }
};
Switch.prototype._partCompleted = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    if (result === guids.markers.nope) {
      callContext.activity._step.call(this, callContext);
    } else {
      callContext.complete(result);
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Switch;
//# sourceMappingURL=data:application/json;base64,
