"use strict";
"use strict";
var Activity = require("./activity");
var util = require("util");
var guids = require("../common/guids");
var Declarator = require("./declarator");
var is = require("../common/is");
var _ = require("lodash");
var activityMarkup = require("./activityMarkup");
function Composite() {
  Declarator.call(this);
  this[guids.types.composite] = true;
  this.reservedProperties.add("_implementation");
  this.nonSerializedProperties.add("_implementation");
  this.nonScopedProperties.add("createImplementation");
  this.nonScopedProperties.add("ensureImplementationCreated");
  this.nonScopedProperties.add(guids.types.composite);
  this.nonScopedProperties.add("implementationCompleted");
}
util.inherits(Composite, Declarator);
Composite.prototype.forEachImmediateChild = function(f) {
  this.ensureImplementationCreated();
  Declarator.prototype.forEachImmediateChild.call(this, f);
};
Composite.prototype._doForEach = function(f, visited, except) {
  this.ensureImplementationCreated();
  Declarator.prototype._doForEach.call(this, f, visited, except);
};
Composite.prototype.createImplementation = function() {
  throw new Error("Method 'createImplementation' not implemented.");
};
Composite.prototype.ensureImplementationCreated = function() {
  if (is.undefined(this._implementation)) {
    this._implementation = this.createImplementation();
    if (_.isPlainObject(this._implementation)) {
      this._implementation = activityMarkup.parse(this._implementation);
    }
    if (!(this._implementation instanceof Activity)) {
      throw new Error("Method 'createImplementation' must return an activity.");
    }
  }
};
Composite.prototype.initializeStructure = function() {
  this.ensureImplementationCreated();
};
Composite.prototype.run = function(callContext, args) {
  if (!(this.get("_implementation") instanceof Activity)) {
    throw new Error("Composite activity's implementation is not available.");
  }
  Declarator.prototype.run.call(this, callContext, args);
};
Composite.prototype.varsDeclared = function(callContext, args) {
  callContext.schedule(this.get("_implementation"), "_implInvoked");
};
Composite.prototype._implInvoked = function(callContext, reason, result) {
  callContext.activity.implementationCompleted.call(this, callContext, reason, result);
};
Composite.prototype.implementationCompleted = function(callContext, reason, result) {
  callContext.end(reason, result);
};
module.exports = Composite;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvc2l0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLFdBQVcsQ0FBQztBQUVaLEFBQUksRUFBQSxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFlBQVcsQ0FBQyxDQUFDO0FBQ3BDLEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDdEMsQUFBSSxFQUFBLENBQUEsVUFBUyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUM7QUFDeEMsQUFBSSxFQUFBLENBQUEsRUFBQyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUM7QUFDaEMsQUFBSSxFQUFBLENBQUEsQ0FBQSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDekIsQUFBSSxFQUFBLENBQUEsY0FBYSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsa0JBQWlCLENBQUMsQ0FBQztBQUVoRCxPQUFTLFVBQVEsQ0FBRSxBQUFELENBQUc7QUFDakIsV0FBUyxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUNyQixLQUFHLENBQUUsS0FBSSxNQUFNLFVBQVUsQ0FBQyxFQUFJLEtBQUcsQ0FBQztBQUVsQyxLQUFHLG1CQUFtQixJQUFJLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDO0FBQzlDLEtBQUcsd0JBQXdCLElBQUksQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDbkQsS0FBRyxvQkFBb0IsSUFBSSxBQUFDLENBQUMsc0JBQXFCLENBQUMsQ0FBQztBQUNwRCxLQUFHLG9CQUFvQixJQUFJLEFBQUMsQ0FBQyw2QkFBNEIsQ0FBQyxDQUFDO0FBQzNELEtBQUcsb0JBQW9CLElBQUksQUFBQyxDQUFDLEtBQUksTUFBTSxVQUFVLENBQUMsQ0FBQztBQUNuRCxLQUFHLG9CQUFvQixJQUFJLEFBQUMsQ0FBQyx5QkFBd0IsQ0FBQyxDQUFDO0FBQzNEO0FBQUEsQUFFQSxHQUFHLFNBQVMsQUFBQyxDQUFDLFNBQVEsQ0FBRyxXQUFTLENBQUMsQ0FBQztBQUVwQyxRQUFRLFVBQVUsc0JBQXNCLEVBQUksVUFBVSxDQUFBLENBQUc7QUFDckQsS0FBRyw0QkFBNEIsQUFBQyxFQUFDLENBQUM7QUFDbEMsV0FBUyxVQUFVLHNCQUFzQixLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUcsRUFBQSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELFFBQVEsVUFBVSxXQUFXLEVBQUksVUFBVSxDQUFBLENBQUcsQ0FBQSxPQUFNLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDM0QsS0FBRyw0QkFBNEIsQUFBQyxFQUFDLENBQUM7QUFDbEMsV0FBUyxVQUFVLFdBQVcsS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFHLEVBQUEsQ0FBRyxRQUFNLENBQUcsT0FBSyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUVELFFBQVEsVUFBVSxxQkFBcUIsRUFBSSxVQUFVLEFBQUQsQ0FBRztBQUNuRCxNQUFNLElBQUksTUFBSSxBQUFDLENBQUMsZ0RBQStDLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsUUFBUSxVQUFVLDRCQUE0QixFQUFJLFVBQVUsQUFBRCxDQUFHO0FBQzFELEtBQUksRUFBQyxVQUFVLEFBQUMsQ0FBQyxJQUFHLGdCQUFnQixDQUFDLENBQUc7QUFDcEMsT0FBRyxnQkFBZ0IsRUFBSSxDQUFBLElBQUcscUJBQXFCLEFBQUMsRUFBQyxDQUFDO0FBQ2xELE9BQUksQ0FBQSxjQUFjLEFBQUMsQ0FBQyxJQUFHLGdCQUFnQixDQUFDLENBQUc7QUFDdkMsU0FBRyxnQkFBZ0IsRUFBSSxDQUFBLGNBQWEsTUFBTSxBQUFDLENBQUMsSUFBRyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3JFO0FBQUEsQUFDQSxPQUFJLENBQUMsQ0FBQyxJQUFHLGdCQUFnQixXQUFhLFNBQU8sQ0FBQyxDQUFHO0FBQzdDLFVBQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyx3REFBdUQsQ0FBQyxDQUFDO0lBQzdFO0FBQUEsRUFDSjtBQUFBLEFBQ0osQ0FBQztBQUVELFFBQVEsVUFBVSxvQkFBb0IsRUFBSSxVQUFVLEFBQUQsQ0FBRztBQUNsRCxLQUFHLDRCQUE0QixBQUFDLEVBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQsUUFBUSxVQUFVLElBQUksRUFBSSxVQUFVLFdBQVUsQ0FBRyxDQUFBLElBQUcsQ0FBRztBQUNuRCxLQUFJLENBQUMsQ0FBQyxJQUFHLElBQUksQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUEsVUFBYSxTQUFPLENBQUMsQ0FBRztBQUNwRCxRQUFNLElBQUksTUFBSSxBQUFDLENBQUMsdURBQXNELENBQUMsQ0FBQztFQUM1RTtBQUFBLEFBQ0EsV0FBUyxVQUFVLElBQUksS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFHLFlBQVUsQ0FBRyxLQUFHLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQsUUFBUSxVQUFVLGFBQWEsRUFBSSxVQUFVLFdBQVUsQ0FBRyxDQUFBLElBQUcsQ0FBRztBQUM1RCxZQUFVLFNBQVMsQUFBQyxDQUFDLElBQUcsSUFBSSxBQUFDLENBQUMsaUJBQWdCLENBQUMsQ0FBRyxlQUFhLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsUUFBUSxVQUFVLGFBQWEsRUFBSSxVQUFVLFdBQVUsQ0FBRyxDQUFBLE1BQUssQ0FBRyxDQUFBLE1BQUssQ0FBRztBQUN0RSxZQUFVLFNBQVMsd0JBQXdCLEtBQUssQUFBQyxDQUFDLElBQUcsQ0FBRyxZQUFVLENBQUcsT0FBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxRQUFRLFVBQVUsd0JBQXdCLEVBQUksVUFBVSxXQUFVLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDakYsWUFBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsT0FBSyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUVELEtBQUssUUFBUSxFQUFJLFVBQVEsQ0FBQztBQUFBIiwiZmlsZSI6ImFjdGl2aXRpZXMvY29tcG9zaXRlLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IEFjdGl2aXR5ID0gcmVxdWlyZShcIi4vYWN0aXZpdHlcIik7XG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IGd1aWRzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9ndWlkc1wiKTtcbmxldCBEZWNsYXJhdG9yID0gcmVxdWlyZShcIi4vZGVjbGFyYXRvclwiKTtcbmxldCBpcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vaXNcIik7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5sZXQgYWN0aXZpdHlNYXJrdXAgPSByZXF1aXJlKFwiLi9hY3Rpdml0eU1hcmt1cFwiKTtcblxuZnVuY3Rpb24gQ29tcG9zaXRlKCkge1xuICAgIERlY2xhcmF0b3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzW2d1aWRzLnR5cGVzLmNvbXBvc2l0ZV0gPSB0cnVlO1xuXG4gICAgdGhpcy5yZXNlcnZlZFByb3BlcnRpZXMuYWRkKFwiX2ltcGxlbWVudGF0aW9uXCIpO1xuICAgIHRoaXMubm9uU2VyaWFsaXplZFByb3BlcnRpZXMuYWRkKFwiX2ltcGxlbWVudGF0aW9uXCIpO1xuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJjcmVhdGVJbXBsZW1lbnRhdGlvblwiKTtcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwiZW5zdXJlSW1wbGVtZW50YXRpb25DcmVhdGVkXCIpO1xuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoZ3VpZHMudHlwZXMuY29tcG9zaXRlKTtcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwiaW1wbGVtZW50YXRpb25Db21wbGV0ZWRcIik7XG59XG5cbnV0aWwuaW5oZXJpdHMoQ29tcG9zaXRlLCBEZWNsYXJhdG9yKTtcblxuQ29tcG9zaXRlLnByb3RvdHlwZS5mb3JFYWNoSW1tZWRpYXRlQ2hpbGQgPSBmdW5jdGlvbiAoZikge1xuICAgIHRoaXMuZW5zdXJlSW1wbGVtZW50YXRpb25DcmVhdGVkKCk7XG4gICAgRGVjbGFyYXRvci5wcm90b3R5cGUuZm9yRWFjaEltbWVkaWF0ZUNoaWxkLmNhbGwodGhpcywgZik7XG59O1xuXG5Db21wb3NpdGUucHJvdG90eXBlLl9kb0ZvckVhY2ggPSBmdW5jdGlvbiAoZiwgdmlzaXRlZCwgZXhjZXB0KSB7XG4gICAgdGhpcy5lbnN1cmVJbXBsZW1lbnRhdGlvbkNyZWF0ZWQoKTtcbiAgICBEZWNsYXJhdG9yLnByb3RvdHlwZS5fZG9Gb3JFYWNoLmNhbGwodGhpcywgZiwgdmlzaXRlZCwgZXhjZXB0KTtcbn07XG5cbkNvbXBvc2l0ZS5wcm90b3R5cGUuY3JlYXRlSW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kICdjcmVhdGVJbXBsZW1lbnRhdGlvbicgbm90IGltcGxlbWVudGVkLlwiKTtcbn07XG5cbkNvbXBvc2l0ZS5wcm90b3R5cGUuZW5zdXJlSW1wbGVtZW50YXRpb25DcmVhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChpcy51bmRlZmluZWQodGhpcy5faW1wbGVtZW50YXRpb24pKSB7XG4gICAgICAgIHRoaXMuX2ltcGxlbWVudGF0aW9uID0gdGhpcy5jcmVhdGVJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHRoaXMuX2ltcGxlbWVudGF0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5faW1wbGVtZW50YXRpb24gPSBhY3Rpdml0eU1hcmt1cC5wYXJzZSh0aGlzLl9pbXBsZW1lbnRhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodGhpcy5faW1wbGVtZW50YXRpb24gaW5zdGFuY2VvZiBBY3Rpdml0eSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCAnY3JlYXRlSW1wbGVtZW50YXRpb24nIG11c3QgcmV0dXJuIGFuIGFjdGl2aXR5LlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkNvbXBvc2l0ZS5wcm90b3R5cGUuaW5pdGlhbGl6ZVN0cnVjdHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuc3VyZUltcGxlbWVudGF0aW9uQ3JlYXRlZCgpO1xufTtcblxuQ29tcG9zaXRlLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoISh0aGlzLmdldChcIl9pbXBsZW1lbnRhdGlvblwiKSBpbnN0YW5jZW9mIEFjdGl2aXR5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb3NpdGUgYWN0aXZpdHkncyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICB9XG4gICAgRGVjbGFyYXRvci5wcm90b3R5cGUucnVuLmNhbGwodGhpcywgY2FsbENvbnRleHQsIGFyZ3MpO1xufTtcblxuQ29tcG9zaXRlLnByb3RvdHlwZS52YXJzRGVjbGFyZWQgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIGFyZ3MpIHtcbiAgICBjYWxsQ29udGV4dC5zY2hlZHVsZSh0aGlzLmdldChcIl9pbXBsZW1lbnRhdGlvblwiKSwgXCJfaW1wbEludm9rZWRcIik7XG59O1xuXG5Db21wb3NpdGUucHJvdG90eXBlLl9pbXBsSW52b2tlZCA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcbiAgICBjYWxsQ29udGV4dC5hY3Rpdml0eS5pbXBsZW1lbnRhdGlvbkNvbXBsZXRlZC5jYWxsKHRoaXMsIGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCk7XG59O1xuXG5Db21wb3NpdGUucHJvdG90eXBlLmltcGxlbWVudGF0aW9uQ29tcGxldGVkID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xuICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvc2l0ZTsiXX0=
