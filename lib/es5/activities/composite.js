"use strict";
var Activity = require("./activity");
var util = require("util");
var guids = require("../common/guids");
var Declarator = require("./declarator");
var is = require("../common/is");
var _ = require("lodash");
var activityMarkup = require("./activityMarkup");
function Composite() {
  Declarator.call(this);
  this[guids.types.composite] = true;
  this.reservedProperties.add("_implementation");
  this.nonSerializedProperties.add("_implementation");
  this.nonScopedProperties.add("createImplementation");
  this.nonScopedProperties.add("ensureImplementationCreated");
  this.nonScopedProperties.add(guids.types.composite);
}
util.inherits(Composite, Declarator);
Composite.prototype.forEachImmediateChild = function(f) {
  this.ensureImplementationCreated();
  Declarator.prototype.forEachImmediateChild.call(this, f);
};
Composite.prototype._forEach = function(f, visited, except) {
  this.ensureImplementationCreated();
  Declarator.prototype._forEach.call(this, f, visited, except);
};
Composite.prototype.createImplementation = function() {
  throw new Error("Method 'createImplementation' not implemented.");
};
Composite.prototype.ensureImplementationCreated = function() {
  if (is.undefined(this._implementation)) {
    this._implementation = this.createImplementation();
    if (_.isPlainObject(this._implementation))
      this._implementation = activityMarkup.parse(this._implementation);
    if (!(this._implementation instanceof Activity))
      throw new Error("Method 'createImplementation' must return an activity.");
  }
};
Composite.prototype.run = function(callContext, args) {
  if (!(this.get("_implementation") instanceof Activity))
    throw new Error("Composite activity's implementation is not available.");
  Declarator.prototype.run.call(this, callContext, args);
};
Composite.prototype.varsDeclared = function(callContext, args) {
  callContext.schedule(this.get("_implementation"), "_implInvoked");
};
Composite.prototype._implInvoked = function(callContext, reason, result) {
  callContext.end(reason, result);
};
module.exports = Composite;
//# sourceMappingURL=data:application/json;base64,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QUFBLEFBQ0osQ0FBQTtBQUVBLFFBQVEsVUFBVSxJQUFJLEVBQUksVUFBVSxXQUFVLENBQUcsQ0FBQSxJQUFHLENBQUc7QUFDbkQsS0FBSSxDQUFDLENBQUMsSUFBRyxJQUFJLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFBLFVBQWEsU0FBTyxDQUFDO0FBQUcsUUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLHVEQUFzRCxDQUFDLENBQUM7QUFBQSxBQUNoSSxXQUFTLFVBQVUsSUFBSSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUcsWUFBVSxDQUFHLEtBQUcsQ0FBQyxDQUFDO0FBQzFELENBQUE7QUFFQSxRQUFRLFVBQVUsYUFBYSxFQUFJLFVBQVUsV0FBVSxDQUFHLENBQUEsSUFBRyxDQUFHO0FBQzVELFlBQVUsU0FBUyxBQUFDLENBQUMsSUFBRyxJQUFJLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFHLGVBQWEsQ0FBQyxDQUFDO0FBQ3JFLENBQUE7QUFFQSxRQUFRLFVBQVUsYUFBYSxFQUFJLFVBQVUsV0FBVSxDQUFHLENBQUEsTUFBSyxDQUFHLENBQUEsTUFBSyxDQUFHO0FBQ3RFLFlBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQ25DLENBQUE7QUFFQSxLQUFLLFFBQVEsRUFBSSxVQUFRLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL2NvbXBvc2l0ZS5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsidmFyIEFjdGl2aXR5ID0gcmVxdWlyZShcIi4vYWN0aXZpdHlcIik7XHJcbnZhciB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XHJcbnZhciBndWlkcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vZ3VpZHNcIik7XHJcbnZhciBEZWNsYXJhdG9yID0gcmVxdWlyZShcIi4vZGVjbGFyYXRvclwiKTtcclxudmFyIGlzID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pc1wiKTtcclxudmFyIF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG52YXIgYWN0aXZpdHlNYXJrdXAgPSByZXF1aXJlKFwiLi9hY3Rpdml0eU1hcmt1cFwiKTtcclxuXHJcbmZ1bmN0aW9uIENvbXBvc2l0ZSgpIHtcclxuICAgIERlY2xhcmF0b3IuY2FsbCh0aGlzKTtcclxuICAgIHRoaXNbZ3VpZHMudHlwZXMuY29tcG9zaXRlXSA9IHRydWU7XHJcbiAgICB0aGlzLnJlc2VydmVkUHJvcGVydGllcy5hZGQoXCJfaW1wbGVtZW50YXRpb25cIik7XHJcbiAgICB0aGlzLm5vblNlcmlhbGl6ZWRQcm9wZXJ0aWVzLmFkZChcIl9pbXBsZW1lbnRhdGlvblwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJjcmVhdGVJbXBsZW1lbnRhdGlvblwiKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJlbnN1cmVJbXBsZW1lbnRhdGlvbkNyZWF0ZWRcIik7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKGd1aWRzLnR5cGVzLmNvbXBvc2l0ZSk7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoQ29tcG9zaXRlLCBEZWNsYXJhdG9yKTtcclxuXHJcbkNvbXBvc2l0ZS5wcm90b3R5cGUuZm9yRWFjaEltbWVkaWF0ZUNoaWxkID0gZnVuY3Rpb24gKGYpIHtcclxuICAgIHRoaXMuZW5zdXJlSW1wbGVtZW50YXRpb25DcmVhdGVkKCk7XHJcbiAgICBEZWNsYXJhdG9yLnByb3RvdHlwZS5mb3JFYWNoSW1tZWRpYXRlQ2hpbGQuY2FsbCh0aGlzLCBmKTtcclxufVxyXG5cclxuQ29tcG9zaXRlLnByb3RvdHlwZS5fZm9yRWFjaCA9IGZ1bmN0aW9uIChmLCB2aXNpdGVkLCBleGNlcHQpIHtcclxuICAgIHRoaXMuZW5zdXJlSW1wbGVtZW50YXRpb25DcmVhdGVkKCk7XHJcbiAgICBEZWNsYXJhdG9yLnByb3RvdHlwZS5fZm9yRWFjaC5jYWxsKHRoaXMsIGYsIHZpc2l0ZWQsIGV4Y2VwdCk7XHJcbn1cclxuXHJcbkNvbXBvc2l0ZS5wcm90b3R5cGUuY3JlYXRlSW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2QgJ2NyZWF0ZUltcGxlbWVudGF0aW9uJyBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG59XHJcblxyXG5Db21wb3NpdGUucHJvdG90eXBlLmVuc3VyZUltcGxlbWVudGF0aW9uQ3JlYXRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChpcy51bmRlZmluZWQodGhpcy5faW1wbGVtZW50YXRpb24pKSB7XHJcbiAgICAgICAgdGhpcy5faW1wbGVtZW50YXRpb24gPSB0aGlzLmNyZWF0ZUltcGxlbWVudGF0aW9uKCk7XHJcbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdCh0aGlzLl9pbXBsZW1lbnRhdGlvbikpIHRoaXMuX2ltcGxlbWVudGF0aW9uID0gYWN0aXZpdHlNYXJrdXAucGFyc2UodGhpcy5faW1wbGVtZW50YXRpb24pO1xyXG4gICAgICAgIGlmICghKHRoaXMuX2ltcGxlbWVudGF0aW9uIGluc3RhbmNlb2YgQWN0aXZpdHkpKSB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2QgJ2NyZWF0ZUltcGxlbWVudGF0aW9uJyBtdXN0IHJldHVybiBhbiBhY3Rpdml0eS5cIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbkNvbXBvc2l0ZS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCBhcmdzKSB7XHJcbiAgICBpZiAoISh0aGlzLmdldChcIl9pbXBsZW1lbnRhdGlvblwiKSBpbnN0YW5jZW9mIEFjdGl2aXR5KSkgdGhyb3cgbmV3IEVycm9yKFwiQ29tcG9zaXRlIGFjdGl2aXR5J3MgaW1wbGVtZW50YXRpb24gaXMgbm90IGF2YWlsYWJsZS5cIik7XHJcbiAgICBEZWNsYXJhdG9yLnByb3RvdHlwZS5ydW4uY2FsbCh0aGlzLCBjYWxsQ29udGV4dCwgYXJncyk7XHJcbn1cclxuXHJcbkNvbXBvc2l0ZS5wcm90b3R5cGUudmFyc0RlY2xhcmVkID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCBhcmdzKSB7XHJcbiAgICBjYWxsQ29udGV4dC5zY2hlZHVsZSh0aGlzLmdldChcIl9pbXBsZW1lbnRhdGlvblwiKSwgXCJfaW1wbEludm9rZWRcIik7XHJcbn1cclxuXHJcbkNvbXBvc2l0ZS5wcm90b3R5cGUuX2ltcGxJbnZva2VkID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDb21wb3NpdGU7Il19
