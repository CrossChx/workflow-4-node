"use strict";
var Activity = require("./activity");
var util = require("util");
var guids = require("../common/guids");
var Declarator = require("./declarator");
var is = require("../common/is");
var _ = require("lodash");
var activityMarkup = require("./activityMarkup");
var assert = require("assert");
function Composite() {
  Declarator.call(this);
  this.reservedProperties.add("_implementation");
  this.nonSerializedProperties.add("_implementation");
  this.nonScopedProperties.add("createImplementation");
  this.nonScopedProperties.add("ensureImplementationCreated");
  this.nonScopedProperties.add("implementationCompleted");
}
util.inherits(Composite, Declarator);
Composite.prototype.createImplementation = function(execContext) {
  throw new Error("Method 'createImplementation' not implemented.");
};
Composite.prototype.ensureImplementationCreated = function(execContext) {
  assert(!!execContext);
  if (_.isUndefined(this._implementation)) {
    this._implementation = this.createImplementation(execContext);
    if (_.isPlainObject(this._implementation)) {
      this._implementation = activityMarkup.parse(this._implementation);
    }
    if (!(this._implementation instanceof Activity)) {
      throw new Error("Method 'createImplementation' must return an activity.");
    }
  }
};
Composite.prototype.initializeStructure = function(execContext) {
  assert(!!execContext);
  this.ensureImplementationCreated(execContext);
};
Composite.prototype.run = function(callContext, args) {
  if (!(this._implementation instanceof Activity)) {
    throw new Error("Composite activity's implementation is not available.");
  }
  Declarator.prototype.run.call(this, callContext, args);
};
Composite.prototype.varsDeclared = function(callContext, args) {
  callContext.schedule(this._implementation, "_implInvoked");
};
Composite.prototype._implInvoked = function(callContext, reason, result) {
  callContext.activity.implementationCompleted.call(this, callContext, reason, result);
};
Composite.prototype.implementationCompleted = function(callContext, reason, result) {
  callContext.end(reason, result);
};
module.exports = Composite;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvc2l0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLEFBQUksRUFBQSxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFlBQVcsQ0FBQyxDQUFDO0FBQ3BDLEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDdEMsQUFBSSxFQUFBLENBQUEsVUFBUyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUM7QUFDeEMsQUFBSSxFQUFBLENBQUEsRUFBQyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUM7QUFDaEMsQUFBSSxFQUFBLENBQUEsQ0FBQSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDekIsQUFBSSxFQUFBLENBQUEsY0FBYSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsa0JBQWlCLENBQUMsQ0FBQztBQUNoRCxBQUFJLEVBQUEsQ0FBQSxNQUFLLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUU5QixPQUFTLFVBQVEsQ0FBRSxBQUFELENBQUc7QUFDakIsV0FBUyxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUVyQixLQUFHLG1CQUFtQixJQUFJLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDO0FBQzlDLEtBQUcsd0JBQXdCLElBQUksQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFDbkQsS0FBRyxvQkFBb0IsSUFBSSxBQUFDLENBQUMsc0JBQXFCLENBQUMsQ0FBQztBQUNwRCxLQUFHLG9CQUFvQixJQUFJLEFBQUMsQ0FBQyw2QkFBNEIsQ0FBQyxDQUFDO0FBQzNELEtBQUcsb0JBQW9CLElBQUksQUFBQyxDQUFDLHlCQUF3QixDQUFDLENBQUM7QUFDM0Q7QUFBQSxBQUVBLEdBQUcsU0FBUyxBQUFDLENBQUMsU0FBUSxDQUFHLFdBQVMsQ0FBQyxDQUFDO0FBRXBDLFFBQVEsVUFBVSxxQkFBcUIsRUFBSSxVQUFVLFdBQVUsQ0FBRztBQUM5RCxNQUFNLElBQUksTUFBSSxBQUFDLENBQUMsZ0RBQStDLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsUUFBUSxVQUFVLDRCQUE0QixFQUFJLFVBQVUsV0FBVSxDQUFHO0FBQ3JFLE9BQUssQUFBQyxDQUFDLENBQUMsQ0FBQyxXQUFVLENBQUMsQ0FBQztBQUNyQixLQUFJLENBQUEsWUFBWSxBQUFDLENBQUMsSUFBRyxnQkFBZ0IsQ0FBQyxDQUFHO0FBQ3JDLE9BQUcsZ0JBQWdCLEVBQUksQ0FBQSxJQUFHLHFCQUFxQixBQUFDLENBQUMsV0FBVSxDQUFDLENBQUM7QUFDN0QsT0FBSSxDQUFBLGNBQWMsQUFBQyxDQUFDLElBQUcsZ0JBQWdCLENBQUMsQ0FBRztBQUN2QyxTQUFHLGdCQUFnQixFQUFJLENBQUEsY0FBYSxNQUFNLEFBQUMsQ0FBQyxJQUFHLGdCQUFnQixDQUFDLENBQUM7SUFDckU7QUFBQSxBQUNBLE9BQUksQ0FBQyxDQUFDLElBQUcsZ0JBQWdCLFdBQWEsU0FBTyxDQUFDLENBQUc7QUFDN0MsVUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLHdEQUF1RCxDQUFDLENBQUM7SUFDN0U7QUFBQSxFQUNKO0FBQUEsQUFDSixDQUFDO0FBRUQsUUFBUSxVQUFVLG9CQUFvQixFQUFJLFVBQVUsV0FBVSxDQUFHO0FBQzdELE9BQUssQUFBQyxDQUFDLENBQUMsQ0FBQyxXQUFVLENBQUMsQ0FBQztBQUNyQixLQUFHLDRCQUE0QixBQUFDLENBQUMsV0FBVSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVELFFBQVEsVUFBVSxJQUFJLEVBQUksVUFBVSxXQUFVLENBQUcsQ0FBQSxJQUFHLENBQUc7QUFDbkQsS0FBSSxDQUFDLENBQUMsSUFBRyxnQkFBZ0IsV0FBYSxTQUFPLENBQUMsQ0FBRztBQUM3QyxRQUFNLElBQUksTUFBSSxBQUFDLENBQUMsdURBQXNELENBQUMsQ0FBQztFQUM1RTtBQUFBLEFBQ0EsV0FBUyxVQUFVLElBQUksS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFHLFlBQVUsQ0FBRyxLQUFHLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQsUUFBUSxVQUFVLGFBQWEsRUFBSSxVQUFVLFdBQVUsQ0FBRyxDQUFBLElBQUcsQ0FBRztBQUM1RCxZQUFVLFNBQVMsQUFBQyxDQUFDLElBQUcsZ0JBQWdCLENBQUcsZUFBYSxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQUVELFFBQVEsVUFBVSxhQUFhLEVBQUksVUFBVSxXQUFVLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDdEUsWUFBVSxTQUFTLHdCQUF3QixLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUcsWUFBVSxDQUFHLE9BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztBQUN4RixDQUFDO0FBRUQsUUFBUSxVQUFVLHdCQUF3QixFQUFJLFVBQVUsV0FBVSxDQUFHLENBQUEsTUFBSyxDQUFHLENBQUEsTUFBSyxDQUFHO0FBQ2pGLFlBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCxLQUFLLFFBQVEsRUFBSSxVQUFRLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL2NvbXBvc2l0ZS5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBBY3Rpdml0eSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5XCIpO1xubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBndWlkcyA9IHJlcXVpcmUoXCIuLi9jb21tb24vZ3VpZHNcIik7XG5sZXQgRGVjbGFyYXRvciA9IHJlcXVpcmUoXCIuL2RlY2xhcmF0b3JcIik7XG5sZXQgaXMgPSByZXF1aXJlKFwiLi4vY29tbW9uL2lzXCIpO1xubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xubGV0IGFjdGl2aXR5TWFya3VwID0gcmVxdWlyZShcIi4vYWN0aXZpdHlNYXJrdXBcIik7XG5sZXQgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcblxuZnVuY3Rpb24gQ29tcG9zaXRlKCkge1xuICAgIERlY2xhcmF0b3IuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMucmVzZXJ2ZWRQcm9wZXJ0aWVzLmFkZChcIl9pbXBsZW1lbnRhdGlvblwiKTtcbiAgICB0aGlzLm5vblNlcmlhbGl6ZWRQcm9wZXJ0aWVzLmFkZChcIl9pbXBsZW1lbnRhdGlvblwiKTtcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwiY3JlYXRlSW1wbGVtZW50YXRpb25cIik7XG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZChcImVuc3VyZUltcGxlbWVudGF0aW9uQ3JlYXRlZFwiKTtcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwiaW1wbGVtZW50YXRpb25Db21wbGV0ZWRcIik7XG59XG5cbnV0aWwuaW5oZXJpdHMoQ29tcG9zaXRlLCBEZWNsYXJhdG9yKTtcblxuQ29tcG9zaXRlLnByb3RvdHlwZS5jcmVhdGVJbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uIChleGVjQ29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCAnY3JlYXRlSW1wbGVtZW50YXRpb24nIG5vdCBpbXBsZW1lbnRlZC5cIik7XG59O1xuXG5Db21wb3NpdGUucHJvdG90eXBlLmVuc3VyZUltcGxlbWVudGF0aW9uQ3JlYXRlZCA9IGZ1bmN0aW9uIChleGVjQ29udGV4dCkge1xuICAgIGFzc2VydCghIWV4ZWNDb250ZXh0KTtcbiAgICBpZiAoXy5pc1VuZGVmaW5lZCh0aGlzLl9pbXBsZW1lbnRhdGlvbikpIHtcbiAgICAgICAgdGhpcy5faW1wbGVtZW50YXRpb24gPSB0aGlzLmNyZWF0ZUltcGxlbWVudGF0aW9uKGV4ZWNDb250ZXh0KTtcbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdCh0aGlzLl9pbXBsZW1lbnRhdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX2ltcGxlbWVudGF0aW9uID0gYWN0aXZpdHlNYXJrdXAucGFyc2UodGhpcy5faW1wbGVtZW50YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHRoaXMuX2ltcGxlbWVudGF0aW9uIGluc3RhbmNlb2YgQWN0aXZpdHkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2QgJ2NyZWF0ZUltcGxlbWVudGF0aW9uJyBtdXN0IHJldHVybiBhbiBhY3Rpdml0eS5cIik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Db21wb3NpdGUucHJvdG90eXBlLmluaXRpYWxpemVTdHJ1Y3R1cmUgPSBmdW5jdGlvbiAoZXhlY0NvbnRleHQpIHtcbiAgICBhc3NlcnQoISFleGVjQ29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVJbXBsZW1lbnRhdGlvbkNyZWF0ZWQoZXhlY0NvbnRleHQpO1xufTtcblxuQ29tcG9zaXRlLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoISh0aGlzLl9pbXBsZW1lbnRhdGlvbiBpbnN0YW5jZW9mIEFjdGl2aXR5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb3NpdGUgYWN0aXZpdHkncyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICB9XG4gICAgRGVjbGFyYXRvci5wcm90b3R5cGUucnVuLmNhbGwodGhpcywgY2FsbENvbnRleHQsIGFyZ3MpO1xufTtcblxuQ29tcG9zaXRlLnByb3RvdHlwZS52YXJzRGVjbGFyZWQgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIGFyZ3MpIHtcbiAgICBjYWxsQ29udGV4dC5zY2hlZHVsZSh0aGlzLl9pbXBsZW1lbnRhdGlvbiwgXCJfaW1wbEludm9rZWRcIik7XG59O1xuXG5Db21wb3NpdGUucHJvdG90eXBlLl9pbXBsSW52b2tlZCA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcbiAgICBjYWxsQ29udGV4dC5hY3Rpdml0eS5pbXBsZW1lbnRhdGlvbkNvbXBsZXRlZC5jYWxsKHRoaXMsIGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCk7XG59O1xuXG5Db21wb3NpdGUucHJvdG90eXBlLmltcGxlbWVudGF0aW9uQ29tcGxldGVkID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xuICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvc2l0ZTsiXX0=
