{"version":3,"sources":["activities/activityMarkup.js"],"names":[],"mappings":"AAAA;;;;AAAY,CAAC;AAIb,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACnC,IAAI,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC;AACvD,IAAI,uBAAuB,GAAG,OAAO,CAAC,UAAU,CAAC,uBAAuB,CAAC;AACzE,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC;;AAE/C,QAAQ,CAAC,gBAAgB,EAAE,YAAY;AACnC,MAAE,CAAC,8CAA8C,EAAE,UAAU,IAAI,EAAE;AAC/D,YAAI,QAAQ,GAAG,cAAc,CAAC,KAAK,CAAC;AAChC,oBAAQ,EAAE;AACN,0BAAU,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,yBAAyB,CAAC;AAC3D,iBAAC,EAAE,EAAE;AACL,iBAAC,EAAE,EAAE;AACL,iBAAC,EAAE,EAAE;AACL,oBAAI,EAAE,CACF;AACI,4BAAQ,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;iBAC9C,CACJ;aACJ;SACJ,CAAC,CAAC;;AAEH,YAAI,MAAM,GAAG,IAAI,uBAAuB,CAAC,QAAQ,CAAC,CAAC;;AAEnD,cAAM,CAAC,MAAM,EAAE,CACV,IAAI,CACL,UAAU,MAAM,EAAE;AACd,kBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;SACtC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACxB,CAAC,CAAC;;AAEH,MAAE,CAAC,6CAA6C,EAAE,UAAU,IAAI,EAAE;AAC9D,YAAI,QAAQ,GAAG,cAAc,CAAC,KAAK,CAAC;AAChC,sBAAU,EAAE,CAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAE;AAC/D,oBAAQ,EAAE;AACN,iBAAC,EAAE,CAAC;AACJ,iBAAC,EAAE,CAAC;AACJ,iBAAC,EAAE,CAAC;AACJ,oBAAI,EAAE,CACF;AACI,4BAAQ,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;iBACjD,CACJ;aACJ;SACJ,CAAC,CAAC;;AAEH,YAAI,MAAM,GAAG,IAAI,uBAAuB,CAAC,QAAQ,CAAC,CAAC;;AAEnD,cAAM,CAAC,MAAM,EAAE,CACV,IAAI,CACL,UAAU,MAAM,EAAE;AACd,kBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACxB,CAAC,CAAC;CACN,CAAC,CAAC","file":"activities/activityMarkup.js","sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet path = require(\"path\");\nlet assert = require(\"assert\");\nlet Expression = wf4node.activities.Expression;\n\ndescribe(\"activityMarkup\", function () {\n    it(\"should load custom activity type from string\", function (done) {\n        let activity = activityMarkup.parse({\n            \"@block\": {\n                \"@require\": path.join(__dirname, \"/customActivities/adder\"),\n                a: 10,\n                b: 20,\n                c: 30,\n                args: [\n                    {\n                        \"@adder\": [\"=this.a\", \"=this.b\", \"=this.c\"]\n                    }\n                ]\n            }\n        });\n\n        let engine = new ActivityExecutionEngine(activity);\n\n        engine.invoke()\n            .then(\n            function (result) {\n                assert.equal(result, 10 + 20 + 30);\n            }).nodeify(done);\n    });\n\n    it(\"should load custom activity type from array\", function (done) {\n        let activity = activityMarkup.parse({\n            \"@require\": [ path.join(__dirname, \"/customActivities/adder\") ],\n            \"@block\": {\n                a: 1,\n                b: 2,\n                c: 3,\n                args: [\n                    {\n                        \"@adder\": [\"= this.a\", \"= this.b\", \"= this.c\"]\n                    }\n                ]\n            }\n        });\n\n        let engine = new ActivityExecutionEngine(activity);\n\n        engine.invoke()\n            .then(\n            function (result) {\n                assert.equal(result, 1 + 2 + 3);\n            }).nodeify(done);\n    });\n});"],"sourceRoot":"/source/"}