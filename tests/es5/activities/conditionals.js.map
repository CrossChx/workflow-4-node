{"version":3,"sources":["activities/conditionals.js"],"names":[],"mappings":"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","file":"activities/conditionals.js","sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet Block = wf4node.activities.Block;\nlet _ = require(\"lodash\");\n\ndescribe(\"conditionals\", function () {\n    describe(\"If\", function () {\n        it(\"should call then\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 5,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: \"= this.v == 5\",\n                                then: {\n                                    \"@func\": {\n                                        args: [1],\n                                        code: function (a) {\n                                            return a + this.v;\n                                        }\n                                    }\n                                },\n                                else: {\n                                    \"@func\": {\n                                        args: [2],\n                                        code: function (a) {\n                                            return a + this.v;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 1 + 5);\n                }).nodeify(done);\n        });\n\n        it(\"should call else\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 5,\n                    r: 0,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: {\n                                    \"@func\": {\n                                        code: function () {\n                                            return false;\n                                        }\n                                    }\n                                },\n                                then: {\n                                    \"@func\": {\n                                        args: [1],\n                                        code: function (a) {\n                                            this.r = a + this.v;\n                                        }\n                                    }\n                                },\n                                else: {\n                                    \"@func\": {\n                                        args: [2],\n                                        code: function (a) {\n                                            this.r = a + this.v;\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"= this.r\"\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 2 + 5);\n                }).nodeify(done);\n        });\n\n        it(\"should run blocks\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 5,\n                    s: 1,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: {\n                                    \"@func\": {\n                                        code: function () {\n                                            return false;\n                                        }\n                                    }\n                                },\n                                then: {\n                                    \"@func\": {\n                                        args: [1],\n                                        code: function (a) {\n                                            this.s = a + this.v;\n                                        }\n                                    }\n                                },\n                                else: {\n                                    \"@block\": [\n                                        {\n                                            \"@func\": {\n                                                args: [2],\n                                                code: function (a) {\n                                                    let self = this;\n                                                    return Bluebird.delay(100).then(function () { self.s = 40 + a; });\n                                                }\n                                            }\n                                        },\n                                        function () {\n                                            return this.s;\n                                        }\n                                    ]\n                                }\n                            }\n                        },\n                        \"= this.s\"\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 42);\n                }).nodeify(done);\n        });\n\n        it(\"then should be a block\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 5,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: \"= this.v == 5\",\n                                then: [\n                                    5,\n                                    function () {\n                                        let self = this;\n                                        return Bluebird.delay(100)\n                                            .then(function () {\n                                                self.v = 7;\n                                            });\n                                    },\n                                    \"= this.v \"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(7, result);\n                }).nodeify(done);\n        });\n\n        it(\"else should be a block\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 1,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: \"= this.v == 5\",\n                                then: [1, 2],\n                                else: [\n                                    5, function () { this.v = 7; }, \"= this.v\"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(7, result);\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Switch\", function () {\n        describe(\"switch w/ case\", function () {\n            it(\"should work w/o default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        expression: \"= 42\",\n                        args: [\n                            {\n                                \"@case\": {\n                                    value: 43,\n                                    args: function () {\n                                        return \"55\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@case\": {\n                                    value: 42,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@case\": {\n                                    value: \"42\",\n                                    args: \"= 'boo'\"\n                                }\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, \"hi\");\n                    }).nodeify(done);\n            });\n\n            it(\"should work w default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        expression: \"= 43\",\n                        args: [\n                            {\n                                \"@case\": {\n                                    value: 43,\n                                    args: function () {\n                                        return 55;\n                                    }\n                                }\n                            },\n                            {\n                                \"@case\": {\n                                    value: 42,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@default\": \"= 'boo'\"\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, 55);\n                    }).nodeify(done);\n            });\n\n            it(\"should do its default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        expression: \"= 'klow'\",\n                        args: [\n                            {\n                                \"@case\": {\n                                    value: 43,\n                                    args: function () {\n                                        return 55;\n                                    }\n                                }\n                            },\n                            {\n                                \"@case\": {\n                                    value: 42,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@default\": \"= 'boo'\"\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, \"boo\");\n                    }).nodeify(done);\n            });\n        });\n\n        describe(\"switch w/ when\", function () {\n            it(\"should work w/o default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        args: [\n                            {\n                                \"@when\": {\n                                    condition: 0,\n                                    args: function () {\n                                        return \"55\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@when\": {\n                                    condition: function () {\n                                        return Bluebird.resolve(42);\n                                    },\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@when\": {\n                                    condition: \"42\",\n                                    args: \"= 'boo'\"\n                                }\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, \"hi\");\n                    }).nodeify(done);\n            });\n\n            it(\"should work w default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        args: [\n                            {\n                                \"@when\": {\n                                    condition: 43,\n                                    args: function () {\n                                        return 55;\n                                    }\n                                }\n                            },\n                            {\n                                \"@when\": {\n                                    condition: undefined,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@default\": \"= 'boo'\"\n                            }\n                        ]\n                    }\n                });\n\n                //engine.addTracker(new ConsoleTracker());\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, 55);\n                    }).nodeify(done);\n            });\n\n            it(\"should do its default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        args: [\n                            {\n                                \"@when\": {\n                                    condition: \"\",\n                                    args: function () {\n                                        return 55;\n                                    }\n                                }\n                            },\n                            {\n                                \"@when\": {\n                                    condition: null,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@default\": \"= 'boo'\"\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, \"boo\");\n                    }).nodeify(done);\n            });\n        });\n    });\n});"],"sourceRoot":"/source/"}