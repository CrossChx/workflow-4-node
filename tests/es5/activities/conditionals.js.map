{"version":3,"names":[],"mappings":"","sources":["activities/conditionals.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet Func = wf4node.activities.Func;\r\nlet activityMarkup = wf4node.activities.activityMarkup;\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet assert = require(\"assert\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet Block = wf4node.activities.Block;\r\nlet _ = require(\"lodash\");\r\n\r\ndescribe(\"conditionals\", function () {\r\n    describe(\"If\", function () {\r\n        it(\"should call then\", function (done) {\r\n            let block = activityMarkup.parse({\r\n                \"@block\": {\r\n                    v: 5,\r\n                    args: [\r\n                        {\r\n                            \"@if\": {\r\n                                condition: \"= this.v == 5\",\r\n                                then: {\r\n                                    \"@func\": {\r\n                                        args: [1],\r\n                                        code: function (a) {\r\n                                            return a + this.v;\r\n                                        }\r\n                                    }\r\n                                },\r\n                                else: {\r\n                                    \"@func\": {\r\n                                        args: [2],\r\n                                        code: function (a) {\r\n                                            return a + this.v;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, 1 + 5);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should call else\", function (done) {\r\n            let block = activityMarkup.parse({\r\n                \"@block\": {\r\n                    v: 5,\r\n                    r: 0,\r\n                    args: [\r\n                        {\r\n                            \"@if\": {\r\n                                condition: {\r\n                                    \"@func\": {\r\n                                        code: function () {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                },\r\n                                then: {\r\n                                    \"@func\": {\r\n                                        args: [1],\r\n                                        code: function (a) {\r\n                                            this.r = a + this.v;\r\n                                        }\r\n                                    }\r\n                                },\r\n                                else: {\r\n                                    \"@func\": {\r\n                                        args: [2],\r\n                                        code: function (a) {\r\n                                            this.r = a + this.v;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        \"= this.r\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, 2 + 5);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should run blocks\", function (done) {\r\n            let block = activityMarkup.parse({\r\n                \"@block\": {\r\n                    v: 5,\r\n                    s: 1,\r\n                    args: [\r\n                        {\r\n                            \"@if\": {\r\n                                condition: {\r\n                                    \"@func\": {\r\n                                        code: function () {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                },\r\n                                then: {\r\n                                    \"@func\": {\r\n                                        args: [1],\r\n                                        code: function (a) {\r\n                                            this.s = a + this.v;\r\n                                        }\r\n                                    }\r\n                                },\r\n                                else: {\r\n                                    \"@block\": [\r\n                                        {\r\n                                            \"@func\": {\r\n                                                args: [2],\r\n                                                code: function (a) {\r\n                                                    let self = this;\r\n                                                    return Bluebird.delay(100).then(function () { self.s = 40 + a; });\r\n                                                }\r\n                                            }\r\n                                        },\r\n                                        function () {\r\n                                            return this.s;\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        },\r\n                        \"= this.s\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, 42);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"then should be a block\", function (done) {\r\n            let block = activityMarkup.parse({\r\n                \"@block\": {\r\n                    v: 5,\r\n                    args: [\r\n                        {\r\n                            \"@if\": {\r\n                                condition: \"= this.v == 5\",\r\n                                then: [\r\n                                    5,\r\n                                    function () {\r\n                                        let self = this;\r\n                                        return Bluebird.delay(100)\r\n                                            .then(function () {\r\n                                                self.v = 7;\r\n                                            });\r\n                                    },\r\n                                    \"= this.v \"\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(7, result);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"else should be a block\", function (done) {\r\n            let block = activityMarkup.parse({\r\n                \"@block\": {\r\n                    v: 1,\r\n                    args: [\r\n                        {\r\n                            \"@if\": {\r\n                                condition: \"= this.v == 5\",\r\n                                then: [1, 2],\r\n                                else: [\r\n                                    5, function () { this.v = 7; }, \"= this.v\"\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(7, result);\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"Switch\", function () {\r\n        describe(\"switch w/ case\", function () {\r\n            it(\"should work w/o default\", function (done) {\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@switch\": {\r\n                        expression: \"= 42\",\r\n                        args: [\r\n                            {\r\n                                \"@case\": {\r\n                                    value: 43,\r\n                                    args: function () {\r\n                                        return \"55\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@case\": {\r\n                                    value: 42,\r\n                                    args: function () {\r\n                                        return \"hi\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@case\": {\r\n                                    value: \"42\",\r\n                                    args: \"= 'boo'\"\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                engine.invoke().then(\r\n                    function (result) {\r\n                        assert.deepEqual(result, \"hi\");\r\n                    }).nodeify(done);\r\n            });\r\n\r\n            it(\"should work w default\", function (done) {\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@switch\": {\r\n                        expression: \"= 43\",\r\n                        args: [\r\n                            {\r\n                                \"@case\": {\r\n                                    value: 43,\r\n                                    args: function () {\r\n                                        return 55;\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@case\": {\r\n                                    value: 42,\r\n                                    args: function () {\r\n                                        return \"hi\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@default\": \"= 'boo'\"\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                engine.invoke().then(\r\n                    function (result) {\r\n                        assert.deepEqual(result, 55);\r\n                    }).nodeify(done);\r\n            });\r\n\r\n            it(\"should do its default\", function (done) {\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@switch\": {\r\n                        expression: \"= 'klow'\",\r\n                        args: [\r\n                            {\r\n                                \"@case\": {\r\n                                    value: 43,\r\n                                    args: function () {\r\n                                        return 55;\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@case\": {\r\n                                    value: 42,\r\n                                    args: function () {\r\n                                        return \"hi\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@default\": \"= 'boo'\"\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                engine.invoke().then(\r\n                    function (result) {\r\n                        assert.deepEqual(result, \"boo\");\r\n                    }).nodeify(done);\r\n            });\r\n        });\r\n\r\n        describe(\"switch w/ when\", function () {\r\n            it(\"should work w/o default\", function (done) {\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@switch\": {\r\n                        args: [\r\n                            {\r\n                                \"@when\": {\r\n                                    condition: 0,\r\n                                    args: function () {\r\n                                        return \"55\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@when\": {\r\n                                    condition: function () {\r\n                                        return Bluebird.resolve(42);\r\n                                    },\r\n                                    args: function () {\r\n                                        return \"hi\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@when\": {\r\n                                    condition: \"42\",\r\n                                    args: \"= 'boo'\"\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                engine.invoke().then(\r\n                    function (result) {\r\n                        assert.deepEqual(result, \"hi\");\r\n                    }).nodeify(done);\r\n            });\r\n\r\n            it(\"should work w default\", function (done) {\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@switch\": {\r\n                        args: [\r\n                            {\r\n                                \"@when\": {\r\n                                    condition: 43,\r\n                                    args: function () {\r\n                                        return 55;\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@when\": {\r\n                                    condition: undefined,\r\n                                    args: function () {\r\n                                        return \"hi\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@default\": \"= 'boo'\"\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                //engine.addTracker(new ConsoleTracker());\r\n\r\n                engine.invoke().then(\r\n                    function (result) {\r\n                        assert.deepEqual(result, 55);\r\n                    }).nodeify(done);\r\n            });\r\n\r\n            it(\"should do its default\", function (done) {\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@switch\": {\r\n                        args: [\r\n                            {\r\n                                \"@when\": {\r\n                                    condition: \"\",\r\n                                    args: function () {\r\n                                        return 55;\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@when\": {\r\n                                    condition: null,\r\n                                    args: function () {\r\n                                        return \"hi\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@default\": \"= 'boo'\"\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                engine.invoke().then(\r\n                    function (result) {\r\n                        assert.deepEqual(result, \"boo\");\r\n                    }).nodeify(done);\r\n            });\r\n        });\r\n    });\r\n});"],"file":"activities/conditionals.js","sourceRoot":"/source/"}