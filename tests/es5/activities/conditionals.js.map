{"version":3,"names":[],"mappings":"","sources":["activities/conditionals.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet Block = wf4node.activities.Block;\nlet _ = require(\"lodash\");\n\ndescribe(\"conditionals\", function () {\n    describe(\"If\", function () {\n        it(\"should call then\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 5,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: \"= this.v == 5\",\n                                then: {\n                                    \"@func\": {\n                                        args: [1],\n                                        code: function (a) {\n                                            return a + this.v;\n                                        }\n                                    }\n                                },\n                                else: {\n                                    \"@func\": {\n                                        args: [2],\n                                        code: function (a) {\n                                            return a + this.v;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 1 + 5);\n                }).nodeify(done);\n        });\n\n        it(\"should call else\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 5,\n                    r: 0,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: {\n                                    \"@func\": {\n                                        code: function () {\n                                            return false;\n                                        }\n                                    }\n                                },\n                                then: {\n                                    \"@func\": {\n                                        args: [1],\n                                        code: function (a) {\n                                            this.r = a + this.v;\n                                        }\n                                    }\n                                },\n                                else: {\n                                    \"@func\": {\n                                        args: [2],\n                                        code: function (a) {\n                                            this.r = a + this.v;\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"= this.r\"\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 2 + 5);\n                }).nodeify(done);\n        });\n\n        it(\"should run blocks\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 5,\n                    s: 1,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: {\n                                    \"@func\": {\n                                        code: function () {\n                                            return false;\n                                        }\n                                    }\n                                },\n                                then: {\n                                    \"@func\": {\n                                        args: [1],\n                                        code: function (a) {\n                                            this.s = a + this.v;\n                                        }\n                                    }\n                                },\n                                else: {\n                                    \"@block\": [\n                                        {\n                                            \"@func\": {\n                                                args: [2],\n                                                code: function (a) {\n                                                    let self = this;\n                                                    return Bluebird.delay(100).then(function () { self.s = 40 + a; });\n                                                }\n                                            }\n                                        },\n                                        function () {\n                                            return this.s;\n                                        }\n                                    ]\n                                }\n                            }\n                        },\n                        \"= this.s\"\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 42);\n                }).nodeify(done);\n        });\n\n        it(\"then should be a block\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 5,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: \"= this.v == 5\",\n                                then: [\n                                    5,\n                                    function () {\n                                        let self = this;\n                                        return Bluebird.delay(100)\n                                            .then(function () {\n                                                self.v = 7;\n                                            });\n                                    },\n                                    \"= this.v \"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(7, result);\n                }).nodeify(done);\n        });\n\n        it(\"else should be a block\", function (done) {\n            let block = activityMarkup.parse({\n                \"@block\": {\n                    v: 1,\n                    args: [\n                        {\n                            \"@if\": {\n                                condition: \"= this.v == 5\",\n                                then: [1, 2],\n                                else: [\n                                    5, function () { this.v = 7; }, \"= this.v\"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            });\n\n            let engine = new ActivityExecutionEngine(block);\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(7, result);\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Switch\", function () {\n        describe(\"switch w/ case\", function () {\n            it(\"should work w/o default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        expression: \"= 42\",\n                        args: [\n                            {\n                                \"@case\": {\n                                    value: 43,\n                                    args: function () {\n                                        return \"55\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@case\": {\n                                    value: 42,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@case\": {\n                                    value: \"42\",\n                                    args: \"= 'boo'\"\n                                }\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, \"hi\");\n                    }).nodeify(done);\n            });\n\n            it(\"should work w default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        expression: \"= 43\",\n                        args: [\n                            {\n                                \"@case\": {\n                                    value: 43,\n                                    args: function () {\n                                        return 55;\n                                    }\n                                }\n                            },\n                            {\n                                \"@case\": {\n                                    value: 42,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@default\": \"= 'boo'\"\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, 55);\n                    }).nodeify(done);\n            });\n\n            it(\"should do its default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        expression: \"= 'klow'\",\n                        args: [\n                            {\n                                \"@case\": {\n                                    value: 43,\n                                    args: function () {\n                                        return 55;\n                                    }\n                                }\n                            },\n                            {\n                                \"@case\": {\n                                    value: 42,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@default\": \"= 'boo'\"\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, \"boo\");\n                    }).nodeify(done);\n            });\n        });\n\n        describe(\"switch w/ when\", function () {\n            it(\"should work w/o default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        args: [\n                            {\n                                \"@when\": {\n                                    condition: 0,\n                                    args: function () {\n                                        return \"55\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@when\": {\n                                    condition: function () {\n                                        return Bluebird.resolve(42);\n                                    },\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@when\": {\n                                    condition: \"42\",\n                                    args: \"= 'boo'\"\n                                }\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, \"hi\");\n                    }).nodeify(done);\n            });\n\n            it(\"should work w default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        args: [\n                            {\n                                \"@when\": {\n                                    condition: 43,\n                                    args: function () {\n                                        return 55;\n                                    }\n                                }\n                            },\n                            {\n                                \"@when\": {\n                                    condition: undefined,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@default\": \"= 'boo'\"\n                            }\n                        ]\n                    }\n                });\n\n                //engine.addTracker(new ConsoleTracker());\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, 55);\n                    }).nodeify(done);\n            });\n\n            it(\"should do its default\", function (done) {\n                let engine = new ActivityExecutionEngine({\n                    \"@switch\": {\n                        args: [\n                            {\n                                \"@when\": {\n                                    condition: \"\",\n                                    args: function () {\n                                        return 55;\n                                    }\n                                }\n                            },\n                            {\n                                \"@when\": {\n                                    condition: null,\n                                    args: function () {\n                                        return \"hi\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@default\": \"= 'boo'\"\n                            }\n                        ]\n                    }\n                });\n\n                engine.invoke().then(\n                    function (result) {\n                        assert.deepEqual(result, \"boo\");\n                    }).nodeify(done);\n            });\n        });\n    });\n});"],"file":"activities/conditionals.js","sourceRoot":"/source/"}