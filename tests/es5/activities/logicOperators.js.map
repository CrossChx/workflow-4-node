{"version":3,"sources":["activities/logicOperators.js"],"names":[],"mappings":"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","file":"activities/logicOperators.js","sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet Block = wf4node.activities.Block;\nlet _ = require(\"lodash\");\n\ndescribe(\"Logic Operators\", function () {\n    describe(\"Truthy\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    t1: {\n                        \"@truthy\": {\n                            value: \"a\"\n                        }\n                    },\n                    t2: {\n                        \"@truthy\": {\n                            value: null\n                        }\n                    },\n                    t3: {\n                        \"@truthy\": {\n                            value: true,\n                            is: \"is\",\n                            isNot: \"isNot\"\n                        }\n                    },\n                    t4: {\n                        \"@truthy\": {\n                            value: null,\n                            is: \"is\",\n                            isNot: {\n                                \"@func\": {\n                                    code: function () {\n                                        return \"isNot\";\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    args: [\n                        [\"= this.t1\", \"= this.t2\", \"= this.t3\", \"= this.t4\"]\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isArray(result));\n                    assert.equal(result[0], true);\n                    assert.equal(result[1], false);\n                    assert.equal(result[2], \"is\");\n                    assert.equal(result[3], \"isNot\");\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Falsy\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    t1: {\n                        \"@falsy\": {\n                            value: \"a\"\n                        }\n                    },\n                    t2: {\n                        \"@falsy\": {\n                            value: null\n                        }\n                    },\n                    t3: {\n                        \"@falsy\": {\n                            value: true,\n                            is: \"is\",\n                            isNot: \"isNot\"\n                        }\n                    },\n                    t4: {\n                        \"@falsy\": {\n                            value: null,\n                            is: \"= 'is'\",\n                            isNot: {\n                                \"@func\": {\n                                    code: function () {\n                                        return \"isNot\";\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    args: [\n                        [\"= this.t1\", \"= this.t2\", \"= this.t3\", \"= this.t4\"]\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isArray(result));\n                    assert.equal(result[0], false);\n                    assert.equal(result[1], true);\n                    assert.equal(result[2], \"isNot\");\n                    assert.equal(result[3], \"is\");\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Equals\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    a: {\n                        \"@equals\": {\n                            value: function () {\n                                return 42;\n                            },\n                            to: \"= 40 + 2 \",\n                            is: function () {\n                                return \"42\";\n                            },\n                            isNot: \"aba\"\n                        }\n                    },\n                    b: {\n                        \"@equals\": {\n                            value: function () {\n                                return 42;\n                            },\n                            to: \"= 40 + 1 \",\n                            is: function () {\n                                return \"42\";\n                            },\n                            isNot: \"aba\"\n                        }\n                    },\n                    args: {\n                        a: \"= this.a\",\n                        b: \"= this.b\"\n                    }\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isPlainObject(result));\n                    assert.equal(result.a, \"42\");\n                    assert.equal(result.b, \"aba\");\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"NotEquals\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    a: {\n                        \"@notEquals\": {\n                            value: function () {\n                                return 42;\n                            },\n                            to: \"= 40 + 2 \",\n                            is: function () {\n                                return \"42\";\n                            },\n                            isNot: \"aba\"\n                        }\n                    },\n                    b: {\n                        \"@notEquals\": {\n                            value: function () {\n                                return 42;\n                            },\n                            to: \"= 40 + 1 \",\n                            is: function () {\n                                return \"42\";\n                            },\n                            isNot: \"aba\"\n                        }\n                    },\n                    args: {\n                        a: \"= this.a\",\n                        b: \"= this.b\"\n                    }\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isPlainObject(result));\n                    assert.equal(result.a, \"aba\");\n                    assert.equal(result.b, \"42\");\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Not, And, Or\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    a: {\n                        \"@and\": [\n                            true,\n                            \"bubu\",\n                            {\n                                \"@or\": [\n                                    \"= true\",\n                                    false\n                                ]\n                            },\n                            {\n                                \"@not\": [\n                                    {\n                                        \"@and\": [\n                                            true,\n                                            function () {\n                                                return null;\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    b: {\n                        \"@and\": {\n                            args: [\n                                {\n                                    \"@or\": [\n                                        \"= true\",\n                                        false\n                                    ]\n                                },\n                                {\n                                    \"@not\": [\n                                        {\n                                            \"@and\": [\n                                                true,\n                                                \"= [ 42 ]\"\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ],\n                            isFalse: function () {\n                                return Bluebird.delay(100).then(function () {\n                                    return 42;\n                                });\n                            }\n                        }\n                    },\n                    args: {\n                        a: \"= this.a\",\n                        b: \"= this.b\"\n                    }\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isPlainObject(result));\n                    assert.equal(result.a, true);\n                    assert.equal(result.b, 42);\n                }).nodeify(done);\n        });\n    });\n});"],"sourceRoot":"/source/"}