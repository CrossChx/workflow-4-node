{"version":3,"names":[],"mappings":"","sources":["activities/logicOperators.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet Block = wf4node.activities.Block;\nlet _ = require(\"lodash\");\n\ndescribe(\"Logic Operators\", function () {\n    describe(\"Truthy\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    t1: {\n                        \"@truthy\": {\n                            value: \"a\"\n                        }\n                    },\n                    t2: {\n                        \"@truthy\": {\n                            value: null\n                        }\n                    },\n                    t3: {\n                        \"@truthy\": {\n                            value: true,\n                            is: \"is\",\n                            isNot: \"isNot\"\n                        }\n                    },\n                    t4: {\n                        \"@truthy\": {\n                            value: null,\n                            is: \"is\",\n                            isNot: {\n                                \"@func\": {\n                                    code: function () {\n                                        return \"isNot\";\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    args: [\n                        [\"= this.t1\", \"= this.t2\", \"= this.t3\", \"= this.t4\"]\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isArray(result));\n                    assert.equal(result[0], true);\n                    assert.equal(result[1], false);\n                    assert.equal(result[2], \"is\");\n                    assert.equal(result[3], \"isNot\");\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Falsy\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    t1: {\n                        \"@falsy\": {\n                            value: \"a\"\n                        }\n                    },\n                    t2: {\n                        \"@falsy\": {\n                            value: null\n                        }\n                    },\n                    t3: {\n                        \"@falsy\": {\n                            value: true,\n                            is: \"is\",\n                            isNot: \"isNot\"\n                        }\n                    },\n                    t4: {\n                        \"@falsy\": {\n                            value: null,\n                            is: \"= 'is'\",\n                            isNot: {\n                                \"@func\": {\n                                    code: function () {\n                                        return \"isNot\";\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    args: [\n                        [\"= this.t1\", \"= this.t2\", \"= this.t3\", \"= this.t4\"]\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isArray(result));\n                    assert.equal(result[0], false);\n                    assert.equal(result[1], true);\n                    assert.equal(result[2], \"isNot\");\n                    assert.equal(result[3], \"is\");\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Equals\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    a: {\n                        \"@equals\": {\n                            value: function () {\n                                return 42;\n                            },\n                            to: \"= 40 + 2 \",\n                            is: function () {\n                                return \"42\";\n                            },\n                            isNot: \"aba\"\n                        }\n                    },\n                    b: {\n                        \"@equals\": {\n                            value: function () {\n                                return 42;\n                            },\n                            to: \"= 40 + 1 \",\n                            is: function () {\n                                return \"42\";\n                            },\n                            isNot: \"aba\"\n                        }\n                    },\n                    args: {\n                        a: \"= this.a\",\n                        b: \"= this.b\"\n                    }\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isPlainObject(result));\n                    assert.equal(result.a, \"42\");\n                    assert.equal(result.b, \"aba\");\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"NotEquals\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    a: {\n                        \"@notEquals\": {\n                            value: function () {\n                                return 42;\n                            },\n                            to: \"= 40 + 2 \",\n                            is: function () {\n                                return \"42\";\n                            },\n                            isNot: \"aba\"\n                        }\n                    },\n                    b: {\n                        \"@notEquals\": {\n                            value: function () {\n                                return 42;\n                            },\n                            to: \"= 40 + 1 \",\n                            is: function () {\n                                return \"42\";\n                            },\n                            isNot: \"aba\"\n                        }\n                    },\n                    args: {\n                        a: \"= this.a\",\n                        b: \"= this.b\"\n                    }\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isPlainObject(result));\n                    assert.equal(result.a, \"aba\");\n                    assert.equal(result.b, \"42\");\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Not, And, Or\", function () {\n        it(\"should work\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    a: {\n                        \"@and\": [\n                            true,\n                            \"bubu\",\n                            {\n                                \"@or\": [\n                                    \"= true\",\n                                    false\n                                ]\n                            },\n                            {\n                                \"@not\": [\n                                    {\n                                        \"@and\": [\n                                            true,\n                                            function () {\n                                                return null;\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    b: {\n                        \"@and\": {\n                            args: [\n                                {\n                                    \"@or\": [\n                                        \"= true\",\n                                        false\n                                    ]\n                                },\n                                {\n                                    \"@not\": [\n                                        {\n                                            \"@and\": [\n                                                true,\n                                                \"= [ 42 ]\"\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ],\n                            isFalse: function () {\n                                return Bluebird.delay(100).then(function () {\n                                    return 42;\n                                });\n                            }\n                        }\n                    },\n                    args: {\n                        a: \"= this.a\",\n                        b: \"= this.b\"\n                    }\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isPlainObject(result));\n                    assert.equal(result.a, true);\n                    assert.equal(result.b, 42);\n                }).nodeify(done);\n        });\n    });\n});"],"file":"activities/logicOperators.js","sourceRoot":"/source/"}