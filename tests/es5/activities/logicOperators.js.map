{"version":3,"names":[],"mappings":"","sources":["activities/logicOperators.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet Func = wf4node.activities.Func;\r\nlet activityMarkup = wf4node.activities.activityMarkup;\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet assert = require(\"assert\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet Block = wf4node.activities.Block;\r\nlet _ = require(\"lodash\");\r\n\r\ndescribe(\"Logic Operators\", function () {\r\n    describe(\"Truthy\", function () {\r\n        it(\"should work\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    t1: {\r\n                        \"@truthy\": {\r\n                            value: \"a\"\r\n                        }\r\n                    },\r\n                    t2: {\r\n                        \"@truthy\": {\r\n                            value: null\r\n                        }\r\n                    },\r\n                    t3: {\r\n                        \"@truthy\": {\r\n                            value: true,\r\n                            is: \"is\",\r\n                            isNot: \"isNot\"\r\n                        }\r\n                    },\r\n                    t4: {\r\n                        \"@truthy\": {\r\n                            value: null,\r\n                            is: \"is\",\r\n                            isNot: {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return \"isNot\";\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    args: [\r\n                        [\"= this.t1\", \"= this.t2\", \"= this.t3\", \"= this.t4\"]\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.ok(_.isArray(result));\r\n                    assert.equal(result[0], true);\r\n                    assert.equal(result[1], false);\r\n                    assert.equal(result[2], \"is\");\r\n                    assert.equal(result[3], \"isNot\");\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"Falsy\", function () {\r\n        it(\"should work\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    t1: {\r\n                        \"@falsy\": {\r\n                            value: \"a\"\r\n                        }\r\n                    },\r\n                    t2: {\r\n                        \"@falsy\": {\r\n                            value: null\r\n                        }\r\n                    },\r\n                    t3: {\r\n                        \"@falsy\": {\r\n                            value: true,\r\n                            is: \"is\",\r\n                            isNot: \"isNot\"\r\n                        }\r\n                    },\r\n                    t4: {\r\n                        \"@falsy\": {\r\n                            value: null,\r\n                            is: \"= 'is'\",\r\n                            isNot: {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return \"isNot\";\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    args: [\r\n                        [\"= this.t1\", \"= this.t2\", \"= this.t3\", \"= this.t4\"]\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.ok(_.isArray(result));\r\n                    assert.equal(result[0], false);\r\n                    assert.equal(result[1], true);\r\n                    assert.equal(result[2], \"isNot\");\r\n                    assert.equal(result[3], \"is\");\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"Equals\", function () {\r\n        it(\"should work\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    a: {\r\n                        \"@equals\": {\r\n                            value: function () {\r\n                                return 42;\r\n                            },\r\n                            to: \"= 40 + 2 \",\r\n                            is: function () {\r\n                                return \"42\";\r\n                            },\r\n                            isNot: \"aba\"\r\n                        }\r\n                    },\r\n                    b: {\r\n                        \"@equals\": {\r\n                            value: function () {\r\n                                return 42;\r\n                            },\r\n                            to: \"= 40 + 1 \",\r\n                            is: function () {\r\n                                return \"42\";\r\n                            },\r\n                            isNot: \"aba\"\r\n                        }\r\n                    },\r\n                    args: {\r\n                        a: \"= this.a\",\r\n                        b: \"= this.b\"\r\n                    }\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.ok(_.isPlainObject(result));\r\n                    assert.equal(result.a, \"42\");\r\n                    assert.equal(result.b, \"aba\");\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"NotEquals\", function () {\r\n        it(\"should work\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    a: {\r\n                        \"@notEquals\": {\r\n                            value: function () {\r\n                                return 42;\r\n                            },\r\n                            to: \"= 40 + 2 \",\r\n                            is: function () {\r\n                                return \"42\";\r\n                            },\r\n                            isNot: \"aba\"\r\n                        }\r\n                    },\r\n                    b: {\r\n                        \"@notEquals\": {\r\n                            value: function () {\r\n                                return 42;\r\n                            },\r\n                            to: \"= 40 + 1 \",\r\n                            is: function () {\r\n                                return \"42\";\r\n                            },\r\n                            isNot: \"aba\"\r\n                        }\r\n                    },\r\n                    args: {\r\n                        a: \"= this.a\",\r\n                        b: \"= this.b\"\r\n                    }\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.ok(_.isPlainObject(result));\r\n                    assert.equal(result.a, \"aba\");\r\n                    assert.equal(result.b, \"42\");\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"Not, And, Or\", function () {\r\n        it(\"should work\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    a: {\r\n                        \"@and\": [\r\n                            true,\r\n                            \"bubu\",\r\n                            {\r\n                                \"@or\": [\r\n                                    \"= true\",\r\n                                    false\r\n                                ]\r\n                            },\r\n                            {\r\n                                \"@not\": [\r\n                                    {\r\n                                        \"@and\": [\r\n                                            true,\r\n                                            function () {\r\n                                                return null;\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    },\r\n                    b: {\r\n                        \"@and\": {\r\n                            args: [\r\n                                {\r\n                                    \"@or\": [\r\n                                        \"= true\",\r\n                                        false\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    \"@not\": [\r\n                                        {\r\n                                            \"@and\": [\r\n                                                true,\r\n                                                \"= [ 42 ]\"\r\n                                            ]\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            isFalse: function () {\r\n                                return Bluebird.delay(100).then(function () {\r\n                                    return 42;\r\n                                });\r\n                            }\r\n                        }\r\n                    },\r\n                    args: {\r\n                        a: \"= this.a\",\r\n                        b: \"= this.b\"\r\n                    }\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.ok(_.isPlainObject(result));\r\n                    assert.equal(result.a, true);\r\n                    assert.equal(result.b, 42);\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n});"],"file":"activities/logicOperators.js","sourceRoot":"/source/"}