{"version":3,"names":[],"mappings":"","sources":["activities/loops.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet Block = wf4node.activities.Block;\nlet _ = require(\"lodash\");\n\ndescribe(\"Loops\", function () {\n    describe(\"While\", function () {\n        it(\"should run a basic cycle\", function (done) {\n            let block = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        i: 10,\n                        j: 0,\n                        z: 0,\n                        args: [\n                            {\n                                \"@while\": {\n                                    condition: \"= this.j < this.i\",\n                                    args: \"= this.j++\",\n                                    \"@to\": \"z\"\n                                }\n                            },\n                            \"= { j: this.j, z: this.z }\"\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(block);\n            //engine.addTracker(new ConsoleTracker());\n\n            engine.invoke().then(\n                function (result) {\n                    assert.ok(_.isObject(result));\n                    assert.equal(result.j, 10);\n                    assert.equal(result.z, 9);\n                }).nodeify(done);\n        });\n    });\n\n    describe('For', function () {\n        it('should work between range 0 and 10 by step 1', function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    seq: \"\",\n                    args: [\n                        {\n                            \"@for\": {\n                                from: 0,\n                                to: {\n                                    \"@func\": {\n                                        code: function () {\n                                            return Bluebird.delay(100).then(function () { return 10; });\n                                        }\n                                    }\n                                },\n                                args: \"= this.seq = this.seq + this.i\"\n                            }\n                        },\n                        \"= this.seq\"\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert(_.isString(result));\n                    assert.equal(result, \"0123456789\");\n                }).nodeify(done);\n        });\n\n        it('should work between range 10 downto 4 by step -2', function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    seq: \"\",\n                    r: null,\n                    args: [\n                        {\n                            \"@for\": {\n                                from: 10,\n                                to: {\n                                    \"@func\": {\n                                        code: function () {\n                                            return Bluebird.delay(100).then(function () { return 4; });\n                                        }\n                                    }\n                                },\n                                step: -2,\n                                varName: \"klow\",\n                                args: \"= this.seq += this.klow\",\n                                \"@to\": \"r\"\n                            }\n                        },\n                        \"= { v: this.seq, r: this.r }\"\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert(_.isObject(result));\n                    assert.equal(result.v, \"1086\");\n                    assert.equal(result.r, \"1086\");\n                }).nodeify(done);\n        });\n    });\n\n    describe('ForEach', function () {\n        it('should work non parallel', function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    seq: {\n                        \"@func\": {\n                            code: function () {\n                                return [1, 2, 3, 4, 5, 6];\n                            }\n                        }\n                    },\n                    result: \"\",\n                    args: [\n                        {\n                            \"@forEach\": {\n                                items: \"= this.seq\",\n                                args: \"= this.result += this.item\"\n                            }\n                        },\n                        \"= this.result\"\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert(_.isString(result));\n                    assert.equal(result, \"123456\");\n                }).nodeify(done);\n        });\n\n        it('should work parallel non scheduled', function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    seq: {\n                        \"@func\": {\n                            code: function () {\n                                return [1, 2, 3, 4, 5, 6];\n                            }\n                        }\n                    },\n                    result: \"\",\n                    args: [\n                        {\n                            \"@forEach\": {\n                                parallel: true,\n                                varName: \"klow\",\n                                items: \"= this.seq\",\n                                args: \"= this.result += this.klow\"\n                            }\n                        },\n                        \"= this.result\"\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert(_.isString(result));\n                    assert.equal(result, \"123456\");\n                }).nodeify(done);\n        });\n\n        it('should work parallel scheduled', function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    seq: \"function () { return [1, 2, 3, 4, 5, 6]; }\",\n                    result: [],\n                    args: [\n                        {\n                            \"@forEach\": {\n                                parallel: true,\n                                varName: \"klow\",\n                                items: \"= this.seq\",\n                                args: function () {\n                                    let self = this;\n                                    return Bluebird.delay(Math.random() * 100)\n                                        .then(function () {\n                                            self.result.push(self.klow);\n                                        });\n                                }\n                            }\n                        },\n                        \"= this.result\"\n                    ]\n                }\n            });\n\n            engine.invoke().then(\n                function (result) {\n                    assert(_.isArray(result));\n                    assert.equal(result.length, 6);\n                    assert.equal(_(result).sum(), 6 + 5 + 4 + 3 + 2 + 1);\n                }).nodeify(done);\n        });\n    });\n});"],"file":"activities/loops.js","sourceRoot":"/source/"}