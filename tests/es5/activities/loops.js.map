{"version":3,"names":[],"mappings":"","sources":["activities/loops.js"],"sourcesContent":["\"use strict\";\r\n/* global describe,it */\r\nlet wf4node = require(\"../../../\");\r\nlet Func = wf4node.activities.Func;\r\nlet activityMarkup = wf4node.activities.activityMarkup;\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet assert = require(\"assert\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet Block = wf4node.activities.Block;\r\nlet _ = require(\"lodash\");\r\nlet errors = wf4node.common.errors;\r\n\r\ndescribe(\"Loops\", function () {\r\n    describe(\"While\", function () {\r\n        it(\"should run a basic cycle\", function (done) {\r\n            let block = activityMarkup.parse(\r\n                {\r\n                    \"@block\": {\r\n                        i: 10,\r\n                        j: 0,\r\n                        z: 0,\r\n                        args: [\r\n                            {\r\n                                \"@while\": {\r\n                                    condition: \"= this.j < this.i\",\r\n                                    args: \"= this.j++\",\r\n                                    \"@to\": \"z\"\r\n                                }\r\n                            },\r\n                            \"= { j: this.j, z: this.z }\"\r\n                        ]\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n            //engine.addTracker(new ConsoleTracker());\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.ok(_.isObject(result));\r\n                    assert.equal(result.j, 10);\r\n                    assert.equal(result.z, 9);\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"For\", function () {\r\n        it(\"should work between range 0 and 10 by step 1\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    seq: \"\",\r\n                    args: [\r\n                        {\r\n                            \"@for\": {\r\n                                from: 0,\r\n                                to: {\r\n                                    \"@func\": {\r\n                                        code: function () {\r\n                                            return Bluebird.delay(100).then(function () {\r\n                                                return 10;\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                },\r\n                                args: \"= this.seq = this.seq + this.i\"\r\n                            }\r\n                        },\r\n                        \"= this.seq\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert(_.isString(result));\r\n                    assert.equal(result, \"0123456789\");\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should work between range 10 downto 4 by step -2\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    seq: \"\",\r\n                    r: null,\r\n                    args: [\r\n                        {\r\n                            \"@for\": {\r\n                                from: 10,\r\n                                to: {\r\n                                    \"@func\": {\r\n                                        code: function () {\r\n                                            return Bluebird.delay(100).then(function () {\r\n                                                return 4;\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                },\r\n                                step: -2,\r\n                                varName: \"klow\",\r\n                                args: \"= this.seq += this.klow\",\r\n                                \"@to\": \"r\"\r\n                            }\r\n                        },\r\n                        \"= { v: this.seq, r: this.r }\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert(_.isObject(result));\r\n                    assert.equal(result.v, \"1086\");\r\n                    assert.equal(result.r, \"1086\");\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"ForEach\", function () {\r\n        it(\"should work non parallel\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    seq: {\r\n                        \"@func\": {\r\n                            code: function () {\r\n                                return [1, 2, 3, 4, 5, 6];\r\n                            }\r\n                        }\r\n                    },\r\n                    result: \"\",\r\n                    args: [\r\n                        {\r\n                            \"@forEach\": {\r\n                                items: \"= this.seq\",\r\n                                args: \"= this.result += this.item\"\r\n                            }\r\n                        },\r\n                        \"= this.result\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert(_.isString(result));\r\n                    assert.equal(result, \"123456\");\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should work parallel non scheduled\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    seq: {\r\n                        \"@func\": {\r\n                            code: function () {\r\n                                return [1, 2, 3, 4, 5, 6];\r\n                            }\r\n                        }\r\n                    },\r\n                    result: \"\",\r\n                    args: [\r\n                        {\r\n                            \"@forEach\": {\r\n                                parallel: true,\r\n                                varName: \"klow\",\r\n                                items: \"= this.seq\",\r\n                                args: \"= this.result += this.klow\"\r\n                            }\r\n                        },\r\n                        \"= this.result\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert(_.isString(result));\r\n                    assert.equal(result, \"123456\");\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should work parallel scheduled\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    seq: \"function () { return [1, 2, 3, 4, 5, 6]; }\",\r\n                    result: [],\r\n                    args: [\r\n                        {\r\n                            \"@forEach\": {\r\n                                parallel: true,\r\n                                varName: \"klow\",\r\n                                items: \"= this.seq\",\r\n                                args: function () {\r\n                                    let self = this;\r\n                                    return Bluebird.delay(Math.random() * 100)\r\n                                        .then(function () {\r\n                                            self.result.push(self.klow);\r\n                                        });\r\n                                }\r\n                            }\r\n                        },\r\n                        \"= this.result\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert(_.isArray(result));\r\n                    assert.equal(result.length, 6);\r\n                    assert.equal(_(result).sum(), 6 + 5 + 4 + 3 + 2 + 1);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should work with generators non-parallel\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    result: [],\r\n                    stuff: {\r\n                        val: -1\r\n                    },\r\n                    args: [\r\n                        {\r\n                            \"@forEach\": {\r\n                                items: {\r\n                                    \"@func\": {\r\n                                        args: \"= this.stuff\",\r\n                                        code: function* (stuff) {\r\n                                            yield -1 * stuff.val;\r\n                                            yield 2;\r\n                                            yield 3;\r\n                                            yield stuff.val;\r\n                                        }\r\n                                    }\r\n                                },\r\n                                args: function () {\r\n                                    if (this.stuff.val === -1) {\r\n                                        this.stuff.val = 4;\r\n                                    }\r\n                                    this.result.push(this.item);\r\n                                }\r\n                            }\r\n                        },\r\n                        \"= this.result\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert(_.isArray(result));\r\n                    assert.equal(result.length, 4);\r\n                    assert.equal(result[0], 1);\r\n                    assert.equal(result[1], 2);\r\n                    assert.equal(result[2], 3);\r\n                    assert.equal(result[3], 4);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should throw with generators\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    result: [],\r\n                    stuff: {\r\n                        val: -1\r\n                    },\r\n                    args: [\r\n                        {\r\n                            \"@forEach\": {\r\n                                parallel: true,\r\n                                items: {\r\n                                    \"@func\": {\r\n                                        args: \"= this.stuff\",\r\n                                        code: function* (stuff) {\r\n                                            yield -1 * stuff.val;\r\n                                            yield 2;\r\n                                            yield 3;\r\n                                            yield stuff.val;\r\n                                        }\r\n                                    }\r\n                                },\r\n                                args: function () {\r\n                                    if (this.stuff.val === -1) {\r\n                                        this.stuff.val = 4;\r\n                                    }\r\n                                    this.result.push(this.item);\r\n                                }\r\n                            }\r\n                        },\r\n                        \"= this.result\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            engine.invoke()\r\n                .then(function () {\r\n                    assert(false);\r\n                },\r\n                function(e) {\r\n                    assert(e instanceof errors.ActivityRuntimeError);\r\n                    assert(/not supported/.test(e.message));\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n});"],"file":"activities/loops.js","sourceRoot":"/source/"}