{"version":3,"names":[],"mappings":"","sources":["activities/templates.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet _ = require(\"lodash\");\nlet assert = require(\"assert\");\n\ndescribe(\"templates\", function () {\n    it(\"should parse object correctly\", function (done) {\n\n        let engine = new ActivityExecutionEngine({\n            \"@template\": {\n                declare: {\n                    a: \"foo\",\n                    b: [\n                        \"zoo\",\n                        {\n                            c: {\n                                \"@func\": {\n                                    code: function () {\n                                        return 6;\n                                    }\n                                }\n                            }\n                        },\n                        \"= 42\"\n                    ]\n                }\n            }\n        });\n\n        engine.invoke().then(function (result) {\n\n            assert.ok(_.isPlainObject(result));\n            assert.equal(result.a, \"foo\");\n            assert.ok(_.isArray(result.b));\n            assert.equal(result.b.length, 3);\n            assert.equal(result.b[0], \"zoo\");\n            assert.ok(_.isPlainObject(result.b[1]));\n            assert.equal(result.b[1].c, 6);\n            assert.equal(result.b[2], 42);\n        }).nodeify(done);\n    });\n\n    it(\"should work when specialized\", function (done) {\n\n        let engine = new ActivityExecutionEngine({\n            \"@block\": [\n                {\n                    a: \"foo\",\n                    b: [\n                        \"zoo\",\n                        {\n                            c: {\n                                \"@func\": {\n                                    code: function () {\n                                        return 6;\n                                    }\n                                }\n                            }\n                        },\n                        \"= 42\"\n                    ]\n                }\n            ]\n        });\n\n        engine.invoke().then(function (result) {\n            assert.ok(_.isPlainObject(result));\n            assert.equal(result.a, \"foo\");\n            assert.ok(_.isArray(result.b));\n            assert.equal(result.b.length, 3);\n            assert.equal(result.b[0], \"zoo\");\n            assert.ok(_.isPlainObject(result.b[1]));\n            assert.equal(result.b[1].c, 6);\n            assert.equal(result.b[2], 42);\n        }).nodeify(done);\n    });\n\n    it(\"should work on arrays\", function (done) {\n        let engine = new ActivityExecutionEngine({\n            \"@block\": {\n                rule: {\n                    value: 22\n                },\n                args: [\n                    {\n                        \"@block\": {\n                            a: [\n                                {\n                                    $project: {\n                                        $literal: \"= this.rule.value\"\n                                    }\n                                }\n                            ],\n                            args: [\n                                \"= this.a\"\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n\n        engine.invoke().then(function (result) {\n            assert.ok(_.isArray(result));\n            assert.ok(_.isPlainObject(result[0].$project));\n            assert.equal(result[0].$project.$literal, 22);\n        }).nodeify(done);\n    });\n\n    it(\"should ignore escaped markup\", function (done) {\n        let engine = new ActivityExecutionEngine({\n            \"@block\": {\n                id: \"poo\",\n                stuff: {\n                    _: {\n                        sayHello: function (name) {\n                            return \"Hello, \" + name + \"!\";\n                        }\n                    }\n                },\n                args: [\n                    {\n                        \"@func\": {\n                            args: \" = this.poo.stuff.sayHello\",\n                            code: function(f) {\n                                return f(\"Gabor\");\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n\n        engine.invoke().then(function (result) {\n            assert.equal(result, \"Hello, Gabor!\");\n        }).nodeify(done);\n    });\n});"],"file":"activities/templates.js","sourceRoot":"/source/"}