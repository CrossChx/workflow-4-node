{"version":3,"names":[],"mappings":"","sources":["activities/templates.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet _ = require(\"lodash\");\r\nlet assert = require(\"assert\");\r\n\r\ndescribe(\"templates\", function () {\r\n    it(\"should parse object correctly\", function (done) {\r\n\r\n        let engine = new ActivityExecutionEngine({\r\n            \"@template\": {\r\n                declare: {\r\n                    a: \"foo\",\r\n                    b: [\r\n                        \"zoo\",\r\n                        {\r\n                            c: {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return 6;\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        \"= 42\"\r\n                    ]\r\n                }\r\n            }\r\n        });\r\n\r\n        engine.invoke().then(function (result) {\r\n\r\n            assert.ok(_.isPlainObject(result));\r\n            assert.equal(result.a, \"foo\");\r\n            assert.ok(_.isArray(result.b));\r\n            assert.equal(result.b.length, 3);\r\n            assert.equal(result.b[0], \"zoo\");\r\n            assert.ok(_.isPlainObject(result.b[1]));\r\n            assert.equal(result.b[1].c, 6);\r\n            assert.equal(result.b[2], 42);\r\n        }).nodeify(done);\r\n    });\r\n\r\n    it(\"should work when specialized\", function (done) {\r\n\r\n        let engine = new ActivityExecutionEngine({\r\n            \"@block\": [\r\n                {\r\n                    a: \"foo\",\r\n                    b: [\r\n                        \"zoo\",\r\n                        {\r\n                            c: {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return 6;\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        \"= 42\"\r\n                    ]\r\n                }\r\n            ]\r\n        });\r\n\r\n        engine.invoke().then(function (result) {\r\n            assert.ok(_.isPlainObject(result));\r\n            assert.equal(result.a, \"foo\");\r\n            assert.ok(_.isArray(result.b));\r\n            assert.equal(result.b.length, 3);\r\n            assert.equal(result.b[0], \"zoo\");\r\n            assert.ok(_.isPlainObject(result.b[1]));\r\n            assert.equal(result.b[1].c, 6);\r\n            assert.equal(result.b[2], 42);\r\n        }).nodeify(done);\r\n    });\r\n\r\n    it(\"should work on arrays\", function (done) {\r\n        let engine = new ActivityExecutionEngine({\r\n            \"@block\": {\r\n                rule: {\r\n                    value: 22\r\n                },\r\n                args: [\r\n                    {\r\n                        \"@block\": {\r\n                            a: [\r\n                                {\r\n                                    $project: {\r\n                                        $literal: \"= this.rule.value\"\r\n                                    }\r\n                                }\r\n                            ],\r\n                            args: [\r\n                                \"= this.a\"\r\n                            ]\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n\r\n        engine.invoke().then(function (result) {\r\n            assert.ok(_.isArray(result));\r\n            assert.ok(_.isPlainObject(result[0].$project));\r\n            assert.equal(result[0].$project.$literal, 22);\r\n        }).nodeify(done);\r\n    });\r\n\r\n    it(\"should ignore escaped markup\", function (done) {\r\n        let engine = new ActivityExecutionEngine({\r\n            \"@block\": {\r\n                id: \"poo\",\r\n                stuff: {\r\n                    _: {\r\n                        sayHello: function (name) {\r\n                            return \"Hello, \" + name + \"!\";\r\n                        }\r\n                    }\r\n                },\r\n                args: [\r\n                    {\r\n                        \"@func\": {\r\n                            args: \" = this.poo.stuff.sayHello\",\r\n                            code: function(f) {\r\n                                return f(\"Gabor\");\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n\r\n        engine.invoke().then(function (result) {\r\n            assert.equal(result, \"Hello, Gabor!\");\r\n        }).nodeify(done);\r\n    });\r\n});"],"file":"activities/templates.js","sourceRoot":"/source/"}