{"version":3,"sources":["activities/templates.js"],"names":[],"mappings":"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","file":"activities/templates.js","sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet _ = require(\"lodash\");\nlet assert = require(\"assert\");\n\ndescribe(\"templates\", function () {\n    it(\"should parse object correctly\", function (done) {\n        let dec = {\n            a: \"foo\",\n            b: [\n                \"zoo\",\n                {\n                    c: {\n                        \"@func\": {\n                            code: function () {\n                                return 6;\n                            }\n                        }\n                    }\n                },\n                \"= 42\"\n            ]\n        };\n        let engine = new ActivityExecutionEngine({\n            \"@template\": {\n                declare: dec\n            }\n        });\n\n        engine.invoke().then(function (result) {\n            assert.ok(_.isPlainObject(result));\n            assert.notEqual(result, dec);\n            assert.equal(result.a, \"foo\");\n            assert.ok(_.isArray(result.b));\n            assert.equal(result.b.length, 3);\n            assert.equal(result.b[0], \"zoo\");\n            assert.ok(_.isPlainObject(result.b[1]));\n            assert.equal(result.b[1].c, 6);\n            assert.equal(result.b[2], 42);\n        }).nodeify(done);\n    });\n\n    it(\"should work when specialized\", function (done) {\n\n        let engine = new ActivityExecutionEngine({\n            \"@block\": [\n                {\n                    a: \"foo\",\n                    b: [\n                        \"zoo\",\n                        {\n                            c: {\n                                \"@func\": {\n                                    code: function () {\n                                        return 6;\n                                    }\n                                }\n                            }\n                        },\n                        \"= 42\"\n                    ]\n                }\n            ]\n        });\n\n        engine.invoke().then(function (result) {\n            assert.ok(_.isPlainObject(result));\n            assert.equal(result.a, \"foo\");\n            assert.ok(_.isArray(result.b));\n            assert.equal(result.b.length, 3);\n            assert.equal(result.b[0], \"zoo\");\n            assert.ok(_.isPlainObject(result.b[1]));\n            assert.equal(result.b[1].c, 6);\n            assert.equal(result.b[2], 42);\n        }).nodeify(done);\n    });\n\n    it(\"should work on arrays\", function (done) {\n        let arr = [\n            {\n                $project: {\n                    $literal: \"= this.rule.value\"\n                }\n            }\n        ];\n        let engine = new ActivityExecutionEngine({\n            \"@block\": {\n                rule: {\n                    value: 22\n                },\n                args: [\n                    {\n                        \"@block\": {\n                            a: arr,\n                            args: [\n                                \"= this.a\"\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n\n        engine.invoke().then(function (result) {\n            assert.ok(_.isArray(result));\n            assert.notEqual(result, arr);\n            assert.ok(_.isPlainObject(result[0].$project));\n            assert.equal(result[0].$project.$literal, 22);\n        }).nodeify(done);\n    });\n\n    it(\"should ignore escaped markup\", function (done) {\n        let engine = new ActivityExecutionEngine({\n            \"@block\": {\n                id: \"poo\",\n                stuff: {\n                    _: {\n                        sayHello: function (name) {\n                            return \"Hello, \" + name + \"!\";\n                        }\n                    }\n                },\n                args: [\n                    {\n                        \"@func\": {\n                            args: \" = this.poo.stuff.sayHello\",\n                            code: function (f) {\n                                return f(\"Gabor\");\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n\n        engine.invoke().then(function (result) {\n            assert.equal(result, \"Hello, Gabor!\");\n        }).nodeify(done);\n    });\n\n    it(\"should create cloned objects\", function (done) {\n        let obj2 = {\n            foo: \"bar\"\n        };\n        let obj = { baz: obj2 };\n        let engine = new ActivityExecutionEngine({\n            \"@block\": {\n                obj: obj,\n                args: [\"= this.obj\"]\n            }\n        });\n\n        engine.invoke().then(function (result) {\n            assert(_.isObject(result));\n            assert(result !== obj);\n            assert(result.baz.foo === \"bar\");\n        }).nodeify(done);\n    });\n\n    it(\"should create cloned arrays\", function (done) {\n        let obj2 = {\n            foo: \"bar\"\n        };\n        let obj = { baz: obj2 };\n        let arr = [obj];\n        let engine = new ActivityExecutionEngine({\n            \"@block\": {\n                arr: arr,\n                args: [\"= this.arr\"]\n            }\n        });\n\n        engine.invoke().then(function (result) {\n            assert(_.isArray(result));\n            assert(result.length === 1);\n            assert(result !== arr);\n            result = result[0];\n            assert(result !== obj);\n            assert(result.baz.foo === \"bar\");\n        }).nodeify(done);\n    });\n});"],"sourceRoot":"/source/"}