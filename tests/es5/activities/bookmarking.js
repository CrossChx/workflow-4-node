"use strict";
var wf4node = require("../../../");
var Expression = wf4node.activities.Expression;
var Func = wf4node.activities.Func;
var Block = wf4node.activities.Block;
var activityMarkup = wf4node.activities.activityMarkup;
var ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;
var _ = require("lodash");
var ConsoleTracker = wf4node.activities.ConsoleTracker;
var WorkflowHost = wf4node.hosting.WorkflowHost;
var InstanceIdParser = wf4node.hosting.InstanceIdParser;
var assert = require("assert");
describe("bookmarking", function() {
  it("should handle parallel activities", function(done) {
    var activity = activityMarkup.parse({"@parallel": {
        var1: "",
        displayName: "Root",
        args: [{"@block": {
            displayName: "Wait Block 1",
            args: [{"@waitForBookmark": {
                displayName: "Wait 1",
                bookmarkName: "bm1"
              }}, {"@func": {
                displayName: "Func 1",
                code: function() {
                  return this.var1 += "a";
                }
              }}]
          }}, {"@block": {
            displayName: "Wait Block 2",
            args: [{"@waitForBookmark": {
                displayName: "Wait 2",
                bookmarkName: "bm2"
              }}, {"@func": {
                displayName: "Func 2",
                code: function() {
                  return this.var1 += "b";
                }
              }}]
          }}, {"@block": {
            displayName: "Resume Block",
            args: [{"@resumeBookmark": {
                displayName: "Resume 1",
                bookmarkName: "bm1"
              }}, {"@resumeBookmark": {
                displayName: "Resume 2",
                bookmarkName: "bm2"
              }}, "bubu"]
          }}]
      }});
    var engine = new ActivityExecutionEngine(activity);
    engine.invoke().then(function(result) {
      try {
        assert.ok(_.isArray(result));
        assert.equal(result.length, 3);
        assert.equal(result[0], "a");
        assert.equal(result[1], "ab");
        assert.equal(result[2], "bubu");
      } catch (e) {
        assert.ifError(e);
      }
    }).nodeify(done);
  });
  it("should handle of picking activities", function(done) {
    var activity = activityMarkup.parse({"@block": {
        var1: 0,
        args: [{"@parallel": [{"@pick": [{"@block": [{"@waitForBookmark": {bookmarkName: "foo"}}, {"@func": {
                  displayName: "Do Not Do This Func",
                  code: function() {
                    this.var1 = -1;
                  }
                }}]}, {"@block": [{"@waitForBookmark": {bookmarkName: "bm"}}, {"@func": {
                  displayName: "Do This Func",
                  code: function() {
                    this.var1 = 1;
                  }
                }}]}]}, {"@resumeBookmark": {bookmarkName: "bm"}}]}, {"@func": {
            displayName: "Final Func",
            code: function() {
              return this.var1;
            }
          }}]
      }});
    var engine = new ActivityExecutionEngine(activity);
    engine.invoke().then(function(result) {
      try {
        assert.equal(result, 1);
      } catch (e) {
        assert.ifError(e);
      }
    }).nodeify(done);
  });
});
//# sourceMappingURL=data:application/json;base64,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dml0aWVzL2Jvb2ttYXJraW5nLmpzIiwic291cmNlUm9vdCI6InRlc3RzL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBnbG9iYWwgZGVzY3JpYmUsaXQgKi9cblxubGV0IHdmNG5vZGUgPSByZXF1aXJlKFwiLi4vLi4vLi4vXCIpO1xubGV0IEV4cHJlc3Npb24gPSB3ZjRub2RlLmFjdGl2aXRpZXMuRXhwcmVzc2lvbjtcbmxldCBGdW5jID0gd2Y0bm9kZS5hY3Rpdml0aWVzLkZ1bmM7XG5sZXQgQmxvY2sgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQmxvY2s7XG5sZXQgYWN0aXZpdHlNYXJrdXAgPSB3ZjRub2RlLmFjdGl2aXRpZXMuYWN0aXZpdHlNYXJrdXA7XG5sZXQgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQWN0aXZpdHlFeGVjdXRpb25FbmdpbmU7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5sZXQgQ29uc29sZVRyYWNrZXIgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQ29uc29sZVRyYWNrZXI7XG5sZXQgV29ya2Zsb3dIb3N0ID0gd2Y0bm9kZS5ob3N0aW5nLldvcmtmbG93SG9zdDtcbmxldCBJbnN0YW5jZUlkUGFyc2VyID0gd2Y0bm9kZS5ob3N0aW5nLkluc3RhbmNlSWRQYXJzZXI7XG5sZXQgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcblxuZGVzY3JpYmUoXCJib29rbWFya2luZ1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoXCJzaG91bGQgaGFuZGxlIHBhcmFsbGVsIGFjdGl2aXRpZXNcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGFjdGl2aXR5ID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJAcGFyYWxsZWxcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YXIxOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogXCJSb290XCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBibG9ja1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBcIldhaXQgQmxvY2sgMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAd2FpdEZvckJvb2ttYXJrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IFwiV2FpdCAxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2ttYXJrTmFtZTogXCJibTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBcIkZ1bmMgMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YXIxICs9IFwiYVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBibG9ja1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBcIldhaXQgQmxvY2sgMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAd2FpdEZvckJvb2ttYXJrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IFwiV2FpdCAyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2ttYXJrTmFtZTogXCJibTJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBcIkZ1bmMgMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YXIxICs9IFwiYlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBibG9ja1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBcIlJlc3VtZSBCbG9ja1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAcmVzdW1lQm9va21hcmtcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogXCJSZXN1bWUgMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29rbWFya05hbWU6IFwiYm0xXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQHJlc3VtZUJvb2ttYXJrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IFwiUmVzdW1lIDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va21hcmtOYW1lOiBcImJtMlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYnVidVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGFjdGl2aXR5KTtcbiAgICAgICAgLy9lbmdpbmUuYWRkVHJhY2tlcihuZXcgQ29uc29sZVRyYWNrZXIoKSk7XG5cbiAgICAgICAgZW5naW5lLmludm9rZSgpLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Lm9rKF8uaXNBcnJheShyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdC5sZW5ndGgsIDMpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0WzBdLCBcImFcIik7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHRbMV0sIFwiYWJcIik7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHRbMl0sIFwiYnVidVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmlmRXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBvZiBwaWNraW5nIGFjdGl2aXRpZXNcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGFjdGl2aXR5ID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJAYmxvY2tcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YXIxOiAwLFxuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAcGFyYWxsZWxcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBwaWNrXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGJsb2NrXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkB3YWl0Rm9yQm9va21hcmtcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29rbWFya05hbWU6IFwiZm9vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogXCJEbyBOb3QgRG8gVGhpcyBGdW5jXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFyMSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGJsb2NrXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkB3YWl0Rm9yQm9va21hcmtcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29rbWFya05hbWU6IFwiYm1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBcIkRvIFRoaXMgRnVuY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhcjEgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkByZXN1bWVCb29rbWFya1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va21hcmtOYW1lOiBcImJtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBcIkZpbmFsIEZ1bmNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFyMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoYWN0aXZpdHkpO1xuICAgICAgICAvL2VuZ2luZS5hZGRUcmFja2VyKG5ldyBDb25zb2xlVHJhY2tlcigpKTtcblxuICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmlmRXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICB9KTtcbn0pOyJdfQ==
