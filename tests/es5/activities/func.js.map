{"version":3,"names":[],"mappings":"","sources":["activities/func.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet Func = wf4node.activities.Func;\r\nlet activityMarkup = wf4node.activities.activityMarkup;\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet assert = require(\"assert\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet _ = require(\"lodash\");\r\nlet errors = wf4node.common.errors;\r\n\r\ndescribe(\"Func\", function () {\r\n    it(\"should run with a synchronous code\", function (done) {\r\n        let fop = new Func();\r\n        fop.code = function (obj) {\r\n            return obj.name;\r\n        };\r\n\r\n        let engine = new ActivityExecutionEngine(fop);\r\n\r\n        engine.invoke({name: \"Gabor\"}).then(\r\n            function (result) {\r\n                assert.equal(result, \"Gabor\");\r\n            }).nodeify(done);\r\n    });\r\n\r\n    it(\"should run when created from markup\", function (done) {\r\n        let fop = activityMarkup.parse(\r\n            {\r\n                \"@func\": {\r\n                    code: function (obj) {\r\n                        return obj.name;\r\n                    }\r\n                }\r\n            });\r\n\r\n        let engine = new ActivityExecutionEngine(fop);\r\n\r\n        engine.invoke({name: \"Gabor\"}).then(\r\n            function (result) {\r\n                assert.equal(result, \"Gabor\");\r\n            }).nodeify(done);\r\n    });\r\n\r\n    it(\"should run twice\", function (done) {\r\n        let fop = activityMarkup.parse(\r\n            {\r\n                \"@func\": {\r\n                    code: function (obj) {\r\n                        return obj.name;\r\n                    }\r\n                }\r\n            });\r\n\r\n        let engine = new ActivityExecutionEngine(fop);\r\n\r\n        engine.invoke({name: \"Gabor\"})\r\n            .then(function (result) {\r\n                assert.equal(result, \"Gabor\");\r\n                return engine.invoke({name: \"Pisti\"})\r\n                    .then(function (result2) {\r\n                        assert.equal(result2, \"Pisti\");\r\n                    });\r\n            }).nodeify(done);\r\n    });\r\n\r\n    it(\"should run when code is asynchronous\", function (done) {\r\n        let fop = new Func();\r\n        fop.code = function (obj) {\r\n            return Bluebird.resolve(obj.name);\r\n        };\r\n\r\n        let engine = new ActivityExecutionEngine(fop);\r\n\r\n        engine.invoke({name: \"Mezo\"}).then(\r\n            function (result) {\r\n                assert.equal(result, \"Mezo\");\r\n            }).nodeify(done);\r\n    });\r\n\r\n    it(\"should run asynchronously when code is a generator\", function (done) {\r\n        let fop = Func.async(function* (a) {\r\n            yield Bluebird.delay(100);\r\n            return a.name;\r\n        });\r\n\r\n        let engine = new ActivityExecutionEngine(fop);\r\n\r\n        engine.invoke({name: \"Mezo\"}).then(\r\n            function (result) {\r\n                assert.equal(result, \"Mezo\");\r\n            }).nodeify(done);\r\n    });\r\n\r\n    it(\"should not accept activities as arguments\", function (done) {\r\n        let expected = {name: \"Gabor\"};\r\n        let fop = new Func();\r\n        fop.code = function (obj) {\r\n            return obj.name;\r\n        };\r\n        let fopin = new Func();\r\n        fopin.code = function () {\r\n            return expected;\r\n        };\r\n\r\n        let engine = new ActivityExecutionEngine(fop);\r\n\r\n        engine.invoke(fopin)\r\n            .then(function (result) {\r\n                assert(false);\r\n            },\r\n            function (e) {\r\n                assert(e instanceof errors.ActivityRuntimeError);\r\n            }).nodeify(done);\r\n    });\r\n\r\n    it(\"should work as an agument\", function (done) {\r\n        let expected = {name: \"Gabor\"};\r\n\r\n        let fop = activityMarkup.parse(\r\n            {\r\n                \"@func\": {\r\n                    args: {\r\n                        \"@func\": {\r\n                            code: function () {\r\n                                return expected;\r\n                            }\r\n                        }\r\n                    },\r\n                    code: function (obj) {\r\n                        return obj.name;\r\n                    }\r\n                }\r\n            });\r\n\r\n        let engine = new ActivityExecutionEngine(fop);\r\n\r\n        engine.invoke().then(\r\n            function (result) {\r\n                assert.equal(result, expected.name);\r\n            }).nodeify(done);\r\n    });\r\n\r\n    it(\"should include lodash as last argument\", function (done) {\r\n        let expected = {name: \"GaborMezo\"};\r\n\r\n        let fop = activityMarkup.parse(\r\n            {\r\n                \"@func\": {\r\n                    args: {\r\n                        \"@func\": {\r\n                            code: function () {\r\n                                return expected;\r\n                            }\r\n                        }\r\n                    },\r\n                    code: function (obj, __) {\r\n                        return __.camelCase(obj.name);\r\n                    }\r\n                }\r\n            });\r\n\r\n        let engine = new ActivityExecutionEngine(fop);\r\n\r\n        engine.invoke().then(\r\n            function (result) {\r\n                assert.equal(result, _.camelCase(expected.name));\r\n            }).nodeify(done);\r\n    });\r\n\r\n    describe(\"calling other methods\", function () {\r\n        it(\"should run when created from markup\", function (done) {\r\n            let markup = activityMarkup.parse(\r\n                {\r\n                    \"@block\": {\r\n                        id: \"block\",\r\n                        \"code\": {\r\n                            _: function (obj) {\r\n                                return obj.name;\r\n                            }\r\n                        },\r\n                        args: {\r\n                            \"@func\": {\r\n                                code: \"= this.block.code\",\r\n                                args: {name: \"Gabor\"}\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(markup);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, \"Gabor\");\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should run when code is asynchronous\", function (done) {\r\n            let markup = activityMarkup.parse(\r\n                {\r\n                    \"@block\": {\r\n                        id: \"block\",\r\n                        \"code\": {\r\n                            _: function (obj) {\r\n                                return Bluebird.delay(10).then(function () {\r\n                                    return obj.name;\r\n                                });\r\n                            }\r\n                        },\r\n                        args: {\r\n                            \"@func\": {\r\n                                code: \"= this.block.code\",\r\n                                args: {name: \"Gabor\"}\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(markup);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, \"Gabor\");\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should include lodash as last argument\", function (done) {\r\n            let markup = activityMarkup.parse(\r\n                {\r\n                    \"@block\": {\r\n                        id: \"block\",\r\n                        \"code\": {\r\n                            _: function (obj, __) {\r\n                                return Bluebird.delay(10).then(function () {\r\n                                    return __.camelCase(obj.name);\r\n                                });\r\n                            }\r\n                        },\r\n                        args: {\r\n                            \"@func\": {\r\n                                code: \"= this.block.code\",\r\n                                args: {name: \"GaborMezo\"}\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(markup);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, _.camelCase(\"GaborMezo\"));\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should fail with error\", function (done) {\r\n            let markup = activityMarkup.parse(\r\n                {\r\n                    \"@block\": [\r\n                        function () {\r\n                            throw new Error(\"Boo.\");\r\n                        }\r\n                    ]\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(markup);\r\n\r\n            engine.invoke()\r\n                .then(function (result) {\r\n                    assert(false);\r\n                },\r\n                function (e) {\r\n                    assert(/Boo/.test(e.message));\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n});\r\n"],"file":"activities/func.js","sourceRoot":"/source/"}