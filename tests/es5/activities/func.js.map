{"version":3,"names":[],"mappings":"","sources":["activities/func.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet _ = require(\"lodash\");\nlet errors = wf4node.common.errors;\n\ndescribe(\"Func\", function () {\n    it(\"should run with a synchronous code\", function (done) {\n        let fop = new Func();\n        fop.code = function (obj) {\n            return obj.name;\n        };\n\n        let engine = new ActivityExecutionEngine(fop);\n\n        engine.invoke({name: \"Gabor\"}).then(\n            function (result) {\n                assert.equal(result, \"Gabor\");\n            }).nodeify(done);\n    });\n\n    it(\"should run when created from markup\", function (done) {\n        let fop = activityMarkup.parse(\n            {\n                \"@func\": {\n                    code: function (obj) {\n                        return obj.name;\n                    }\n                }\n            });\n\n        let engine = new ActivityExecutionEngine(fop);\n\n        engine.invoke({name: \"Gabor\"}).then(\n            function (result) {\n                assert.equal(result, \"Gabor\");\n            }).nodeify(done);\n    });\n\n    it(\"should run twice\", function (done) {\n        let fop = activityMarkup.parse(\n            {\n                \"@func\": {\n                    code: function (obj) {\n                        return obj.name;\n                    }\n                }\n            });\n\n        let engine = new ActivityExecutionEngine(fop);\n\n        engine.invoke({name: \"Gabor\"})\n            .then(function (result) {\n                assert.equal(result, \"Gabor\");\n                return engine.invoke({name: \"Pisti\"})\n                    .then(function (result2) {\n                        assert.equal(result2, \"Pisti\");\n                    });\n            }).nodeify(done);\n    });\n\n    it(\"should run when code is asynchronous\", function (done) {\n        let fop = new Func();\n        fop.code = function (obj) {\n            return Bluebird.resolve(obj.name);\n        };\n\n        let engine = new ActivityExecutionEngine(fop);\n\n        engine.invoke({name: \"Mezo\"}).then(\n            function (result) {\n                assert.equal(result, \"Mezo\");\n            }).nodeify(done);\n    });\n\n    it(\"should run asynchronously when code is a generator\", function (done) {\n        let fop = Func.async(function* (a) {\n            yield Bluebird.delay(100);\n            return a.name;\n        });\n\n        let engine = new ActivityExecutionEngine(fop);\n\n        engine.invoke({name: \"Mezo\"}).then(\n            function (result) {\n                assert.equal(result, \"Mezo\");\n            }).nodeify(done);\n    });\n\n    it(\"should not accept activities as arguments\", function (done) {\n        let expected = {name: \"Gabor\"};\n        let fop = new Func();\n        fop.code = function (obj) {\n            return obj.name;\n        };\n        let fopin = new Func();\n        fopin.code = function () {\n            return expected;\n        };\n\n        let engine = new ActivityExecutionEngine(fop);\n\n        engine.invoke(fopin)\n            .then(function (result) {\n                assert(false);\n            },\n            function (e) {\n                assert(e instanceof errors.ActivityRuntimeError);\n            }).nodeify(done);\n    });\n\n    it(\"should work as an agument\", function (done) {\n        let expected = {name: \"Gabor\"};\n\n        let fop = activityMarkup.parse(\n            {\n                \"@func\": {\n                    args: {\n                        \"@func\": {\n                            code: function () {\n                                return expected;\n                            }\n                        }\n                    },\n                    code: function (obj) {\n                        return obj.name;\n                    }\n                }\n            });\n\n        let engine = new ActivityExecutionEngine(fop);\n\n        engine.invoke().then(\n            function (result) {\n                assert.equal(result, expected.name);\n            }).nodeify(done);\n    });\n\n    it(\"should include lodash as last argument\", function (done) {\n        let expected = {name: \"GaborMezo\"};\n\n        let fop = activityMarkup.parse(\n            {\n                \"@func\": {\n                    args: {\n                        \"@func\": {\n                            code: function () {\n                                return expected;\n                            }\n                        }\n                    },\n                    code: function (obj, __) {\n                        return __.camelCase(obj.name);\n                    }\n                }\n            });\n\n        let engine = new ActivityExecutionEngine(fop);\n\n        engine.invoke().then(\n            function (result) {\n                assert.equal(result, _.camelCase(expected.name));\n            }).nodeify(done);\n    });\n\n    describe(\"calling other methods\", function () {\n        it(\"should run when created from markup\", function (done) {\n            let markup = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        id: \"block\",\n                        \"code\": {\n                            _: function (obj) {\n                                return obj.name;\n                            }\n                        },\n                        args: {\n                            \"@func\": {\n                                code: \"= this.block.code\",\n                                args: {name: \"Gabor\"}\n                            }\n                        }\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(markup);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, \"Gabor\");\n                }).nodeify(done);\n        });\n\n        it(\"should run when code is asynchronous\", function (done) {\n            let markup = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        id: \"block\",\n                        \"code\": {\n                            _: function (obj) {\n                                return Bluebird.delay(10).then(function () {\n                                    return obj.name;\n                                });\n                            }\n                        },\n                        args: {\n                            \"@func\": {\n                                code: \"= this.block.code\",\n                                args: {name: \"Gabor\"}\n                            }\n                        }\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(markup);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, \"Gabor\");\n                }).nodeify(done);\n        });\n\n        it(\"should include lodash as last argument\", function (done) {\n            let markup = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        id: \"block\",\n                        \"code\": {\n                            _: function (obj, __) {\n                                return Bluebird.delay(10).then(function () {\n                                    return __.camelCase(obj.name);\n                                });\n                            }\n                        },\n                        args: {\n                            \"@func\": {\n                                code: \"= this.block.code\",\n                                args: {name: \"GaborMezo\"}\n                            }\n                        }\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(markup);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, _.camelCase(\"GaborMezo\"));\n                }).nodeify(done);\n        });\n\n        it(\"should fail with error\", function (done) {\n            let markup = activityMarkup.parse(\n                {\n                    \"@block\": [\n                        function () {\n                            throw new Error(\"Boo.\");\n                        }\n                    ]\n                });\n\n            let engine = new ActivityExecutionEngine(markup);\n\n            engine.invoke()\n                .then(function (result) {\n                    assert(false);\n                },\n                function (e) {\n                    assert(/Boo/.test(e.message));\n                }).nodeify(done);\n        });\n    });\n});\n"],"file":"activities/func.js","sourceRoot":"/source/"}