{"version":3,"names":[],"mappings":"","sources":["activities/expressions.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet Block = wf4node.activities.Block;\nlet _ = require(\"lodash\");\nlet Expression = wf4node.activities.Expression;\n\ndescribe(\"expressions\", function () {\n    describe(\"Expression\", function () {\n        it(\"should multiply two numbers\", function (done) {\n            let expr = new Expression();\n            expr.expr = \"this.v * this.v\";\n            let block = new Block();\n            block.v = 2;\n            block.args = [expr];\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 4);\n                }).nodeify(done);\n        });\n\n        it(\"should works from markup\", function (done) {\n            let block = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        v: 2,\n                        args: [\n                            \"= this.v * this.v\"\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 4);\n                }).nodeify(done);\n        });\n\n        it(\"should access parent\", function (done) {\n            let block = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        v: 2,\n                        args: [\n                            {\n                                \"@func\": {\n                                    args: [ \"= this.v\", \"= this.$parent.v  \" ],\n                                    code: function(a, b) {\n                                        return a + b;\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 4);\n                }).nodeify(done);\n        });\n\n        it(\"should evaluate lodash\", function (done) {\n            let block = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        id: \"me\",\n                        v: 2.11,\n                        args: [\n                            {\n                                \"@func\": {\n                                    args: [ \"= this.v\", \"= this.$parent.v  \", \"= _.round(this.me.v)\" ],\n                                    code: function(a, b, c) {\n                                        return a + b + c;\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 2.11 + 2.11 + 2);\n                }).nodeify(done);\n        });\n    });\n});"],"file":"activities/expressions.js","sourceRoot":"/source/"}