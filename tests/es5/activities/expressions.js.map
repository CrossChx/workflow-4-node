{"version":3,"names":[],"mappings":"","sources":["activities/expressions.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet Func = wf4node.activities.Func;\r\nlet activityMarkup = wf4node.activities.activityMarkup;\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet assert = require(\"assert\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet Block = wf4node.activities.Block;\r\nlet _ = require(\"lodash\");\r\nlet Expression = wf4node.activities.Expression;\r\n\r\ndescribe(\"expressions\", function () {\r\n    describe(\"Expression\", function () {\r\n        it(\"should multiply two numbers\", function (done) {\r\n            let expr = new Expression();\r\n            expr.expr = \"this.v * this.v\";\r\n            let block = new Block();\r\n            block.v = 2;\r\n            block.args = [expr];\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, 4);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should works from markup\", function (done) {\r\n            let block = activityMarkup.parse(\r\n                {\r\n                    \"@block\": {\r\n                        v: 2,\r\n                        args: [\r\n                            \"= this.v * this.v\"\r\n                        ]\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, 4);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should access parent\", function (done) {\r\n            let block = activityMarkup.parse(\r\n                {\r\n                    \"@block\": {\r\n                        v: 2,\r\n                        args: [\r\n                            {\r\n                                \"@func\": {\r\n                                    args: [ \"= this.v\", \"= this.$parent.v  \" ],\r\n                                    code: function(a, b) {\r\n                                        return a + b;\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, 4);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should evaluate lodash\", function (done) {\r\n            let block = activityMarkup.parse(\r\n                {\r\n                    \"@block\": {\r\n                        id: \"me\",\r\n                        v: 2.11,\r\n                        args: [\r\n                            {\r\n                                \"@func\": {\r\n                                    args: [ \"= this.v\", \"= this.$parent.v  \", \"= _.round(this.me.v)\" ],\r\n                                    code: function(a, b, c) {\r\n                                        return a + b + c;\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, 2.11 + 2.11 + 2);\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n});"],"file":"activities/expressions.js","sourceRoot":"/source/"}