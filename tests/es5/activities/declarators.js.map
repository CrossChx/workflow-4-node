{"version":3,"names":[],"mappings":"","sources":["activities/declarators.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet Block = wf4node.activities.Block;\nlet _ = require(\"lodash\");\n\ndescribe(\"declarators\", function () {\n    describe(\"Block\", function () {\n        it(\"should handle variables well\", function (done) {\n            let block = new Block();\n            block.let1 = 1;\n            block.let2 = 2;\n            block.let3 = 3;\n\n            let f1 = new Func();\n            f1.code = function () {\n                return this.let3 = (this.let3 + this.let1 * 2);\n            };\n\n            let f2 = new Func();\n            f2.code = function () {\n                return this.let3 = (this.let3 + this.let2 * 3);\n            };\n\n            let f3 = new Func();\n            f3.code = function () {\n                return this.let3 * 4;\n            };\n\n            block.args = [f1, f2, f3];\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    let x1 = 1;\n                    let x2 = 2;\n                    let x3 = 3;\n                    x3 += x1 * 2;\n                    x3 += x2 * 3;\n                    let r = x3 * 4;\n                    assert.equal(result, r);\n                }).nodeify(done);\n        });\n\n        it(\"can be generated from markup\", function (done) {\n            let block = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        let1: 1,\n                        let2: {\n                            \"@func\": {\n                                code: function () {\n                                    return 2;\n                                }\n                            }\n                        },\n                        let3: 3,\n                        args: [\n                            {\n                                \"@func\": {\n                                    code: function bubu() {\n                                        return this.let3 += this.let1 * 2;\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: function kittyfuck() {\n                                        return this.let3 += this.let2 * 3;\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return this.let3 * 4;\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    let x1 = 1;\n                    let x2 = 2;\n                    let x3 = 3;\n                    x3 += x1 * 2;\n                    x3 += x2 * 3;\n                    let r = x3 * 4;\n                    assert.equal(result, r);\n                }).nodeify(done);\n        });\n\n        it(\"can be generated from markup string\", function (done) {\n            let markup = {\n                \"@block\": {\n                    let1: 1,\n                    let2: 2,\n                    let3: 3,\n                    args: [\n                        {\n                            \"@func\": {\n                                code: function bubu() {\n                                    return this.let3 = this.let3 + this.let1 * 2;\n                                }\n                            }\n                        },\n                        {\n                            \"@func\": {\n                                code: function kittyfuck() {\n                                    return this.let3 = this.let3 + this.let2 * 3;\n                                }\n                            }\n                        },\n                        {\n                            \"@func\": {\n                                code: function () {\n                                    return this.let3 * 4;\n                                }\n                            }\n                        }\n                    ]\n                }\n            };\n\n            let markupString = activityMarkup.stringify(markup);\n            assert.ok(_.isString(markupString));\n            let block = activityMarkup.parse(markupString);\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    let x1 = 1;\n                    let x2 = 2;\n                    let x3 = 3;\n                    x3 += x1 * 2;\n                    x3 += x2 * 3;\n                    let r = x3 * 4;\n                    assert.equal(result, r);\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Parallel\", function () {\n        it(\"should work as expected with sync activities\", function (done) {\n            let activity = activityMarkup.parse(\n                {\n                    \"@parallel\": {\n                        let1: \"\",\n                        args: [\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return this.let1 += \"a\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: 'function() { return this.let1 += \"b\"; }'\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(activity);\n            //engine.addTracker(new ConsoleTracker());\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result.length, 2);\n                    assert.equal(result[0], \"a\");\n                    assert.equal(result[1], \"ab\");\n                }).nodeify(done);\n        });\n\n        it(\"should work as expected with async activities\", function (done) {\n            let activity = activityMarkup.parse(\n                {\n                    \"@parallel\": {\n                        let1: \"\",\n                        args: [\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return this.let1 += \"a\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: 'function() { return this.let1 += \"b\"; }'\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return Bluebird.delay(100).then(function () {\n                                            return 42;\n                                        });\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return new Bluebird(function (resolve, reject) {\n                                            setImmediate(function () {\n                                                resolve(0);\n                                            });\n                                        });\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(activity);\n            //engine.addTracker(new ConsoleTracker());\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result.length, 4);\n                    assert.equal(result[0], \"a\");\n                    assert.equal(result[1], \"ab\");\n                    assert.equal(result[2], 42);\n                    assert.equal(result[3], 0);\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Pick\", function () {\n        it(\"should work as expected with sync activities\", function (done) {\n            let activity = activityMarkup.parse(\n                {\n                    \"@pick\": {\n                        let1: \"\",\n                        args: [\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return this.let1 += \"a\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: 'function() { return this.let1 += \"b\"; }'\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(activity);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, \"a\");\n                }).nodeify(done);\n        });\n\n        it(\"should work as expected with async activities\", function (done) {\n            let activity = activityMarkup.parse(\n                {\n                    \"@pick\": [\n                        {\n                            \"@func\": {\n                                code: function () {\n                                    return Bluebird.delay(100).then(function () {\n                                        return 42;\n                                    });\n                                }\n                            }\n                        },\n                        {\n                            \"@func\": {\n                                code: function () {\n                                    return new Bluebird(function (resolve, reject) {\n                                        setImmediate(function () {\n                                            resolve(0);\n                                        });\n                                    });\n                                }\n                            }\n                        }\n                    ]\n                });\n\n            let engine = new ActivityExecutionEngine(activity);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 0);\n                }).nodeify(done);\n        });\n    });\n});\n"],"file":"activities/declarators.js","sourceRoot":"/source/"}