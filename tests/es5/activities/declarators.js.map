{"version":3,"sources":["activities/declarators.js"],"names":[],"mappings":"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","file":"activities/declarators.js","sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet Block = wf4node.activities.Block;\nlet _ = require(\"lodash\");\n\ndescribe(\"declarators\", function () {\n    describe(\"Block\", function () {\n        it(\"should handle variables well\", function (done) {\n            let block = new Block();\n            block.let1 = 1;\n            block.let2 = 2;\n            block.let3 = 3;\n\n            let f1 = new Func();\n            f1.code = function () {\n                return (this.let3 = (this.let3 + this.let1 * 2));\n            };\n\n            let f2 = new Func();\n            f2.code = function () {\n                return (this.let3 = (this.let3 + this.let2 * 3));\n            };\n\n            let f3 = new Func();\n            f3.code = function () {\n                return this.let3 * 4;\n            };\n\n            block.args = [f1, f2, f3];\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    let x1 = 1;\n                    let x2 = 2;\n                    let x3 = 3;\n                    x3 += x1 * 2;\n                    x3 += x2 * 3;\n                    let r = x3 * 4;\n                    assert.equal(result, r);\n                }).nodeify(done);\n        });\n\n        it(\"can be generated from markup\", function (done) {\n            let block = activityMarkup.parse(\n                {\n                    \"@block\": {\n                        let1: 1,\n                        let2: {\n                            \"@func\": {\n                                code: function () {\n                                    return 2;\n                                }\n                            }\n                        },\n                        let3: 3,\n                        args: [\n                            {\n                                \"@func\": {\n                                    code: function bubu() {\n                                        return this.let3 += this.let1 * 2;\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: function kittyfuck() {\n                                        return this.let3 += this.let2 * 3;\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return this.let3 * 4;\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    let x1 = 1;\n                    let x2 = 2;\n                    let x3 = 3;\n                    x3 += x1 * 2;\n                    x3 += x2 * 3;\n                    let r = x3 * 4;\n                    assert.equal(result, r);\n                }).nodeify(done);\n        });\n\n        it(\"can be generated from markup string\", function (done) {\n            let markup = {\n                \"@block\": {\n                    let1: 1,\n                    let2: 2,\n                    let3: 3,\n                    args: [\n                        {\n                            \"@func\": {\n                                code: function bubu() {\n                                    return (this.let3 = this.let3 + this.let1 * 2);\n                                }\n                            }\n                        },\n                        {\n                            \"@func\": {\n                                code: function kittyfuck() {\n                                    return (this.let3 = this.let3 + this.let2 * 3);\n                                }\n                            }\n                        },\n                        {\n                            \"@func\": {\n                                code: function () {\n                                    return this.let3 * 4;\n                                }\n                            }\n                        }\n                    ]\n                }\n            };\n\n            let markupString = activityMarkup.stringify(markup);\n            assert.ok(_.isString(markupString));\n            let block = activityMarkup.parse(markupString);\n\n            let engine = new ActivityExecutionEngine(block);\n\n            engine.invoke().then(\n                function (result) {\n                    let x1 = 1;\n                    let x2 = 2;\n                    let x3 = 3;\n                    x3 += x1 * 2;\n                    x3 += x2 * 3;\n                    let r = x3 * 4;\n                    assert.equal(result, r);\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Parallel\", function () {\n        it(\"should work as expected with sync activities\", function (done) {\n            let activity = activityMarkup.parse(\n                {\n                    \"@parallel\": {\n                        let1: \"\",\n                        args: [\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return this.let1 += \"a\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: 'function() { return this.let1 += \"b\"; }'\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(activity);\n            //engine.addTracker(new ConsoleTracker());\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result.length, 2);\n                    assert.equal(result[0], \"a\");\n                    assert.equal(result[1], \"ab\");\n                }).nodeify(done);\n        });\n\n        it(\"should work as expected with async activities\", function (done) {\n            let activity = activityMarkup.parse(\n                {\n                    \"@parallel\": {\n                        let1: \"\",\n                        args: [\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return this.let1 += \"a\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: 'function() { return this.let1 += \"b\"; }'\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return Bluebird.delay(100).then(function () {\n                                            return 42;\n                                        });\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return new Bluebird(function (resolve, reject) {\n                                            setImmediate(function () {\n                                                resolve(0);\n                                            });\n                                        });\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(activity);\n            //engine.addTracker(new ConsoleTracker());\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result.length, 4);\n                    assert.equal(result[0], \"a\");\n                    assert.equal(result[1], \"ab\");\n                    assert.equal(result[2], 42);\n                    assert.equal(result[3], 0);\n                }).nodeify(done);\n        });\n    });\n\n    describe(\"Pick\", function () {\n        it(\"should work as expected with sync activities\", function (done) {\n            let activity = activityMarkup.parse(\n                {\n                    \"@pick\": {\n                        let1: \"\",\n                        args: [\n                            {\n                                \"@func\": {\n                                    code: function () {\n                                        return this.let1 += \"a\";\n                                    }\n                                }\n                            },\n                            {\n                                \"@func\": {\n                                    code: 'function() { return this.let1 += \"b\"; }'\n                                }\n                            }\n                        ]\n                    }\n                });\n\n            let engine = new ActivityExecutionEngine(activity);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, \"a\");\n                }).nodeify(done);\n        });\n\n        it(\"should work as expected with async activities\", function (done) {\n            let activity = activityMarkup.parse(\n                {\n                    \"@pick\": [\n                        {\n                            \"@func\": {\n                                code: function () {\n                                    return Bluebird.delay(100).then(function () {\n                                        return 42;\n                                    });\n                                }\n                            }\n                        },\n                        {\n                            \"@func\": {\n                                code: function () {\n                                    return new Bluebird(function (resolve, reject) {\n                                        setImmediate(function () {\n                                            resolve(0);\n                                        });\n                                    });\n                                }\n                            }\n                        }\n                    ]\n                });\n\n            let engine = new ActivityExecutionEngine(activity);\n\n            engine.invoke().then(\n                function (result) {\n                    assert.equal(result, 0);\n                }).nodeify(done);\n        });\n    });\n});\n"],"sourceRoot":"/source/"}