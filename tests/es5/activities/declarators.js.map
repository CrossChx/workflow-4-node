{"version":3,"names":[],"mappings":"","sources":["activities/declarators.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet Func = wf4node.activities.Func;\r\nlet activityMarkup = wf4node.activities.activityMarkup;\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet assert = require(\"assert\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet Block = wf4node.activities.Block;\r\nlet _ = require(\"lodash\");\r\n\r\ndescribe(\"declarators\", function () {\r\n    describe(\"Block\", function () {\r\n        it(\"should handle variables well\", function (done) {\r\n            let block = new Block();\r\n            block.let1 = 1;\r\n            block.let2 = 2;\r\n            block.let3 = 3;\r\n\r\n            let f1 = new Func();\r\n            f1.code = function () {\r\n                return (this.let3 = (this.let3 + this.let1 * 2));\r\n            };\r\n\r\n            let f2 = new Func();\r\n            f2.code = function () {\r\n                return (this.let3 = (this.let3 + this.let2 * 3));\r\n            };\r\n\r\n            let f3 = new Func();\r\n            f3.code = function () {\r\n                return this.let3 * 4;\r\n            };\r\n\r\n            block.args = [f1, f2, f3];\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    let x1 = 1;\r\n                    let x2 = 2;\r\n                    let x3 = 3;\r\n                    x3 += x1 * 2;\r\n                    x3 += x2 * 3;\r\n                    let r = x3 * 4;\r\n                    assert.equal(result, r);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"can be generated from markup\", function (done) {\r\n            let block = activityMarkup.parse(\r\n                {\r\n                    \"@block\": {\r\n                        let1: 1,\r\n                        let2: {\r\n                            \"@func\": {\r\n                                code: function () {\r\n                                    return 2;\r\n                                }\r\n                            }\r\n                        },\r\n                        let3: 3,\r\n                        args: [\r\n                            {\r\n                                \"@func\": {\r\n                                    code: function bubu() {\r\n                                        return this.let3 += this.let1 * 2;\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@func\": {\r\n                                    code: function kittyfuck() {\r\n                                        return this.let3 += this.let2 * 3;\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return this.let3 * 4;\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    let x1 = 1;\r\n                    let x2 = 2;\r\n                    let x3 = 3;\r\n                    x3 += x1 * 2;\r\n                    x3 += x2 * 3;\r\n                    let r = x3 * 4;\r\n                    assert.equal(result, r);\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"can be generated from markup string\", function (done) {\r\n            let markup = {\r\n                \"@block\": {\r\n                    let1: 1,\r\n                    let2: 2,\r\n                    let3: 3,\r\n                    args: [\r\n                        {\r\n                            \"@func\": {\r\n                                code: function bubu() {\r\n                                    return (this.let3 = this.let3 + this.let1 * 2);\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"@func\": {\r\n                                code: function kittyfuck() {\r\n                                    return (this.let3 = this.let3 + this.let2 * 3);\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"@func\": {\r\n                                code: function () {\r\n                                    return this.let3 * 4;\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n\r\n            let markupString = activityMarkup.stringify(markup);\r\n            assert.ok(_.isString(markupString));\r\n            let block = activityMarkup.parse(markupString);\r\n\r\n            let engine = new ActivityExecutionEngine(block);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    let x1 = 1;\r\n                    let x2 = 2;\r\n                    let x3 = 3;\r\n                    x3 += x1 * 2;\r\n                    x3 += x2 * 3;\r\n                    let r = x3 * 4;\r\n                    assert.equal(result, r);\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"Parallel\", function () {\r\n        it(\"should work as expected with sync activities\", function (done) {\r\n            let activity = activityMarkup.parse(\r\n                {\r\n                    \"@parallel\": {\r\n                        let1: \"\",\r\n                        args: [\r\n                            {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return this.let1 += \"a\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@func\": {\r\n                                    code: 'function() { return this.let1 += \"b\"; }'\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(activity);\r\n            //engine.addTracker(new ConsoleTracker());\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result.length, 2);\r\n                    assert.equal(result[0], \"a\");\r\n                    assert.equal(result[1], \"ab\");\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should work as expected with async activities\", function (done) {\r\n            let activity = activityMarkup.parse(\r\n                {\r\n                    \"@parallel\": {\r\n                        let1: \"\",\r\n                        args: [\r\n                            {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return this.let1 += \"a\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@func\": {\r\n                                    code: 'function() { return this.let1 += \"b\"; }'\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return Bluebird.delay(100).then(function () {\r\n                                            return 42;\r\n                                        });\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return new Bluebird(function (resolve, reject) {\r\n                                            setImmediate(function () {\r\n                                                resolve(0);\r\n                                            });\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(activity);\r\n            //engine.addTracker(new ConsoleTracker());\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result.length, 4);\r\n                    assert.equal(result[0], \"a\");\r\n                    assert.equal(result[1], \"ab\");\r\n                    assert.equal(result[2], 42);\r\n                    assert.equal(result[3], 0);\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"Pick\", function () {\r\n        it(\"should work as expected with sync activities\", function (done) {\r\n            let activity = activityMarkup.parse(\r\n                {\r\n                    \"@pick\": {\r\n                        let1: \"\",\r\n                        args: [\r\n                            {\r\n                                \"@func\": {\r\n                                    code: function () {\r\n                                        return this.let1 += \"a\";\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@func\": {\r\n                                    code: 'function() { return this.let1 += \"b\"; }'\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(activity);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, \"a\");\r\n                }).nodeify(done);\r\n        });\r\n\r\n        it(\"should work as expected with async activities\", function (done) {\r\n            let activity = activityMarkup.parse(\r\n                {\r\n                    \"@pick\": [\r\n                        {\r\n                            \"@func\": {\r\n                                code: function () {\r\n                                    return Bluebird.delay(100).then(function () {\r\n                                        return 42;\r\n                                    });\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"@func\": {\r\n                                code: function () {\r\n                                    return new Bluebird(function (resolve, reject) {\r\n                                        setImmediate(function () {\r\n                                            resolve(0);\r\n                                        });\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                });\r\n\r\n            let engine = new ActivityExecutionEngine(activity);\r\n\r\n            engine.invoke().then(\r\n                function (result) {\r\n                    assert.equal(result, 0);\r\n                }).nodeify(done);\r\n        });\r\n    });\r\n});\r\n"],"file":"activities/declarators.js","sourceRoot":"/source/"}