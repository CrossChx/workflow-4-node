{"version":3,"sources":["activities/exceptions.js"],"names":[],"mappings":"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","file":"activities/exceptions.js","sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"better-assert\");\nlet Bluebird = require(\"bluebird\");\nlet _ = require(\"lodash\");\nlet async = wf4node.common.asyncHelpers.async;\n\ndescribe(\"exceptions\", function () {\n    describe(\"Throw\", function () {\n        it(\"should throw errors\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@throw\": {\n                                error: function () {\n                                    return new TypeError(\"foo\");\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof TypeError);\n                    assert(e.message === \"foo\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n\n        it(\"should throw strings as errors\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@throw\": {\n                                error: \"foo\"\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof Error);\n                    assert(e.message === \"foo\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n    });\n\n    describe(\"Try\", function () {\n        it(\"should catch code errors\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    r: null,\n                    f: null,\n                    tr: null,\n                    args: [\n                        {\n                            \"@try\": {\n                                \"@to\": \"tr\",\n                                args: [\n                                    function () {\n                                        throw new Error(\"foo\");\n                                    }\n                                ],\n                                catch: [\n                                    {\n                                        \"@assign\": {\n                                            to: \"r\",\n                                            value: \"= this.e\"\n                                        }\n                                    },\n                                    55\n                                ],\n                                finally: {\n                                    \"@assign\": {\n                                        to: \"f\",\n                                        value: \"OK\"\n                                    }\n                                }\n                            }\n                        },\n                        \"= {r: this.r, f: this.f, tr: this.tr }\"\n                    ]\n                }\n            });\n\n            async(function*() {\n                let status = yield engine.invoke();\n                assert(_.isPlainObject(status));\n                assert(status.r instanceof Error);\n                assert(status.r.message === \"foo\");\n                assert(status.tr === 55);\n                assert(status.f === \"OK\");\n            })().nodeify(done);\n        });\n\n        it(\"should catch Throw errors\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    r: null,\n                    f: null,\n                    tr: null,\n                    OK: \"OK\",\n                    args: [\n                        {\n                            \"@try\": {\n                                \"@to\": \"tr\",\n                                args: [\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ],\n                                catch: [\n                                    {\n                                        \"@assign\": {\n                                            to: \"r\",\n                                            value: \"= this.e\"\n                                        }\n                                    },\n                                    55\n                                ],\n                                finally: [\n                                    {\n                                        \"@assign\": {\n                                            to: \"f\",\n                                            value: \"= this.OK\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"= {r: this.r, f: this.f, tr: this.tr }\"\n                    ]\n                }\n            });\n\n            async(function*() {\n                let status = yield engine.invoke();\n                assert(_.isPlainObject(status));\n                assert(status.r instanceof Error);\n                assert(status.r.message === \"foo\");\n                assert(status.tr === 55);\n                assert(status.f === \"OK\");\n            })().nodeify(done);\n        });\n\n        it(\"should throw errors when there is finally only\", function (done) {\n            let x = null;\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@try\": {\n                                args: [\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ],\n                                finally: function () {\n                                    x = \"OK\";\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof Error);\n                    assert(e.message === \"foo\");\n                    assert(x === \"OK\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n\n        it(\"should rethrow current error\", function (done) {\n            let ge = null;\n            let gf = null;\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@try\": {\n                                args: [\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ],\n                                catch: [\n                                    function () {\n                                        ge = this.e;\n                                    },\n                                    {\n                                        \"@throw\": {}\n                                    }\n                                ],\n                                finally: function () {\n                                    gf = \"OK\";\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof Error);\n                    assert(e.message === \"foo\");\n                    assert(ge === e);\n                    assert(gf === \"OK\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n\n        it(\"should rethrow a new error\", function (done) {\n            let ge = null;\n            let gf = null;\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@try\": {\n                                args: [\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ],\n                                catch: [\n                                    function () {\n                                        ge = this.e;\n                                    },\n                                    {\n                                        \"@throw\": {\n                                            error: \"= this.e.message + 'pupu'\"\n                                        }\n                                    }\n                                ],\n                                finally: function () {\n                                    gf = \"OK\";\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof Error);\n                    assert(e.message === \"foopupu\");\n                    assert(ge instanceof Error);\n                    assert(ge.message === \"foo\");\n                    assert(gf === \"OK\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n\n        it(\"should catch a rethrown error in a custom varname\", function (done) {\n            let ge = null;\n            let gf = null;\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@try\": {\n                                varName: \"err\",\n                                args: {\n                                    \"@try\": {\n                                        args: [\n                                            {\n                                                \"@throw\": {\n                                                    error: \"foo\"\n                                                }\n                                            }\n                                        ],\n                                        catch: [\n                                            function () {\n                                                ge = this.e;\n                                            },\n                                            {\n                                                \"@throw\": {\n                                                    error: \"= this.e.message + 'pupu'\"\n                                                }\n                                            }\n                                        ],\n                                        finally: function () {\n                                            gf = \"OK\";\n                                        }\n                                    }\n                                },\n                                catch: [\"= this.err\"]\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                let e = yield engine.invoke();\n                assert(e instanceof Error);\n                assert(e.message === \"foopupu\");\n                assert(ge instanceof Error);\n                assert(ge.message === \"foo\");\n                assert(gf === \"OK\");\n            })().nodeify(done);\n        });\n    });\n\n    describe(\"behavior\", function () {\n        it(\"should cancel other branches\", function (done) {\n            async(function*() {\n                let x = false;\n                let engine = new ActivityExecutionEngine({\n                    \"@parallel\": {\n                        args: [\n                            function() {\n                                return Bluebird.delay(200).then(function() {\n                                    throw new Error(\"b+\");\n                                });\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 200\n                                        }\n                                    },\n                                    function () {\n                                        x = true;\n                                    }\n                                ]\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 100\n                                        }\n                                    },\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ]\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 50\n                                        }\n                                    },\n                                    {\n                                        \"@throw\": {\n                                            error: \"boo\"\n                                        }\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                });\n\n                try {\n                    yield engine.invoke();\n                    assert(false);\n                }\n                catch (e) {\n                    assert(e.message === \"boo\");\n                    assert(!x);\n                }\n            })().nodeify(done);\n        });\n    });\n});"],"sourceRoot":"/source/"}