{"version":3,"names":[],"mappings":"","sources":["activities/exceptions.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"better-assert\");\nlet Bluebird = require(\"bluebird\");\nlet _ = require(\"lodash\");\nlet async = wf4node.common.asyncHelpers.async;\n\ndescribe(\"exceptions\", function () {\n    describe(\"Throw\", function () {\n        it(\"should throw errors\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@throw\": {\n                                error: function () {\n                                    return new TypeError(\"foo\");\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof TypeError);\n                    assert(e.message === \"foo\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n\n        it(\"should throw strings as errors\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@throw\": {\n                                error: \"foo\"\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof Error);\n                    assert(e.message === \"foo\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n    });\n\n    describe(\"Try\", function () {\n        it(\"should catch code errors\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    r: null,\n                    f: null,\n                    tr: null,\n                    args: [\n                        {\n                            \"@try\": {\n                                \"@to\": \"tr\",\n                                args: [\n                                    function () {\n                                        throw new Error(\"foo\");\n                                    }\n                                ],\n                                catch: [\n                                    {\n                                        \"@assign\": {\n                                            to: \"r\",\n                                            value: \"= this.e\"\n                                        }\n                                    },\n                                    55\n                                ],\n                                finally: {\n                                    \"@assign\": {\n                                        to: \"f\",\n                                        value: \"OK\"\n                                    }\n                                }\n                            }\n                        },\n                        \"= {r: this.r, f: this.f, tr: this.tr }\"\n                    ]\n                }\n            });\n\n            async(function*() {\n                let status = yield engine.invoke();\n                assert(_.isPlainObject(status));\n                assert(status.r instanceof Error);\n                assert(status.r.message === \"foo\");\n                assert(status.tr === 55);\n                assert(status.f === \"OK\");\n            })().nodeify(done);\n        });\n\n        it(\"should catch Throw errors\", function (done) {\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    r: null,\n                    f: null,\n                    tr: null,\n                    OK: \"OK\",\n                    args: [\n                        {\n                            \"@try\": {\n                                \"@to\": \"tr\",\n                                args: [\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ],\n                                catch: [\n                                    {\n                                        \"@assign\": {\n                                            to: \"r\",\n                                            value: \"= this.e\"\n                                        }\n                                    },\n                                    55\n                                ],\n                                finally: [\n                                    {\n                                        \"@assign\": {\n                                            to: \"f\",\n                                            value: \"= this.OK\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"= {r: this.r, f: this.f, tr: this.tr }\"\n                    ]\n                }\n            });\n\n            async(function*() {\n                let status = yield engine.invoke();\n                assert(_.isPlainObject(status));\n                assert(status.r instanceof Error);\n                assert(status.r.message === \"foo\");\n                assert(status.tr === 55);\n                assert(status.f === \"OK\");\n            })().nodeify(done);\n        });\n\n        it(\"should throw errors when there is finally only\", function (done) {\n            let x = null;\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@try\": {\n                                args: [\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ],\n                                finally: function () {\n                                    x = \"OK\";\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof Error);\n                    assert(e.message === \"foo\");\n                    assert(x === \"OK\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n\n        it(\"should rethrow current error\", function (done) {\n            let ge = null;\n            let gf = null;\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@try\": {\n                                args: [\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ],\n                                catch: [\n                                    function () {\n                                        ge = this.e;\n                                    },\n                                    {\n                                        \"@throw\": {}\n                                    }\n                                ],\n                                finally: function () {\n                                    gf = \"OK\";\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof Error);\n                    assert(e.message === \"foo\");\n                    assert(ge === e);\n                    assert(gf === \"OK\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n\n        it(\"should rethrow a new error\", function (done) {\n            let ge = null;\n            let gf = null;\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@try\": {\n                                args: [\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ],\n                                catch: [\n                                    function () {\n                                        ge = this.e;\n                                    },\n                                    {\n                                        \"@throw\": {\n                                            error: \"= this.e.message + 'pupu'\"\n                                        }\n                                    }\n                                ],\n                                finally: function () {\n                                    gf = \"OK\";\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                try {\n                    yield engine.invoke();\n                }\n                catch (e) {\n                    assert(e instanceof Error);\n                    assert(e.message === \"foopupu\");\n                    assert(ge instanceof Error);\n                    assert(ge.message === \"foo\");\n                    assert(gf === \"OK\");\n                    return;\n                }\n                assert(false);\n            })().nodeify(done);\n        });\n\n        it(\"should catch a rethrown error in a custom varname\", function (done) {\n            let ge = null;\n            let gf = null;\n            let engine = new ActivityExecutionEngine({\n                \"@block\": {\n                    args: [\n                        {\n                            \"@try\": {\n                                varName: \"err\",\n                                args: {\n                                    \"@try\": {\n                                        args: [\n                                            {\n                                                \"@throw\": {\n                                                    error: \"foo\"\n                                                }\n                                            }\n                                        ],\n                                        catch: [\n                                            function () {\n                                                ge = this.e;\n                                            },\n                                            {\n                                                \"@throw\": {\n                                                    error: \"= this.e.message + 'pupu'\"\n                                                }\n                                            }\n                                        ],\n                                        finally: function () {\n                                            gf = \"OK\";\n                                        }\n                                    }\n                                },\n                                catch: [\"= this.err\"]\n                            }\n                        }\n                    ]\n                }\n            });\n\n            async(function*() {\n                let e = yield engine.invoke();\n                assert(e instanceof Error);\n                assert(e.message === \"foopupu\");\n                assert(ge instanceof Error);\n                assert(ge.message === \"foo\");\n                assert(gf === \"OK\");\n            })().nodeify(done);\n        });\n    });\n\n    describe(\"behavior\", function () {\n        it(\"should cancel other branches\", function (done) {\n            async(function*() {\n                let x = false;\n                let engine = new ActivityExecutionEngine({\n                    \"@parallel\": {\n                        args: [\n                            function() {\n                                return Bluebird.delay(200).then(function() {\n                                    throw new Error(\"b+\");\n                                });\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 200\n                                        }\n                                    },\n                                    function () {\n                                        x = true;\n                                    }\n                                ]\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 100\n                                        }\n                                    },\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ]\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 50\n                                        }\n                                    },\n                                    {\n                                        \"@throw\": {\n                                            error: \"boo\"\n                                        }\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                });\n\n                try {\n                    yield engine.invoke();\n                    assert(false);\n                }\n                catch (e) {\n                    assert(e.message === \"boo\");\n                    assert(!x);\n                }\n            })().nodeify(done);\n        });\n    });\n});"],"file":"activities/exceptions.js","sourceRoot":"/source/"}