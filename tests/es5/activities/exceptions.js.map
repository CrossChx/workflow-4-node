{"version":3,"names":[],"mappings":"","sources":["activities/exceptions.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet Func = wf4node.activities.Func;\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet assert = require(\"better-assert\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet _ = require(\"lodash\");\r\nlet async = wf4node.common.asyncHelpers.async;\r\n\r\ndescribe(\"exceptions\", function () {\r\n    describe(\"Throw\", function () {\r\n        it(\"should throw errors\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    args: [\r\n                        {\r\n                            \"@throw\": {\r\n                                error: function () {\r\n                                    return new TypeError(\"foo\");\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            async(function*() {\r\n                try {\r\n                    yield engine.invoke();\r\n                }\r\n                catch (e) {\r\n                    assert(e instanceof TypeError);\r\n                    assert(e.message === \"foo\");\r\n                    return;\r\n                }\r\n                assert(false);\r\n            })().nodeify(done);\r\n        });\r\n\r\n        it(\"should throw strings as errors\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    args: [\r\n                        {\r\n                            \"@throw\": {\r\n                                error: \"foo\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            async(function*() {\r\n                try {\r\n                    yield engine.invoke();\r\n                }\r\n                catch (e) {\r\n                    assert(e instanceof Error);\r\n                    assert(e.message === \"foo\");\r\n                    return;\r\n                }\r\n                assert(false);\r\n            })().nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"Try\", function () {\r\n        it(\"should catch code errors\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    r: null,\r\n                    f: null,\r\n                    tr: null,\r\n                    args: [\r\n                        {\r\n                            \"@try\": {\r\n                                \"@to\": \"tr\",\r\n                                args: [\r\n                                    function () {\r\n                                        throw new Error(\"foo\");\r\n                                    }\r\n                                ],\r\n                                catch: [\r\n                                    {\r\n                                        \"@assign\": {\r\n                                            to: \"r\",\r\n                                            value: \"= this.e\"\r\n                                        }\r\n                                    },\r\n                                    55\r\n                                ],\r\n                                finally: {\r\n                                    \"@assign\": {\r\n                                        to: \"f\",\r\n                                        value: \"OK\"\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        \"= {r: this.r, f: this.f, tr: this.tr }\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            async(function*() {\r\n                let status = yield engine.invoke();\r\n                assert(_.isPlainObject(status));\r\n                assert(status.r instanceof Error);\r\n                assert(status.r.message === \"foo\");\r\n                assert(status.tr === 55);\r\n                assert(status.f === \"OK\");\r\n            })().nodeify(done);\r\n        });\r\n\r\n        it(\"should catch Throw errors\", function (done) {\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    r: null,\r\n                    f: null,\r\n                    tr: null,\r\n                    OK: \"OK\",\r\n                    args: [\r\n                        {\r\n                            \"@try\": {\r\n                                \"@to\": \"tr\",\r\n                                args: [\r\n                                    {\r\n                                        \"@throw\": {\r\n                                            error: \"foo\"\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                catch: [\r\n                                    {\r\n                                        \"@assign\": {\r\n                                            to: \"r\",\r\n                                            value: \"= this.e\"\r\n                                        }\r\n                                    },\r\n                                    55\r\n                                ],\r\n                                finally: [\r\n                                    {\r\n                                        \"@assign\": {\r\n                                            to: \"f\",\r\n                                            value: \"= this.OK\"\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }\r\n                        },\r\n                        \"= {r: this.r, f: this.f, tr: this.tr }\"\r\n                    ]\r\n                }\r\n            });\r\n\r\n            async(function*() {\r\n                let status = yield engine.invoke();\r\n                assert(_.isPlainObject(status));\r\n                assert(status.r instanceof Error);\r\n                assert(status.r.message === \"foo\");\r\n                assert(status.tr === 55);\r\n                assert(status.f === \"OK\");\r\n            })().nodeify(done);\r\n        });\r\n\r\n        it(\"should throw errors when there is finally only\", function (done) {\r\n            let x = null;\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    args: [\r\n                        {\r\n                            \"@try\": {\r\n                                args: [\r\n                                    {\r\n                                        \"@throw\": {\r\n                                            error: \"foo\"\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                finally: function () {\r\n                                    x = \"OK\";\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            async(function*() {\r\n                try {\r\n                    yield engine.invoke();\r\n                }\r\n                catch (e) {\r\n                    assert(e instanceof Error);\r\n                    assert(e.message === \"foo\");\r\n                    assert(x === \"OK\");\r\n                    return;\r\n                }\r\n                assert(false);\r\n            })().nodeify(done);\r\n        });\r\n\r\n        it(\"should rethrow current error\", function (done) {\r\n            let ge = null;\r\n            let gf = null;\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    args: [\r\n                        {\r\n                            \"@try\": {\r\n                                args: [\r\n                                    {\r\n                                        \"@throw\": {\r\n                                            error: \"foo\"\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                catch: [\r\n                                    function () {\r\n                                        ge = this.e;\r\n                                    },\r\n                                    {\r\n                                        \"@throw\": {}\r\n                                    }\r\n                                ],\r\n                                finally: function () {\r\n                                    gf = \"OK\";\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            async(function*() {\r\n                try {\r\n                    yield engine.invoke();\r\n                }\r\n                catch (e) {\r\n                    assert(e instanceof Error);\r\n                    assert(e.message === \"foo\");\r\n                    assert(ge === e);\r\n                    assert(gf === \"OK\");\r\n                    return;\r\n                }\r\n                assert(false);\r\n            })().nodeify(done);\r\n        });\r\n\r\n        it(\"should rethrow a new error\", function (done) {\r\n            let ge = null;\r\n            let gf = null;\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    args: [\r\n                        {\r\n                            \"@try\": {\r\n                                args: [\r\n                                    {\r\n                                        \"@throw\": {\r\n                                            error: \"foo\"\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                catch: [\r\n                                    function () {\r\n                                        ge = this.e;\r\n                                    },\r\n                                    {\r\n                                        \"@throw\": {\r\n                                            error: \"= this.e.message + 'pupu'\"\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                finally: function () {\r\n                                    gf = \"OK\";\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            async(function*() {\r\n                try {\r\n                    yield engine.invoke();\r\n                }\r\n                catch (e) {\r\n                    assert(e instanceof Error);\r\n                    assert(e.message === \"foopupu\");\r\n                    assert(ge instanceof Error);\r\n                    assert(ge.message === \"foo\");\r\n                    assert(gf === \"OK\");\r\n                    return;\r\n                }\r\n                assert(false);\r\n            })().nodeify(done);\r\n        });\r\n\r\n        it(\"should catch a rethrown error in a custom varname\", function (done) {\r\n            let ge = null;\r\n            let gf = null;\r\n            let engine = new ActivityExecutionEngine({\r\n                \"@block\": {\r\n                    args: [\r\n                        {\r\n                            \"@try\": {\r\n                                varName: \"err\",\r\n                                args: {\r\n                                    \"@try\": {\r\n                                        args: [\r\n                                            {\r\n                                                \"@throw\": {\r\n                                                    error: \"foo\"\r\n                                                }\r\n                                            }\r\n                                        ],\r\n                                        catch: [\r\n                                            function () {\r\n                                                ge = this.e;\r\n                                            },\r\n                                            {\r\n                                                \"@throw\": {\r\n                                                    error: \"= this.e.message + 'pupu'\"\r\n                                                }\r\n                                            }\r\n                                        ],\r\n                                        finally: function () {\r\n                                            gf = \"OK\";\r\n                                        }\r\n                                    }\r\n                                },\r\n                                catch: [\"= this.err\"]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            async(function*() {\r\n                let e = yield engine.invoke();\r\n                assert(e instanceof Error);\r\n                assert(e.message === \"foopupu\");\r\n                assert(ge instanceof Error);\r\n                assert(ge.message === \"foo\");\r\n                assert(gf === \"OK\");\r\n            })().nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"behavior\", function () {\r\n        it(\"should cancel other branches\", function (done) {\r\n            async(function*() {\r\n                let x = false;\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@parallel\": {\r\n                        args: [\r\n                            function() {\r\n                                return Bluebird.delay(200).then(function() {\r\n                                    throw new Error(\"b+\");\r\n                                });\r\n                            },\r\n                            {\r\n                                \"@block\": [\r\n                                    {\r\n                                        \"@delay\": {\r\n                                            ms: 200\r\n                                        }\r\n                                    },\r\n                                    function () {\r\n                                        x = true;\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                \"@block\": [\r\n                                    {\r\n                                        \"@delay\": {\r\n                                            ms: 100\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@throw\": {\r\n                                            error: \"foo\"\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                \"@block\": [\r\n                                    {\r\n                                        \"@delay\": {\r\n                                            ms: 50\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@throw\": {\r\n                                            error: \"boo\"\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                try {\r\n                    yield engine.invoke();\r\n                    assert(false);\r\n                }\r\n                catch (e) {\r\n                    assert(e.message === \"boo\");\r\n                    assert(!x);\r\n                }\r\n            })().nodeify(done);\r\n        });\r\n    });\r\n});"],"file":"activities/exceptions.js","sourceRoot":"/source/"}