"use strict";
var wf4node = require("../../../");
var Func = wf4node.activities.Func;
var activityMarkup = wf4node.activities.activityMarkup;
var ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;
var assert = require("assert");
var Bluebird = require("bluebird");
var _ = require("lodash");
describe("Func", function() {
  it("should run with a synchronous code", function(done) {
    var fop = new Func();
    fop.code = function(obj) {
      return obj.name;
    };
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke({name: "Gabor"}).then(function(result) {
      assert.equal(result, "Gabor");
    }).nodeify(done);
  });
  it("should run when created from markup", function(done) {
    var fop = activityMarkup.parse({"@func": {code: function(obj) {
          return obj.name;
        }}});
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke({name: "Gabor"}).then(function(result) {
      assert.equal(result, "Gabor");
    }).nodeify(done);
  });
  it("should run twice", function(done) {
    var fop = activityMarkup.parse({"@func": {code: function(obj) {
          return obj.name;
        }}});
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke({name: "Gabor"}).then(function(result) {
      assert.equal(result, "Gabor");
      return engine.invoke({name: "Pisti"}).then(function(result2) {
        assert.equal(result2, "Pisti");
      });
    }).nodeify(done);
  });
  it("should run when code is asynchronous", function(done) {
    var fop = new Func();
    fop.code = function(obj) {
      return Bluebird.resolve(obj.name);
    };
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke({name: "Mezo"}).then(function(result) {
      assert.equal(result, "Mezo");
    }).nodeify(done);
  });
  it("should run asynchronously when code is a generator", function(done) {
    var fop = Func.async($traceurRuntime.initGeneratorFunction(function $__1(a) {
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return Bluebird.delay(100);
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 4:
              $ctx.returnValue = a.name;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__1, this);
    }));
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke({name: "Mezo"}).then(function(result) {
      assert.equal(result, "Mezo");
    }).nodeify(done);
  });
  it("should accept external parameters those are functions also", function(done) {
    var expected = {name: "Gabor"};
    var fop = new Func();
    fop.code = function(obj) {
      return obj.name;
    };
    var fopin = new Func();
    fopin.code = function() {
      return expected;
    };
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke(fopin).then(function(result) {
      assert.equal(result, expected.name);
    }).nodeify(done);
  });
  it("should work as an agument", function(done) {
    var expected = {name: "Gabor"};
    var fop = activityMarkup.parse({"@func": {
        args: {"@func": {code: function() {
              return expected;
            }}},
        code: function(obj) {
          return obj.name;
        }
      }});
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke().then(function(result) {
      assert.equal(result, expected.name);
    }).nodeify(done);
  });
  it("should include lodash as last argument", function(done) {
    var expected = {name: "GaborMezo"};
    var fop = activityMarkup.parse({"@func": {
        args: {"@func": {code: function() {
              return expected;
            }}},
        code: function(obj, __) {
          return __.camelCase(obj.name);
        }
      }});
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke().then(function(result) {
      assert.equal(result, _.camelCase(expected.name));
    }).nodeify(done);
  });
  describe("calling other methods", function() {
    it("should run when created from markup", function(done) {
      var markup = activityMarkup.parse({"@block": {
          id: "block",
          "code": {_: function(obj) {
              return obj.name;
            }},
          args: {"@func": {
              code: "= this.block.code",
              args: {name: "Gabor"}
            }}
        }});
      var engine = new ActivityExecutionEngine(markup);
      engine.invoke().then(function(result) {
        assert.equal(result, "Gabor");
      }).nodeify(done);
    });
    it("should run when code is asynchronous", function(done) {
      var markup = activityMarkup.parse({"@block": {
          id: "block",
          "code": {_: function(obj) {
              return Bluebird.delay(10).then(function() {
                return obj.name;
              });
            }},
          args: {"@func": {
              code: "= this.block.code",
              args: {name: "Gabor"}
            }}
        }});
      var engine = new ActivityExecutionEngine(markup);
      engine.invoke().then(function(result) {
        assert.equal(result, "Gabor");
      }).nodeify(done);
    });
    it("should include lodash as last argument", function(done) {
      var markup = activityMarkup.parse({"@block": {
          id: "block",
          "code": {_: function(obj, __) {
              return Bluebird.delay(10).then(function() {
                return __.camelCase(obj.name);
              });
            }},
          args: {"@func": {
              code: "= this.block.code",
              args: {name: "GaborMezo"}
            }}
        }});
      var engine = new ActivityExecutionEngine(markup);
      engine.invoke().then(function(result) {
        assert.equal(result, _.camelCase("GaborMezo"));
      }).nodeify(done);
    });
    it("should fail with error", function(done) {
      var markup = activityMarkup.parse({"@block": [function() {
          throw new Error("Boo.");
        }]});
      var engine = new ActivityExecutionEngine(markup);
      engine.invoke().then(function(result) {
        assert(false);
      }, function(e) {
        assert(/Boo/.test(e.message));
      }).nodeify(done);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,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RyxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0FBRUYsS0FBQyxBQUFDLENBQUMsd0JBQXVCLENBQUcsVUFBVSxJQUFHLENBQUc7QUFDekMsQUFBSSxRQUFBLENBQUEsTUFBSyxFQUFJLENBQUEsY0FBYSxNQUFNLEFBQUMsQ0FDN0IsQ0FDSSxRQUFPLENBQUcsRUFDTixTQUFVLEFBQUQsQ0FBRztBQUNSLGNBQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztRQUMzQixDQUNKLENBQ0osQ0FBQyxDQUFDO0FBRU4sQUFBSSxRQUFBLENBQUEsTUFBSyxFQUFJLElBQUksd0JBQXNCLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUVoRCxXQUFLLE9BQU8sQUFBQyxFQUFDLEtBQ04sQUFBQyxDQUFDLFNBQVUsTUFBSyxDQUFHO0FBQ3BCLGFBQUssQUFBQyxDQUFDLEtBQUksQ0FBQyxDQUFDO01BQ2pCLENBQ0EsVUFBVSxDQUFBLENBQUc7QUFDVCxhQUFLLEFBQUMsQ0FBQyxLQUFJLEtBQUssQUFBQyxDQUFDLENBQUEsUUFBUSxDQUFDLENBQUMsQ0FBQztNQUNqQyxDQUFDLFFBQVEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUNGIiwiZmlsZSI6ImFjdGl2aXRpZXMvZnVuYy5qcyIsInNvdXJjZVJvb3QiOiJ0ZXN0cy9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogZ2xvYmFsIGRlc2NyaWJlLGl0ICovXG5cbmxldCB3ZjRub2RlID0gcmVxdWlyZShcIi4uLy4uLy4uL1wiKTtcbmxldCBGdW5jID0gd2Y0bm9kZS5hY3Rpdml0aWVzLkZ1bmM7XG5sZXQgYWN0aXZpdHlNYXJrdXAgPSB3ZjRub2RlLmFjdGl2aXRpZXMuYWN0aXZpdHlNYXJrdXA7XG5sZXQgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQWN0aXZpdHlFeGVjdXRpb25FbmdpbmU7XG5sZXQgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcbmxldCBCbHVlYmlyZCA9IHJlcXVpcmUoXCJibHVlYmlyZFwiKTtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcblxuZGVzY3JpYmUoXCJGdW5jXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpdChcInNob3VsZCBydW4gd2l0aCBhIHN5bmNocm9ub3VzIGNvZGVcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGZvcCA9IG5ldyBGdW5jKCk7XG4gICAgICAgIGZvcC5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoZm9wKTtcblxuICAgICAgICBlbmdpbmUuaW52b2tlKHsgbmFtZTogXCJHYWJvclwiIH0pLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgXCJHYWJvclwiKTtcbiAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBydW4gd2hlbiBjcmVhdGVkIGZyb20gbWFya3VwXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGxldCBmb3AgPSBhY3Rpdml0eU1hcmt1cC5wYXJzZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShmb3ApO1xuXG4gICAgICAgIGVuZ2luZS5pbnZva2UoeyBuYW1lOiBcIkdhYm9yXCIgfSkudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCBcIkdhYm9yXCIpO1xuICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHJ1biB0d2ljZVwiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICBsZXQgZm9wID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmoubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoZm9wKTtcblxuICAgICAgICBlbmdpbmUuaW52b2tlKHsgbmFtZTogXCJHYWJvclwiIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgXCJHYWJvclwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5naW5lLmludm9rZSh7IG5hbWU6IFwiUGlzdGlcIiB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdDIsIFwiUGlzdGlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHJ1biB3aGVuIGNvZGUgaXMgYXN5bmNocm9ub3VzXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGxldCBmb3AgPSBuZXcgRnVuYygpO1xuICAgICAgICBmb3AuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBCbHVlYmlyZC5yZXNvbHZlKG9iai5uYW1lKTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGZvcCk7XG5cbiAgICAgICAgZW5naW5lLmludm9rZSh7IG5hbWU6IFwiTWV6b1wiIH0pLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgXCJNZXpvXCIpO1xuICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHJ1biBhc3luY2hyb25vdXNseSB3aGVuIGNvZGUgaXMgYSBnZW5lcmF0b3JcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGZvcCA9IEZ1bmMuYXN5bmMoZnVuY3Rpb24qIChhKSB7XG4gICAgICAgICAgICB5aWVsZCBCbHVlYmlyZC5kZWxheSgxMDApO1xuICAgICAgICAgICAgcmV0dXJuIGEubmFtZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShmb3ApO1xuXG4gICAgICAgIGVuZ2luZS5pbnZva2UoeyBuYW1lOiBcIk1lem9cIiB9KS50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIFwiTWV6b1wiKTtcbiAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBhY2NlcHQgZXh0ZXJuYWwgcGFyYW1ldGVycyB0aG9zZSBhcmUgZnVuY3Rpb25zIGFsc29cIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGV4cGVjdGVkID0geyBuYW1lOiBcIkdhYm9yXCIgfTtcbiAgICAgICAgbGV0IGZvcCA9IG5ldyBGdW5jKCk7XG4gICAgICAgIGZvcC5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgZm9waW4gPSBuZXcgRnVuYygpO1xuICAgICAgICBmb3Bpbi5jb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoZm9wKTtcbiAgICAgICAgLy9lbmdpbmUuYWRkVHJhY2tlcihuZXcgQ29uc29sZVRyYWNrZXIoKSk7XG5cbiAgICAgICAgZW5naW5lLmludm9rZShmb3BpbikudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCBleHBlY3RlZC5uYW1lKTtcbiAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCB3b3JrIGFzIGFuIGFndW1lbnRcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGV4cGVjdGVkID0geyBuYW1lOiBcIkdhYm9yXCIgfTtcblxuICAgICAgICBsZXQgZm9wID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShmb3ApO1xuXG4gICAgICAgIGVuZ2luZS5pbnZva2UoKS50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIGV4cGVjdGVkLm5hbWUpO1xuICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGluY2x1ZGUgbG9kYXNoIGFzIGxhc3QgYXJndW1lbnRcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGV4cGVjdGVkID0geyBuYW1lOiBcIkdhYm9yTWV6b1wiIH07XG5cbiAgICAgICAgbGV0IGZvcCA9IGFjdGl2aXR5TWFya3VwLnBhcnNlKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBlY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uIChvYmosIF9fKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX18uY2FtZWxDYXNlKG9iai5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoZm9wKTtcblxuICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCBfLmNhbWVsQ2FzZShleHBlY3RlZC5uYW1lKSk7XG4gICAgICAgICAgICB9KS5ub2RlaWZ5KGRvbmUpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJjYWxsaW5nIG90aGVyIG1ldGhvZHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCBydW4gd2hlbiBjcmVhdGVkIGZyb20gbWFya3VwXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBsZXQgbWFya3VwID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIkBibG9ja1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJibG9ja1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2RlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmoubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIj0gdGhpcy5ibG9jay5jb2RlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IHsgbmFtZTogXCJHYWJvclwiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShtYXJrdXApO1xuXG4gICAgICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIFwiR2Fib3JcIik7XG4gICAgICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgcnVuIHdoZW4gY29kZSBpcyBhc3luY2hyb25vdXNcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIGxldCBtYXJrdXAgPSBhY3Rpdml0eU1hcmt1cC5wYXJzZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiQGJsb2NrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvZGVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF86IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJsdWViaXJkLmRlbGF5KDEwKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iai5uYW1lOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIj0gdGhpcy5ibG9jay5jb2RlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IHsgbmFtZTogXCJHYWJvclwiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShtYXJrdXApO1xuXG4gICAgICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIFwiR2Fib3JcIik7XG4gICAgICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgaW5jbHVkZSBsb2Rhc2ggYXMgbGFzdCBhcmd1bWVudFwiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbGV0IG1hcmt1cCA9IGFjdGl2aXR5TWFya3VwLnBhcnNlKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJAYmxvY2tcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiYmxvY2tcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29kZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXzogZnVuY3Rpb24gKG9iaiwgX18pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJsdWViaXJkLmRlbGF5KDEwKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fLmNhbWVsQ2FzZShvYmoubmFtZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFwiPSB0aGlzLmJsb2NrLmNvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogeyBuYW1lOiBcIkdhYm9yTWV6b1wiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShtYXJrdXApO1xuXG4gICAgICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIF8uY2FtZWxDYXNlKFwiR2Fib3JNZXpvXCIpKTtcbiAgICAgICAgICAgICAgICB9KS5ub2RlaWZ5KGRvbmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBmYWlsIHdpdGggZXJyb3JcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIGxldCBtYXJrdXAgPSBhY3Rpdml0eU1hcmt1cC5wYXJzZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiQGJsb2NrXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCb28uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUobWFya3VwKTtcblxuICAgICAgICAgICAgZW5naW5lLmludm9rZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KC9Cb28vLnRlc3QoZS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
