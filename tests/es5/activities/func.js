"use strict";
"use strict";
var wf4node = require("../../../");
var Func = wf4node.activities.Func;
var activityMarkup = wf4node.activities.activityMarkup;
var ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;
var assert = require("assert");
var Bluebird = require("bluebird");
describe("Func", function() {
  it("should run with a synchronous code", function(done) {
    var fop = new Func();
    fop.code = function(obj) {
      return obj.name;
    };
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke({name: "Gabor"}).then(function(result) {
      assert.equal(result, "Gabor");
    }).nodeify(done);
  });
  it("should run when created from markup", function(done) {
    var fop = activityMarkup.parse({"@func": {code: function(obj) {
          return obj.name;
        }}});
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke({name: "Gabor"}).then(function(result) {
      assert.equal(result, "Gabor");
    }).nodeify(done);
  });
  it("should run when code is asynchronous", function(done) {
    var fop = new Func();
    fop.code = function(obj) {
      return Bluebird.resolve(obj.name);
    };
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke({name: "Mezo"}).then(function(result) {
      assert.equal(result, "Mezo");
    }).nodeify(done);
  });
  it("should accept external parameters those are functions also", function(done) {
    var expected = {name: "Gabor"};
    var fop = new Func();
    fop.code = function(obj) {
      return obj.name;
    };
    var fopin = new Func();
    fopin.code = function() {
      return expected;
    };
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke(fopin).then(function(result) {
      assert.equal(result, expected.name);
    }).nodeify(done);
  });
  it("should work as an agument", function(done) {
    var expected = {name: "Gabor"};
    var fop = activityMarkup.parse({"@func": {
        args: {"@func": {code: function() {
              return expected;
            }}},
        code: function(obj) {
          return obj.name;
        }
      }});
    var engine = new ActivityExecutionEngine(fop);
    engine.invoke().then(function(result) {
      assert.equal(result, expected.name);
    }).nodeify(done);
  });
});
//# sourceMappingURL=data:application/json;base64,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LElBQUcsQ0FBRyxVQUFVLEFBQUQsQ0FBRztBQUNkLG1CQUFPLFNBQU8sQ0FBQztZQUNuQixDQUNKLENBQ0o7QUFDQSxXQUFHLENBQUcsVUFBVSxHQUFFLENBQUc7QUFDakIsZUFBTyxDQUFBLEdBQUUsS0FBSyxDQUFDO1FBQ25CO0FBQUEsTUFDSixDQUNKLENBQUMsQ0FBQztBQUVOLEFBQUksTUFBQSxDQUFBLE1BQUssRUFBSSxJQUFJLHdCQUFzQixBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7QUFFN0MsU0FBSyxPQUFPLEFBQUMsRUFBQyxLQUFLLEFBQUMsQ0FDaEIsU0FBVSxNQUFLLENBQUc7QUFDZCxXQUFLLE1BQU0sQUFBQyxDQUFDLE1BQUssQ0FBRyxDQUFBLFFBQU8sS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxRQUFRLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztFQUN4QixDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFDRiIsImZpbGUiOiJhY3Rpdml0aWVzL2Z1bmMuanMiLCJzb3VyY2VSb290IjoidGVzdHMvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGdsb2JhbCBkZXNjcmliZSxpdCAqL1xuXG5sZXQgd2Y0bm9kZSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9cIik7XG5sZXQgRnVuYyA9IHdmNG5vZGUuYWN0aXZpdGllcy5GdW5jO1xubGV0IGFjdGl2aXR5TWFya3VwID0gd2Y0bm9kZS5hY3Rpdml0aWVzLmFjdGl2aXR5TWFya3VwO1xubGV0IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lID0gd2Y0bm9kZS5hY3Rpdml0aWVzLkFjdGl2aXR5RXhlY3V0aW9uRW5naW5lO1xubGV0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XG5sZXQgQmx1ZWJpcmQgPSByZXF1aXJlKFwiYmx1ZWJpcmRcIik7XG5cbmRlc2NyaWJlKFwiRnVuY1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoXCJzaG91bGQgcnVuIHdpdGggYSBzeW5jaHJvbm91cyBjb2RlXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGxldCBmb3AgPSBuZXcgRnVuYygpO1xuICAgICAgICBmb3AuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmoubmFtZTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGZvcCk7XG5cbiAgICAgICAgZW5naW5lLmludm9rZSh7IG5hbWU6IFwiR2Fib3JcIiB9KS50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIFwiR2Fib3JcIik7XG4gICAgICAgICAgICB9KS5ub2RlaWZ5KGRvbmUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgcnVuIHdoZW4gY3JlYXRlZCBmcm9tIG1hcmt1cFwiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICBsZXQgZm9wID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmoubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoZm9wKTtcblxuICAgICAgICBlbmdpbmUuaW52b2tlKHsgbmFtZTogXCJHYWJvclwiIH0pLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgXCJHYWJvclwiKTtcbiAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBydW4gd2hlbiBjb2RlIGlzIGFzeW5jaHJvbm91c1wiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICBsZXQgZm9wID0gbmV3IEZ1bmMoKTtcbiAgICAgICAgZm9wLmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gQmx1ZWJpcmQucmVzb2x2ZShvYmoubmFtZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShmb3ApO1xuXG4gICAgICAgIGVuZ2luZS5pbnZva2UoeyBuYW1lOiBcIk1lem9cIiB9KS50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIFwiTWV6b1wiKTtcbiAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBhY2NlcHQgZXh0ZXJuYWwgcGFyYW1ldGVycyB0aG9zZSBhcmUgZnVuY3Rpb25zIGFsc29cIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGV4cGVjdGVkID0geyBuYW1lOiBcIkdhYm9yXCIgfTtcbiAgICAgICAgbGV0IGZvcCA9IG5ldyBGdW5jKCk7XG4gICAgICAgIGZvcC5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgZm9waW4gPSBuZXcgRnVuYygpO1xuICAgICAgICBmb3Bpbi5jb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoZm9wKTtcbiAgICAgICAgLy9lbmdpbmUuYWRkVHJhY2tlcihuZXcgQ29uc29sZVRyYWNrZXIoKSk7XG5cbiAgICAgICAgZW5naW5lLmludm9rZShmb3BpbikudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCBleHBlY3RlZC5uYW1lKTtcbiAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCB3b3JrIGFzIGFuIGFndW1lbnRcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbGV0IGV4cGVjdGVkID0geyBuYW1lOiBcIkdhYm9yXCIgfTtcblxuICAgICAgICBsZXQgZm9wID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShmb3ApO1xuXG4gICAgICAgIGVuZ2luZS5pbnZva2UoKS50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIGV4cGVjdGVkLm5hbWUpO1xuICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICB9KTtcbn0pO1xuIl19
