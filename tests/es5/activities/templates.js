"use strict";
"use strict";
var wf4node = require("../../../");
var ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;
var _ = require("lodash");
var assert = require("assert");
describe("templates", function() {
  it("should parse object correctly", function(done) {
    var engine = new ActivityExecutionEngine({"@template": {declare: {
          a: "foo",
          b: ["zoo", {c: {"@func": {code: function() {
                  return 6;
                }}}}, "# 42"]
        }}});
    engine.invoke().then(function(result) {
      assert.ok(_.isPlainObject(result));
      assert.equal(result.a, "foo");
      assert.ok(_.isArray(result.b));
      assert.equal(result.b.length, 3);
      assert.equal(result.b[0], "zoo");
      assert.ok(_.isPlainObject(result.b[1]));
      assert.equal(result.b[1].c, 6);
      assert.equal(result.b[2], 42);
    }).nodeify(done);
  });
  it("should work when specialized", function(done) {
    var engine = new ActivityExecutionEngine({"@block": [{
        a: "foo",
        b: ["zoo", {c: {"@func": {code: function() {
                return 6;
              }}}}, "# 42"]
      }]});
    engine.invoke().then(function(result) {
      assert.ok(_.isPlainObject(result));
      assert.equal(result.a, "foo");
      assert.ok(_.isArray(result.b));
      assert.equal(result.b.length, 3);
      assert.equal(result.b[0], "zoo");
      assert.ok(_.isPlainObject(result.b[1]));
      assert.equal(result.b[1].c, 6);
      assert.equal(result.b[2], 42);
    }).nodeify(done);
  });
  it("should work on arrays", function(done) {
    var engine = new ActivityExecutionEngine({"@block": {
        rule: {value: 22},
        args: [{"@block": {
            a: [{$project: {$literal: "# this.get('rule').value"}}],
            args: ["= a"]
          }}]
      }});
    engine.invoke().then(function(result) {
      assert.ok(_.isArray(result));
      assert.ok(_.isPlainObject(result[0].$project));
      assert.equal(result[0].$project.$literal, 22);
    }).nodeify(done);
  });
});
//# sourceMappingURL=data:application/json;base64,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LENBQUMsQ0FBQztBQUVGLFNBQUssT0FBTyxBQUFDLEVBQUMsS0FBSyxBQUFDLENBQUMsU0FBVSxNQUFLLENBQUc7QUFDbkMsV0FBSyxHQUFHLEFBQUMsQ0FBQyxDQUFBLFFBQVEsQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDLENBQUM7QUFDNUIsV0FBSyxHQUFHLEFBQUMsQ0FBQyxDQUFBLGNBQWMsQUFBQyxDQUFDLE1BQUssQ0FBRSxDQUFBLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM5QyxXQUFLLE1BQU0sQUFBQyxDQUFDLE1BQUssQ0FBRSxDQUFBLENBQUMsU0FBUyxTQUFTLENBQUcsR0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQyxRQUFRLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztFQUNwQixDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL3RlbXBsYXRlcy5qcyIsInNvdXJjZVJvb3QiOiJ0ZXN0cy9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogZ2xvYmFsIGRlc2NyaWJlLGl0ICovXG5cbmxldCB3ZjRub2RlID0gcmVxdWlyZShcIi4uLy4uLy4uL1wiKTtcbmxldCBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZSA9IHdmNG5vZGUuYWN0aXZpdGllcy5BY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZTtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmxldCBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xuXG5kZXNjcmliZShcInRlbXBsYXRlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoXCJzaG91bGQgcGFyc2Ugb2JqZWN0IGNvcnJlY3RseVwiLCBmdW5jdGlvbiAoZG9uZSkge1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoe1xuICAgICAgICAgICAgXCJAdGVtcGxhdGVcIjoge1xuICAgICAgICAgICAgICAgIGRlY2xhcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYTogXCJmb29cIixcbiAgICAgICAgICAgICAgICAgICAgYjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ6b29cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIyA0MlwiXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVuZ2luZS5pbnZva2UoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcblxuICAgICAgICAgICAgYXNzZXJ0Lm9rKF8uaXNQbGFpbk9iamVjdChyZXN1bHQpKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQuYSwgXCJmb29cIik7XG4gICAgICAgICAgICBhc3NlcnQub2soXy5pc0FycmF5KHJlc3VsdC5iKSk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LmIubGVuZ3RoLCAzKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQuYlswXSwgXCJ6b29cIik7XG4gICAgICAgICAgICBhc3NlcnQub2soXy5pc1BsYWluT2JqZWN0KHJlc3VsdC5iWzFdKSk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LmJbMV0uYywgNik7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LmJbMl0sIDQyKTtcbiAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHdvcmsgd2hlbiBzcGVjaWFsaXplZFwiLCBmdW5jdGlvbiAoZG9uZSkge1xuXG4gICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoe1xuICAgICAgICAgICAgXCJAYmxvY2tcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYTogXCJmb29cIixcbiAgICAgICAgICAgICAgICAgICAgYjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ6b29cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIyA0MlwiXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVuZ2luZS5pbnZva2UoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGFzc2VydC5vayhfLmlzUGxhaW5PYmplY3QocmVzdWx0KSk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LmEsIFwiZm9vXCIpO1xuICAgICAgICAgICAgYXNzZXJ0Lm9rKF8uaXNBcnJheShyZXN1bHQuYikpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdC5iLmxlbmd0aCwgMyk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LmJbMF0sIFwiem9vXCIpO1xuICAgICAgICAgICAgYXNzZXJ0Lm9rKF8uaXNQbGFpbk9iamVjdChyZXN1bHQuYlsxXSkpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdC5iWzFdLmMsIDYpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdC5iWzJdLCA0Mik7XG4gICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCB3b3JrIG9uIGFycmF5c1wiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKHtcbiAgICAgICAgICAgIFwiQGJsb2NrXCI6IHtcbiAgICAgICAgICAgICAgICBydWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAyMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIkBibG9ja1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcHJvamVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaXRlcmFsOiBcIiMgdGhpcy5nZXQoJ3J1bGUnKS52YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI9IGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW5naW5lLmludm9rZSgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgYXNzZXJ0Lm9rKF8uaXNBcnJheShyZXN1bHQpKTtcbiAgICAgICAgICAgIGFzc2VydC5vayhfLmlzUGxhaW5PYmplY3QocmVzdWx0WzBdLiRwcm9qZWN0KSk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0WzBdLiRwcm9qZWN0LiRsaXRlcmFsLCAyMik7XG4gICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgfSk7XG59KTsiXX0=
