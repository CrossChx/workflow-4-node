"use strict";
"use strict";
var wf4node = require("../../../");
var Func = wf4node.activities.Func;
var activityMarkup = wf4node.activities.activityMarkup;
var ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;
var assert = require("assert");
var Bluebird = require("bluebird");
var Block = wf4node.activities.Block;
var _ = require("lodash");
var Expression = wf4node.activities.Expression;
describe("expressions", function() {
  describe("Expression", function() {
    it("should multiply two numbers", function(done) {
      var expr = new Expression();
      expr.expr = "this.get('v') * this.get('v')";
      var block = new Block();
      block.v = 2;
      block.args = [expr];
      var engine = new ActivityExecutionEngine(block);
      engine.invoke().then(function(result) {
        assert.equal(result, 4);
      }).nodeify(done);
    });
    it("should works from markup", function(done) {
      var block = activityMarkup.parse({"@block": {
          v: 2,
          args: ["# this.get('v') * this.get('v')"]
        }});
      var engine = new ActivityExecutionEngine(block);
      engine.invoke().then(function(result) {
        assert.equal(result, 4);
      }).nodeify(done);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cHJlc3Npb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsV0FBVyxDQUFDO0FBSVosQUFBSSxFQUFBLENBQUEsT0FBTSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsV0FBVSxDQUFDLENBQUM7QUFDbEMsQUFBSSxFQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsT0FBTSxXQUFXLEtBQUssQ0FBQztBQUNsQyxBQUFJLEVBQUEsQ0FBQSxjQUFhLEVBQUksQ0FBQSxPQUFNLFdBQVcsZUFBZSxDQUFDO0FBQ3RELEFBQUksRUFBQSxDQUFBLHVCQUFzQixFQUFJLENBQUEsT0FBTSxXQUFXLHdCQUF3QixDQUFDO0FBQ3hFLEFBQUksRUFBQSxDQUFBLE1BQUssRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQzlCLEFBQUksRUFBQSxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxDQUFDO0FBQ2xDLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sV0FBVyxNQUFNLENBQUM7QUFDcEMsQUFBSSxFQUFBLENBQUEsQ0FBQSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDekIsQUFBSSxFQUFBLENBQUEsVUFBUyxFQUFJLENBQUEsT0FBTSxXQUFXLFdBQVcsQ0FBQztBQUU5QyxPQUFPLEFBQUMsQ0FBQyxhQUFZLENBQUcsVUFBUyxBQUFELENBQUc7QUFDL0IsU0FBTyxBQUFDLENBQUMsWUFBVyxDQUFHLFVBQVUsQUFBRCxDQUFHO0FBQy9CLEtBQUMsQUFBQyxDQUFDLDZCQUE0QixDQUFHLFVBQVUsSUFBRyxDQUFHO0FBQzlDLEFBQUksUUFBQSxDQUFBLElBQUcsRUFBSSxJQUFJLFdBQVMsQUFBQyxFQUFDLENBQUM7QUFDM0IsU0FBRyxLQUFLLEVBQUksZ0NBQThCLENBQUM7QUFDM0MsQUFBSSxRQUFBLENBQUEsS0FBSSxFQUFJLElBQUksTUFBSSxBQUFDLEVBQUMsQ0FBQztBQUN2QixVQUFJLEVBQUUsRUFBSSxFQUFBLENBQUM7QUFDWCxVQUFJLEtBQUssRUFBSSxFQUFDLElBQUcsQ0FBQyxDQUFDO0FBRW5CLEFBQUksUUFBQSxDQUFBLE1BQUssRUFBSSxJQUFJLHdCQUFzQixBQUFDLENBQUMsS0FBSSxDQUFDLENBQUM7QUFFL0MsV0FBSyxPQUFPLEFBQUMsRUFBQyxLQUFLLEFBQUMsQ0FDaEIsU0FBVSxNQUFLLENBQUc7QUFDZCxhQUFLLE1BQU0sQUFBQyxDQUFDLE1BQUssQ0FBRyxFQUFBLENBQUMsQ0FBQztNQUMzQixDQUFDLFFBQVEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztBQUVGLEtBQUMsQUFBQyxDQUFDLDBCQUF5QixDQUFHLFVBQVUsSUFBRyxDQUFHO0FBQzNDLEFBQUksUUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLGNBQWEsTUFBTSxBQUFDLENBQzVCLENBQ0ksUUFBTyxDQUFHO0FBQ04sVUFBQSxDQUFHLEVBQUE7QUFDSCxhQUFHLENBQUcsRUFDRixpQ0FBZ0MsQ0FDcEM7QUFBQSxRQUNKLENBQ0osQ0FBQyxDQUFDO0FBRU4sQUFBSSxRQUFBLENBQUEsTUFBSyxFQUFJLElBQUksd0JBQXNCLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQztBQUUvQyxXQUFLLE9BQU8sQUFBQyxFQUFDLEtBQUssQUFBQyxDQUNoQixTQUFVLE1BQUssQ0FBRztBQUNkLGFBQUssTUFBTSxBQUFDLENBQUMsTUFBSyxDQUFHLEVBQUEsQ0FBQyxDQUFDO01BQzNCLENBQUMsUUFBUSxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0VBQ04sQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy9leHByZXNzaW9ucy5qcyIsInNvdXJjZVJvb3QiOiJ0ZXN0cy9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogZ2xvYmFsIGRlc2NyaWJlLGl0ICovXG5cbmxldCB3ZjRub2RlID0gcmVxdWlyZShcIi4uLy4uLy4uL1wiKTtcbmxldCBGdW5jID0gd2Y0bm9kZS5hY3Rpdml0aWVzLkZ1bmM7XG5sZXQgYWN0aXZpdHlNYXJrdXAgPSB3ZjRub2RlLmFjdGl2aXRpZXMuYWN0aXZpdHlNYXJrdXA7XG5sZXQgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQWN0aXZpdHlFeGVjdXRpb25FbmdpbmU7XG5sZXQgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcbmxldCBCbHVlYmlyZCA9IHJlcXVpcmUoXCJibHVlYmlyZFwiKTtcbmxldCBCbG9jayA9IHdmNG5vZGUuYWN0aXZpdGllcy5CbG9jaztcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmxldCBFeHByZXNzaW9uID0gd2Y0bm9kZS5hY3Rpdml0aWVzLkV4cHJlc3Npb247XG5cbmRlc2NyaWJlKFwiZXhwcmVzc2lvbnNcIiwgZnVuY3Rpb24oKSB7XG4gICAgZGVzY3JpYmUoXCJFeHByZXNzaW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoXCJzaG91bGQgbXVsdGlwbHkgdHdvIG51bWJlcnNcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIGxldCBleHByID0gbmV3IEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGV4cHIuZXhwciA9IFwidGhpcy5nZXQoJ3YnKSAqIHRoaXMuZ2V0KCd2JylcIjtcbiAgICAgICAgICAgIGxldCBibG9jayA9IG5ldyBCbG9jaygpO1xuICAgICAgICAgICAgYmxvY2sudiA9IDI7XG4gICAgICAgICAgICBibG9jay5hcmdzID0gW2V4cHJdO1xuXG4gICAgICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGJsb2NrKTtcblxuICAgICAgICAgICAgZW5naW5lLmludm9rZSgpLnRoZW4oXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCA0KTtcbiAgICAgICAgICAgICAgICB9KS5ub2RlaWZ5KGRvbmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCB3b3JrcyBmcm9tIG1hcmt1cFwiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbGV0IGJsb2NrID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIkBibG9ja1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2OiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIyB0aGlzLmdldCgndicpICogdGhpcy5nZXQoJ3YnKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShibG9jayk7XG5cbiAgICAgICAgICAgIGVuZ2luZS5pbnZva2UoKS50aGVuKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgNCk7XG4gICAgICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsiXX0=
