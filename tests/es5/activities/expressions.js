"use strict";
var wf4node = require("../../../");
var Func = wf4node.activities.Func;
var activityMarkup = wf4node.activities.activityMarkup;
var ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;
var assert = require("assert");
var Bluebird = require("bluebird");
var Block = wf4node.activities.Block;
var _ = require("lodash");
var Expression = wf4node.activities.Expression;
describe("expressions", function() {
  describe("Expression", function() {
    it("should multiply two numbers", function(done) {
      var expr = new Expression();
      expr.expr = "this.v * this.v";
      var block = new Block();
      block.v = 2;
      block.args = [expr];
      var engine = new ActivityExecutionEngine(block);
      engine.invoke().then(function(result) {
        assert.equal(result, 4);
      }).nodeify(done);
    });
    it("should works from markup", function(done) {
      var block = activityMarkup.parse({"@block": {
          v: 2,
          args: ["= this.v * this.v"]
        }});
      var engine = new ActivityExecutionEngine(block);
      engine.invoke().then(function(result) {
        assert.equal(result, 4);
      }).nodeify(done);
    });
    it("should access parent", function(done) {
      var block = activityMarkup.parse({"@block": {
          v: 2,
          args: [{"@func": {
              args: ["= this.v", "= this.$parent.v  "],
              code: function(a, b) {
                return a + b;
              }
            }}]
        }});
      var engine = new ActivityExecutionEngine(block);
      engine.invoke().then(function(result) {
        assert.equal(result, 4);
      }).nodeify(done);
    });
    it("should evaluate lodash", function(done) {
      var block = activityMarkup.parse({"@block": {
          id: "me",
          v: 2.11,
          args: [{"@func": {
              args: ["= this.v", "= this.$parent.v  ", "= _.round(this.me.v)"],
              code: function(a, b, c) {
                return a + b + c;
              }
            }}]
        }});
      var engine = new ActivityExecutionEngine(block);
      engine.invoke().then(function(result) {
        assert.equal(result, 2.11 + 2.11 + 2);
      }).nodeify(done);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,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L0MsV0FBSyxPQUFPLEFBQUMsRUFBQyxLQUFLLEFBQUMsQ0FDaEIsU0FBVSxNQUFLLENBQUc7QUFDZCxhQUFLLE1BQU0sQUFBQyxDQUFDLE1BQUssQ0FBRyxDQUFBLElBQUcsRUFBSSxLQUFHLENBQUEsQ0FBSSxFQUFBLENBQUMsQ0FBQztNQUN6QyxDQUFDLFFBQVEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUFBIiwiZmlsZSI6ImFjdGl2aXRpZXMvZXhwcmVzc2lvbnMuanMiLCJzb3VyY2VSb290IjoidGVzdHMvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGdsb2JhbCBkZXNjcmliZSxpdCAqL1xuXG5sZXQgd2Y0bm9kZSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9cIik7XG5sZXQgRnVuYyA9IHdmNG5vZGUuYWN0aXZpdGllcy5GdW5jO1xubGV0IGFjdGl2aXR5TWFya3VwID0gd2Y0bm9kZS5hY3Rpdml0aWVzLmFjdGl2aXR5TWFya3VwO1xubGV0IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lID0gd2Y0bm9kZS5hY3Rpdml0aWVzLkFjdGl2aXR5RXhlY3V0aW9uRW5naW5lO1xubGV0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XG5sZXQgQmx1ZWJpcmQgPSByZXF1aXJlKFwiYmx1ZWJpcmRcIik7XG5sZXQgQmxvY2sgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQmxvY2s7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5sZXQgRXhwcmVzc2lvbiA9IHdmNG5vZGUuYWN0aXZpdGllcy5FeHByZXNzaW9uO1xuXG5kZXNjcmliZShcImV4cHJlc3Npb25zXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBkZXNjcmliZShcIkV4cHJlc3Npb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCBtdWx0aXBseSB0d28gbnVtYmVyc1wiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbGV0IGV4cHIgPSBuZXcgRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgZXhwci5leHByID0gXCJ0aGlzLnYgKiB0aGlzLnZcIjtcbiAgICAgICAgICAgIGxldCBibG9jayA9IG5ldyBCbG9jaygpO1xuICAgICAgICAgICAgYmxvY2sudiA9IDI7XG4gICAgICAgICAgICBibG9jay5hcmdzID0gW2V4cHJdO1xuXG4gICAgICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGJsb2NrKTtcblxuICAgICAgICAgICAgZW5naW5lLmludm9rZSgpLnRoZW4oXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCA0KTtcbiAgICAgICAgICAgICAgICB9KS5ub2RlaWZ5KGRvbmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCB3b3JrcyBmcm9tIG1hcmt1cFwiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbGV0IGJsb2NrID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIkBibG9ja1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2OiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPSB0aGlzLnYgKiB0aGlzLnZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoYmxvY2spO1xuXG4gICAgICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIDQpO1xuICAgICAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIGFjY2VzcyBwYXJlbnRcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIGxldCBibG9jayA9IGFjdGl2aXR5TWFya3VwLnBhcnNlKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJAYmxvY2tcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogWyBcIj0gdGhpcy52XCIsIFwiPSB0aGlzLiRwYXJlbnQudiAgXCIgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSArIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShibG9jayk7XG5cbiAgICAgICAgICAgIGVuZ2luZS5pbnZva2UoKS50aGVuKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgNCk7XG4gICAgICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgZXZhbHVhdGUgbG9kYXNoXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBsZXQgYmxvY2sgPSBhY3Rpdml0eU1hcmt1cC5wYXJzZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiQGJsb2NrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcIm1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2OiAyLjExLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbIFwiPSB0aGlzLnZcIiwgXCI9IHRoaXMuJHBhcmVudC52ICBcIiwgXCI9IF8ucm91bmQodGhpcy5tZS52KVwiIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGJsb2NrKTtcblxuICAgICAgICAgICAgZW5naW5lLmludm9rZSgpLnRoZW4oXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCAyLjExICsgMi4xMSArIDIpO1xuICAgICAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7Il19
