{"version":3,"sources":["activities/cancellation.js"],"names":[],"mappings":"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","file":"activities/cancellation.js","sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"better-assert\");\nlet Bluebird = require(\"bluebird\");\nlet _ = require(\"lodash\");\nlet async = wf4node.common.asyncHelpers.async;\n\ndescribe(\"cancellation\", function () {\n    describe(\"Cancel\", function () {\n        it(\"when force is set then it should cancel other branches\", function (done) {\n            async(function*() {\n                let x = false;\n                let engine = new ActivityExecutionEngine({\n                    \"@parallel\": {\n                        args: [\n                            function() {\n                                return Bluebird.delay(200).then(function() {\n                                    throw new Error(\"b+\");\n                                });\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 200\n                                        }\n                                    },\n                                    function () {\n                                        x = true;\n                                    }\n                                ]\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 100\n                                        }\n                                    },\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ]\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 50\n                                        }\n                                    },\n                                    {\n                                        \"@cancel\": {\n                                            force: true\n                                        }\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                });\n\n                try {\n                    yield engine.invoke();\n                    assert(false);\n                }\n                catch (e) {\n                    assert(e instanceof wf4node.common.errors.Cancelled);\n                    assert(!x);\n                }\n            })().nodeify(done);\n        });\n\n        it(\"when not force it should run other branches before terminating\", function (done) {\n            async(function*() {\n                let x = 0;\n                let y = 0;\n                let engine = new ActivityExecutionEngine({\n                    \"@block\": {\n                        args: [\n                            {\n                                \"@parallel\": [\n                                    function() {\n                                        x++;\n                                    },\n                                    {\n                                        \"@cancel\": {}\n                                    }\n                                ]\n                            },\n                            function() {\n                                y++;\n                            }\n                        ]\n                    }\n                });\n\n                try {\n                    yield engine.invoke();\n                    assert(false);\n                }\n                catch (e) {\n                    assert(e instanceof wf4node.common.errors.Cancelled);\n                    assert(x === 1);\n                    assert(!y);\n                }\n            })().nodeify(done);\n        });\n    });\n\n    describe(\"CancellationScope\", function () {\n        it(\"when force is set then it should cancel other branches, and it should handled in scope\", function (done) {\n            async(function*() {\n                let x = false;\n                let y = false;\n                let engine = new ActivityExecutionEngine({\n                    \"@cancellationScope\": {\n                        args: {\n                            \"@parallel\": {\n                                args: [\n                                    function() {\n                                        return Bluebird.delay(200).then(function() {\n                                            throw new Error(\"b+\");\n                                        });\n                                    },\n                                    {\n                                        \"@block\": [\n                                            {\n                                                \"@delay\": {\n                                                    ms: 200\n                                                }\n                                            },\n                                            function () {\n                                                x = true;\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"@block\": [\n                                            {\n                                                \"@delay\": {\n                                                    ms: 100\n                                                }\n                                            },\n                                            {\n                                                \"@throw\": {\n                                                    error: \"foo\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"@block\": [\n                                            {\n                                                \"@delay\": {\n                                                    ms: 50\n                                                }\n                                            },\n                                            {\n                                                \"@cancel\": {\n                                                    force: true\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        },\n                        cancelled: [\n                            function() {\n                                y = true;\n                            }\n                        ]\n                    }\n                });\n\n                yield engine.invoke();\n                assert(!x);\n                assert(y);\n            })().nodeify(done);\n        });\n\n        it(\"when not force it should run other branches before terminating\", function (done) {\n            async(function*() {\n                let x = 0;\n                let y = 0;\n                let z = false;\n                let engine = new ActivityExecutionEngine({\n                    \"@cancellationScope\": {\n                        args: {\n                            \"@block\": {\n                                args: [\n                                    {\n                                        \"@parallel\": [\n                                            function () {\n                                                x++;\n                                            },\n                                            {\n                                                \"@cancel\": {}\n                                            }\n                                        ]\n                                    },\n                                    function () {\n                                        y++;\n                                    }\n                                ]\n                            }\n                        },\n                        cancelled: function() {\n                            z = true;\n                        }\n                    }\n                });\n\n                yield engine.invoke();\n                assert(x === 1);\n                assert(!y);\n                assert(z);\n            })().nodeify(done);\n        });\n    });\n});"],"sourceRoot":"/source/"}