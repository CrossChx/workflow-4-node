{"version":3,"names":[],"mappings":"","sources":["activities/cancellation.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet Func = wf4node.activities.Func;\r\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\r\nlet assert = require(\"better-assert\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet _ = require(\"lodash\");\r\nlet async = wf4node.common.asyncHelpers.async;\r\n\r\ndescribe(\"cancellation\", function () {\r\n    describe(\"Cancel\", function () {\r\n        it(\"when force is set then it should cancel other branches\", function (done) {\r\n            async(function*() {\r\n                let x = false;\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@parallel\": {\r\n                        args: [\r\n                            function() {\r\n                                return Bluebird.delay(200).then(function() {\r\n                                    throw new Error(\"b+\");\r\n                                });\r\n                            },\r\n                            {\r\n                                \"@block\": [\r\n                                    {\r\n                                        \"@delay\": {\r\n                                            ms: 200\r\n                                        }\r\n                                    },\r\n                                    function () {\r\n                                        x = true;\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                \"@block\": [\r\n                                    {\r\n                                        \"@delay\": {\r\n                                            ms: 100\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@throw\": {\r\n                                            error: \"foo\"\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                \"@block\": [\r\n                                    {\r\n                                        \"@delay\": {\r\n                                            ms: 50\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@cancel\": {\r\n                                            force: true\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                try {\r\n                    yield engine.invoke();\r\n                    assert(false);\r\n                }\r\n                catch (e) {\r\n                    assert(e instanceof wf4node.common.errors.Cancelled);\r\n                    assert(!x);\r\n                }\r\n            })().nodeify(done);\r\n        });\r\n\r\n        it(\"when not force it should run other branches before terminating\", function (done) {\r\n            async(function*() {\r\n                let x = 0;\r\n                let y = 0;\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@block\": {\r\n                        args: [\r\n                            {\r\n                                \"@parallel\": [\r\n                                    function() {\r\n                                        x++;\r\n                                    },\r\n                                    {\r\n                                        \"@cancel\": {}\r\n                                    }\r\n                                ]\r\n                            },\r\n                            function() {\r\n                                y++;\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                try {\r\n                    yield engine.invoke();\r\n                    assert(false);\r\n                }\r\n                catch (e) {\r\n                    assert(e instanceof wf4node.common.errors.Cancelled);\r\n                    assert(x === 1);\r\n                    assert(!y);\r\n                }\r\n            })().nodeify(done);\r\n        });\r\n    });\r\n\r\n    describe(\"CancellationScope\", function () {\r\n        it(\"when force is set then it should cancel other branches, and it should handled in scope\", function (done) {\r\n            async(function*() {\r\n                let x = false;\r\n                let y = false;\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@cancellationScope\": {\r\n                        args: {\r\n                            \"@parallel\": {\r\n                                args: [\r\n                                    function() {\r\n                                        return Bluebird.delay(200).then(function() {\r\n                                            throw new Error(\"b+\");\r\n                                        });\r\n                                    },\r\n                                    {\r\n                                        \"@block\": [\r\n                                            {\r\n                                                \"@delay\": {\r\n                                                    ms: 200\r\n                                                }\r\n                                            },\r\n                                            function () {\r\n                                                x = true;\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                    {\r\n                                        \"@block\": [\r\n                                            {\r\n                                                \"@delay\": {\r\n                                                    ms: 100\r\n                                                }\r\n                                            },\r\n                                            {\r\n                                                \"@throw\": {\r\n                                                    error: \"foo\"\r\n                                                }\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                    {\r\n                                        \"@block\": [\r\n                                            {\r\n                                                \"@delay\": {\r\n                                                    ms: 50\r\n                                                }\r\n                                            },\r\n                                            {\r\n                                                \"@cancel\": {\r\n                                                    force: true\r\n                                                }\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        },\r\n                        cancelled: [\r\n                            function() {\r\n                                y = true;\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                yield engine.invoke();\r\n                assert(!x);\r\n                assert(y);\r\n            })().nodeify(done);\r\n        });\r\n\r\n        it(\"when not force it should run other branches before terminating\", function (done) {\r\n            async(function*() {\r\n                let x = 0;\r\n                let y = 0;\r\n                let z = false;\r\n                let engine = new ActivityExecutionEngine({\r\n                    \"@cancellationScope\": {\r\n                        args: {\r\n                            \"@block\": {\r\n                                args: [\r\n                                    {\r\n                                        \"@parallel\": [\r\n                                            function () {\r\n                                                x++;\r\n                                            },\r\n                                            {\r\n                                                \"@cancel\": {}\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                    function () {\r\n                                        y++;\r\n                                    }\r\n                                ]\r\n                            }\r\n                        },\r\n                        cancelled: function() {\r\n                            z = true;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                yield engine.invoke();\r\n                assert(x === 1);\r\n                assert(!y);\r\n                assert(z);\r\n            })().nodeify(done);\r\n        });\r\n    });\r\n});"],"file":"activities/cancellation.js","sourceRoot":"/source/"}