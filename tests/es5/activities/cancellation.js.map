{"version":3,"names":[],"mappings":"","sources":["activities/cancellation.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"better-assert\");\nlet Bluebird = require(\"bluebird\");\nlet _ = require(\"lodash\");\nlet async = wf4node.common.asyncHelpers.async;\n\ndescribe(\"cancellation\", function () {\n    describe(\"Cancel\", function () {\n        it(\"when force is set then it should cancel other branches\", function (done) {\n            async(function*() {\n                let x = false;\n                let engine = new ActivityExecutionEngine({\n                    \"@parallel\": {\n                        args: [\n                            function() {\n                                return Bluebird.delay(200).then(function() {\n                                    throw new Error(\"b+\");\n                                });\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 200\n                                        }\n                                    },\n                                    function () {\n                                        x = true;\n                                    }\n                                ]\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 100\n                                        }\n                                    },\n                                    {\n                                        \"@throw\": {\n                                            error: \"foo\"\n                                        }\n                                    }\n                                ]\n                            },\n                            {\n                                \"@block\": [\n                                    {\n                                        \"@delay\": {\n                                            ms: 50\n                                        }\n                                    },\n                                    {\n                                        \"@cancel\": {\n                                            force: true\n                                        }\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                });\n\n                try {\n                    yield engine.invoke();\n                    assert(false);\n                }\n                catch (e) {\n                    assert(e instanceof wf4node.common.errors.Cancelled);\n                    assert(!x);\n                }\n            })().nodeify(done);\n        });\n\n        it(\"when not force it should run other branches before terminating\", function (done) {\n            async(function*() {\n                let x = 0;\n                let y = 0;\n                let engine = new ActivityExecutionEngine({\n                    \"@block\": {\n                        args: [\n                            {\n                                \"@parallel\": [\n                                    function() {\n                                        x++;\n                                    },\n                                    {\n                                        \"@cancel\": {}\n                                    }\n                                ]\n                            },\n                            function() {\n                                y++;\n                            }\n                        ]\n                    }\n                });\n\n                try {\n                    yield engine.invoke();\n                    assert(false);\n                }\n                catch (e) {\n                    assert(e instanceof wf4node.common.errors.Cancelled);\n                    assert(x === 1);\n                    assert(!y);\n                }\n            })().nodeify(done);\n        });\n    });\n\n    describe(\"CancellationScope\", function () {\n        it(\"when force is set then it should cancel other branches, and it should handled in scope\", function (done) {\n            async(function*() {\n                let x = false;\n                let y = false;\n                let engine = new ActivityExecutionEngine({\n                    \"@cancellationScope\": {\n                        args: {\n                            \"@parallel\": {\n                                args: [\n                                    function() {\n                                        return Bluebird.delay(200).then(function() {\n                                            throw new Error(\"b+\");\n                                        });\n                                    },\n                                    {\n                                        \"@block\": [\n                                            {\n                                                \"@delay\": {\n                                                    ms: 200\n                                                }\n                                            },\n                                            function () {\n                                                x = true;\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"@block\": [\n                                            {\n                                                \"@delay\": {\n                                                    ms: 100\n                                                }\n                                            },\n                                            {\n                                                \"@throw\": {\n                                                    error: \"foo\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"@block\": [\n                                            {\n                                                \"@delay\": {\n                                                    ms: 50\n                                                }\n                                            },\n                                            {\n                                                \"@cancel\": {\n                                                    force: true\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        },\n                        cancelled: [\n                            function() {\n                                y = true;\n                            }\n                        ]\n                    }\n                });\n\n                yield engine.invoke();\n                assert(!x);\n                assert(y);\n            })().nodeify(done);\n        });\n\n        it(\"when not force it should run other branches before terminating\", function (done) {\n            async(function*() {\n                let x = 0;\n                let y = 0;\n                let z = false;\n                let engine = new ActivityExecutionEngine({\n                    \"@cancellationScope\": {\n                        args: {\n                            \"@block\": {\n                                args: [\n                                    {\n                                        \"@parallel\": [\n                                            function () {\n                                                x++;\n                                            },\n                                            {\n                                                \"@cancel\": {}\n                                            }\n                                        ]\n                                    },\n                                    function () {\n                                        y++;\n                                    }\n                                ]\n                            }\n                        },\n                        cancelled: function() {\n                            z = true;\n                        }\n                    }\n                });\n\n                yield engine.invoke();\n                assert(x === 1);\n                assert(!y);\n                assert(z);\n            })().nodeify(done);\n        });\n    });\n});"],"file":"activities/cancellation.js","sourceRoot":"/source/"}