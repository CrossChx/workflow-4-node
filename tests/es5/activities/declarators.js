"use strict";
var wf4node = require("../../../");
var Func = wf4node.activities.Func;
var activityMarkup = wf4node.activities.activityMarkup;
var ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;
var assert = require("assert");
var Bluebird = require("bluebird");
var Block = wf4node.activities.Block;
var _ = require("lodash");
describe("declarators", function() {
  describe("Block", function() {
    it("should handle variables well", function(done) {
      var block = new Block();
      block.let1 = 1;
      block.let2 = 2;
      block.let3 = 3;
      var f1 = new Func();
      f1.code = function() {
        return this.let3 = (this.let3 + this.let1 * 2);
      };
      var f2 = new Func();
      f2.code = function() {
        return this.let3 = (this.let3 + this.let2 * 3);
      };
      var f3 = new Func();
      f3.code = function() {
        return this.let3 * 4;
      };
      var engine = new ActivityExecutionEngine(block);
      engine.invoke(f1, f2, f3).then(function(result) {
        var x1 = 1;
        var x2 = 2;
        var x3 = 3;
        x3 += x1 * 2;
        x3 += x2 * 3;
        var r = x3 * 4;
        assert.equal(result, r);
      }).nodeify(done);
    });
    it("can be generated from markup", function(done) {
      var block = activityMarkup.parse({"@block": {
          let1: 1,
          let2: {"@func": {code: function() {
                return 2;
              }}},
          let3: 3,
          args: [{"@func": {code: function bubu() {
                return this.let3 += this.let1 * 2;
              }}}, {"@func": {code: function kittyfuck() {
                return this.let3 += this.let2 * 3;
              }}}, {"@func": {code: function() {
                return this.let3 * 4;
              }}}]
        }});
      var engine = new ActivityExecutionEngine(block);
      engine.invoke().then(function(result) {
        var x1 = 1;
        var x2 = 2;
        var x3 = 3;
        x3 += x1 * 2;
        x3 += x2 * 3;
        var r = x3 * 4;
        assert.equal(result, r);
      }).nodeify(done);
    });
    it("can be generated from markup string", function(done) {
      var markup = {"@block": {
          let1: 1,
          let2: 2,
          let3: 3,
          args: [{"@func": {code: function bubu() {
                return this.let3 = this.let3 + this.let1 * 2;
              }}}, {"@func": {code: function kittyfuck() {
                return this.let3 = this.let3 + this.let2 * 3;
              }}}, {"@func": {code: function() {
                return this.let3 * 4;
              }}}]
        }};
      var markupString = activityMarkup.stringify(markup);
      assert.ok(_.isString(markupString));
      var block = activityMarkup.parse(markupString);
      var engine = new ActivityExecutionEngine(block);
      engine.invoke().then(function(result) {
        var x1 = 1;
        var x2 = 2;
        var x3 = 3;
        x3 += x1 * 2;
        x3 += x2 * 3;
        var r = x3 * 4;
        assert.equal(result, r);
      }).nodeify(done);
    });
  });
  describe("Parallel", function() {
    it("should work as expected with sync activities", function(done) {
      var activity = activityMarkup.parse({"@parallel": {
          let1: "",
          args: [{"@func": {code: function() {
                return this.let1 += "a";
              }}}, {"@func": {code: 'function() { return this.let1 += "b"; }'}}]
        }});
      var engine = new ActivityExecutionEngine(activity);
      engine.invoke().then(function(result) {
        assert.equal(result.length, 2);
        assert.equal(result[0], "a");
        assert.equal(result[1], "ab");
      }).nodeify(done);
    });
    it("should work as expected with async activities", function(done) {
      var activity = activityMarkup.parse({"@parallel": {
          let1: "",
          args: [{"@func": {code: function() {
                return this.let1 += "a";
              }}}, {"@func": {code: 'function() { return this.let1 += "b"; }'}}, {"@func": {code: function() {
                return Bluebird.delay(100).then(function() {
                  return 42;
                });
              }}}, {"@func": {code: function() {
                return new Bluebird(function(resolve, reject) {
                  setImmediate(function() {
                    resolve(0);
                  });
                });
              }}}]
        }});
      var engine = new ActivityExecutionEngine(activity);
      engine.invoke().then(function(result) {
        assert.equal(result.length, 4);
        assert.equal(result[0], "a");
        assert.equal(result[1], "ab");
        assert.equal(result[2], 42);
        assert.equal(result[3], 0);
      }).nodeify(done);
    });
  });
  describe("Pick", function() {
    it("should work as expected with sync activities", function(done) {
      var activity = activityMarkup.parse({"@pick": {
          let1: "",
          args: [{"@func": {code: function() {
                return this.let1 += "a";
              }}}, {"@func": {code: 'function() { return this.let1 += "b"; }'}}]
        }});
      var engine = new ActivityExecutionEngine(activity);
      engine.invoke().then(function(result) {
        assert.equal(result, "a");
      }).nodeify(done);
    });
    it("should work as expected with async activities", function(done) {
      var activity = activityMarkup.parse({"@pick": [{"@func": {code: function() {
              return Bluebird.delay(100).then(function() {
                return 42;
              });
            }}}, {"@func": {code: function() {
              return new Bluebird(function(resolve, reject) {
                setImmediate(function() {
                  resolve(0);
                });
              });
            }}}]});
      var engine = new ActivityExecutionEngine(activity);
      engine.invoke().then(function(result) {
        assert.equal(result, 0);
      }).nodeify(done);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,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bUJBQU8sQ0FBQSxRQUFPLE1BQU0sQUFBQyxDQUFDLEdBQUUsQ0FBQyxLQUFLLEFBQUMsQ0FBQyxTQUFVLEFBQUQsQ0FBRztBQUN4QyxxQkFBTyxHQUFDLENBQUM7Y0FDYixDQUFDLENBQUM7WUFDTixDQUNKLENBQ0osQ0FDQSxFQUNJLE9BQU0sQ0FBRyxFQUNMLElBQUcsQ0FBRyxVQUFVLEFBQUQsQ0FBRztBQUNkLG1CQUFPLElBQUksU0FBTyxBQUFDLENBQUMsU0FBVSxPQUFNLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDM0MsMkJBQVcsQUFBQyxDQUFDLFNBQVUsQUFBRCxDQUFHO0FBQ3JCLHdCQUFNLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztnQkFDZCxDQUFDLENBQUM7Y0FDTixDQUFDLENBQUM7WUFDTixDQUNKLENBQ0osQ0FDSixDQUNKLENBQUMsQ0FBQztBQUVOLEFBQUksUUFBQSxDQUFBLE1BQUssRUFBSSxJQUFJLHdCQUFzQixBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFFbEQsV0FBSyxPQUFPLEFBQUMsRUFBQyxLQUFLLEFBQUMsQ0FDaEIsU0FBVSxNQUFLLENBQUc7QUFDZCxhQUFLLE1BQU0sQUFBQyxDQUFDLE1BQUssQ0FBRyxFQUFBLENBQUMsQ0FBQztNQUMzQixDQUFDLFFBQVEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUNGIiwiZmlsZSI6ImFjdGl2aXRpZXMvZGVjbGFyYXRvcnMuanMiLCJzb3VyY2VSb290IjoidGVzdHMvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGdsb2JhbCBkZXNjcmliZSxpdCAqL1xuXG5sZXQgd2Y0bm9kZSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9cIik7XG5sZXQgRnVuYyA9IHdmNG5vZGUuYWN0aXZpdGllcy5GdW5jO1xubGV0IGFjdGl2aXR5TWFya3VwID0gd2Y0bm9kZS5hY3Rpdml0aWVzLmFjdGl2aXR5TWFya3VwO1xubGV0IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lID0gd2Y0bm9kZS5hY3Rpdml0aWVzLkFjdGl2aXR5RXhlY3V0aW9uRW5naW5lO1xubGV0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XG5sZXQgQmx1ZWJpcmQgPSByZXF1aXJlKFwiYmx1ZWJpcmRcIik7XG5sZXQgQmxvY2sgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQmxvY2s7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cbmRlc2NyaWJlKFwiZGVjbGFyYXRvcnNcIiwgZnVuY3Rpb24gKCkge1xuICAgIGRlc2NyaWJlKFwiQmxvY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCBoYW5kbGUgdmFyaWFibGVzIHdlbGxcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIGxldCBibG9jayA9IG5ldyBCbG9jaygpO1xuICAgICAgICAgICAgYmxvY2subGV0MSA9IDE7XG4gICAgICAgICAgICBibG9jay5sZXQyID0gMjtcbiAgICAgICAgICAgIGJsb2NrLmxldDMgPSAzO1xuXG4gICAgICAgICAgICBsZXQgZjEgPSBuZXcgRnVuYygpO1xuICAgICAgICAgICAgZjEuY29kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZXQzID0gKHRoaXMubGV0MyArIHRoaXMubGV0MSAqIDIpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGV0IGYyID0gbmV3IEZ1bmMoKTtcbiAgICAgICAgICAgIGYyLmNvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV0MyA9ICh0aGlzLmxldDMgKyB0aGlzLmxldDIgKiAzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBmMyA9IG5ldyBGdW5jKCk7XG4gICAgICAgICAgICBmMy5jb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxldDMgKiA0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShibG9jayk7XG5cbiAgICAgICAgICAgIGVuZ2luZS5pbnZva2UoZjEsIGYyLCBmMykudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4MSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4MiA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4MyA9IDM7XG4gICAgICAgICAgICAgICAgICAgIHgzICs9IHgxICogMjtcbiAgICAgICAgICAgICAgICAgICAgeDMgKz0geDIgKiAzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgciA9IHgzICogNDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgcik7XG4gICAgICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gYmUgZ2VuZXJhdGVkIGZyb20gbWFya3VwXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBsZXQgYmxvY2sgPSBhY3Rpdml0eU1hcmt1cC5wYXJzZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiQGJsb2NrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldDE6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldDM6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uIGJ1YnUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV0MyArPSB0aGlzLmxldDEgKiAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24ga2l0dHlmdWNrKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxldDMgKz0gdGhpcy5sZXQyICogMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZXQzICogNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGJsb2NrKTtcblxuICAgICAgICAgICAgZW5naW5lLmludm9rZSgpLnRoZW4oXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgeDEgPSAxO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeDIgPSAyO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeDMgPSAzO1xuICAgICAgICAgICAgICAgICAgICB4MyArPSB4MSAqIDI7XG4gICAgICAgICAgICAgICAgICAgIHgzICs9IHgyICogMztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHIgPSB4MyAqIDQ7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIHIpO1xuICAgICAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGJlIGdlbmVyYXRlZCBmcm9tIG1hcmt1cCBzdHJpbmdcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIGxldCBtYXJrdXAgPSB7XG4gICAgICAgICAgICAgICAgXCJAYmxvY2tcIjoge1xuICAgICAgICAgICAgICAgICAgICBsZXQxOiAxLFxuICAgICAgICAgICAgICAgICAgICBsZXQyOiAyLFxuICAgICAgICAgICAgICAgICAgICBsZXQzOiAzLFxuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uIGJ1YnUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZXQzID0gdGhpcy5sZXQzICsgdGhpcy5sZXQxICogMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uIGtpdHR5ZnVjaygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxldDMgPSB0aGlzLmxldDMgKyB0aGlzLmxldDIgKiAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV0MyAqIDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgbWFya3VwU3RyaW5nID0gYWN0aXZpdHlNYXJrdXAuc3RyaW5naWZ5KG1hcmt1cCk7XG4gICAgICAgICAgICBhc3NlcnQub2soXy5pc1N0cmluZyhtYXJrdXBTdHJpbmcpKTtcbiAgICAgICAgICAgIGxldCBibG9jayA9IGFjdGl2aXR5TWFya3VwLnBhcnNlKG1hcmt1cFN0cmluZyk7XG5cbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoYmxvY2spO1xuXG4gICAgICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4MSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4MiA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4MyA9IDM7XG4gICAgICAgICAgICAgICAgICAgIHgzICs9IHgxICogMjtcbiAgICAgICAgICAgICAgICAgICAgeDMgKz0geDIgKiAzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgciA9IHgzICogNDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgcik7XG4gICAgICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcIlBhcmFsbGVsXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoXCJzaG91bGQgd29yayBhcyBleHBlY3RlZCB3aXRoIHN5bmMgYWN0aXZpdGllc1wiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbGV0IGFjdGl2aXR5ID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIkBwYXJhbGxlbFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQxOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV0MSArPSBcImFcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMubGV0MSArPSBcImJcIjsgfSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGFjdGl2aXR5KTtcbiAgICAgICAgICAgIC8vZW5naW5lLmFkZFRyYWNrZXIobmV3IENvbnNvbGVUcmFja2VyKCkpO1xuXG4gICAgICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQubGVuZ3RoLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdFswXSwgXCJhXCIpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0WzFdLCBcImFiXCIpO1xuICAgICAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIHdvcmsgYXMgZXhwZWN0ZWQgd2l0aCBhc3luYyBhY3Rpdml0aWVzXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBsZXQgYWN0aXZpdHkgPSBhY3Rpdml0eU1hcmt1cC5wYXJzZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiQHBhcmFsbGVsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldDE6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZXQxICs9IFwiYVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJ2Z1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5sZXQxICs9IFwiYlwiOyB9J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBCbHVlYmlyZC5kZWxheSgxMDApLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAZnVuY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCbHVlYmlyZChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgZW5naW5lID0gbmV3IEFjdGl2aXR5RXhlY3V0aW9uRW5naW5lKGFjdGl2aXR5KTtcbiAgICAgICAgICAgIC8vZW5naW5lLmFkZFRyYWNrZXIobmV3IENvbnNvbGVUcmFja2VyKCkpO1xuXG4gICAgICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQubGVuZ3RoLCA0KTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdFswXSwgXCJhXCIpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0WzFdLCBcImFiXCIpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0WzJdLCA0Mik7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHRbM10sIDApO1xuICAgICAgICAgICAgICAgIH0pLm5vZGVpZnkoZG9uZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJQaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoXCJzaG91bGQgd29yayBhcyBleHBlY3RlZCB3aXRoIHN5bmMgYWN0aXZpdGllc1wiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbGV0IGFjdGl2aXR5ID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIkBwaWNrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldDE6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZXQxICs9IFwiYVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJ2Z1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5sZXQxICs9IFwiYlwiOyB9J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSBuZXcgQWN0aXZpdHlFeGVjdXRpb25FbmdpbmUoYWN0aXZpdHkpO1xuXG4gICAgICAgICAgICBlbmdpbmUuaW52b2tlKCkudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIFwiYVwiKTtcbiAgICAgICAgICAgICAgICB9KS5ub2RlaWZ5KGRvbmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCB3b3JrIGFzIGV4cGVjdGVkIHdpdGggYXN5bmMgYWN0aXZpdGllc1wiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbGV0IGFjdGl2aXR5ID0gYWN0aXZpdHlNYXJrdXAucGFyc2UoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIkBwaWNrXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkBmdW5jXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJsdWViaXJkLmRlbGF5KDEwMCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQGZ1bmNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJsdWViaXJkKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IG5ldyBBY3Rpdml0eUV4ZWN1dGlvbkVuZ2luZShhY3Rpdml0eSk7XG5cbiAgICAgICAgICAgIGVuZ2luZS5pbnZva2UoKS50aGVuKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgMCk7XG4gICAgICAgICAgICAgICAgfSkubm9kZWlmeShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
