{"version":3,"sources":["activities/compositing.js"],"names":[],"mappings":"AAAA;;AAAY,CAAC;AAEb,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACnC,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;AACnC,IAAI,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC;AACvD,IAAI,uBAAuB,GAAG,OAAO,CAAC,UAAU,CAAC,uBAAuB,CAAC;AACzE,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;AAC9C,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,QAAQ,CAAC,aAAa,EAAE,YAAY;AAChC,MAAE,CAAC,wDAAwD,EAAE,UAAU,IAAI,EAAE;AACzE,YAAI,MAAM,GAAG,IAAI,uBAAuB,CAAC;AACrC,sBAAU,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,kBAAkB,EAAE,OAAO,CAAC;AAC7D,oBAAQ,EAAE;AACN,kBAAE,EAAE,eAAe;AACnB,oBAAI,EAAE;AACF,4BAAQ,EAAE;AACN,0BAAE,EAAE,WAAW;qBAClB;iBACJ;aACJ;SACJ,CAAC,CAAC;;AAEH,aAAK,yBAAC;gBACE,MAAM;;;;;;mCAAS,MAAM,CAAC,MAAM,EAAE;;;AAA9B,kCAAM;;AACV,kCAAM,CAAC,KAAK,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;;;;;;;;SAChD,EAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACtB,CAAC,CAAC;CACN,CAAC,CAAC","file":"activities/compositing.js","sourcesContent":["\"use strict\";\n/* global describe,it */\nlet wf4node = require(\"../../../\");\nlet Func = wf4node.activities.Func;\nlet ConsoleTracker = wf4node.activities.ConsoleTracker;\nlet ActivityExecutionEngine = wf4node.activities.ActivityExecutionEngine;\nlet assert = require(\"assert\");\nlet Bluebird = require(\"bluebird\");\nlet _ = require(\"lodash\");\nlet async = wf4node.common.asyncHelpers.async;\nlet path = require(\"path\");\n\ndescribe(\"compositing\", function () {\n    it(\"should take arguments with same name as in outer scope\", function (done) {\n        let engine = new ActivityExecutionEngine({\n            \"@require\": path.join(__dirname, \"customActivities\", \"hello\"),\n            \"@block\": {\n                to: \"unbornchikken\",\n                args: {\n                    \"@hello\": {\n                        to: \"= this.to\"\n                    }\n                }\n            }\n        });\n\n        async(function*() {\n            let result = yield engine.invoke();\n            assert.equal(result, \"Hello unbornchikken!\");\n        })().nodeify(done);\n    });\n});"],"sourceRoot":"/source/"}