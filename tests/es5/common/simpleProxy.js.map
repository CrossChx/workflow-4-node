{"version":3,"names":[],"mappings":"","sources":["common/simpleProxy.js"],"sourcesContent":["\"use strict\";\n/*global describe,it*/\nlet wf4node = require(\"../../../\");\nlet SimpleProxy = wf4node.common.SimpleProxy;\n\nlet assert = require(\"better-assert\");\nlet _ = require(\"lodash\");\n\ndescribe(\"SimpleProxy\", function() {\n    it(\"should work\", function() {\n        let backend = {\n            name: \"Gabor\",\n            getKeys: function(proxy) {\n                return _.keys(this);\n            },\n            getValue: function(proxy, name) {\n                let v = this[name];\n                if (_.isUndefined(v)) {\n                    throw new Error(`${name} doesn't exists.`);\n                }\n                return v;\n            },\n            setValue: function(proxy, name, value) {\n                return this[name] = value;\n            }\n        };\n        let obj = new SimpleProxy(backend);\n\n        obj.foo = \"bar\";\n\n        assert(obj.foo === \"bar\");\n        assert(obj.name === \"Gabor\");\n        try {\n            let x = obj.punci;\n            assert(false);\n        }\n        catch (e) {\n            _.noop(e);\n        }\n        try {\n            obj.punci = 5;\n            assert(false);\n        }\n        catch (e) {\n            _.noop(e);\n        }\n        obj.name = 33;\n        assert(obj.name === 33);\n        assert(backend.name === 33);\n        backend.punci = \"je\";\n        assert(backend.punci === \"je\");\n        obj.update();\n        assert(obj.punci === \"je\");\n\n        let keys = _.keys(obj).sort();\n        assert(keys.length === 3);\n        assert(keys[0] === \"foo\");\n        assert(obj[keys[0]] === \"bar\");\n        assert(keys[1] === \"name\");\n        assert(obj[keys[1]] === 33);\n        assert(keys[2] === \"punci\");\n        assert(obj[keys[2]] === \"je\");\n\n        delete backend.punci;\n        assert(backend.punci === undefined);\n        try {\n            assert(obj.punci === undefined);\n            assert(false);\n        }\n        catch (e) {\n            _.noop(e);\n        }\n\n        obj.update();\n        assert(obj.punci === undefined);\n\n        keys.length = 0;\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                keys.push(key);\n            }\n        }\n        keys.sort();\n        assert(keys.length === 2);\n        assert(keys[0] === \"foo\");\n        assert(obj[keys[0]] === \"bar\");\n        assert(keys[1] === \"name\");\n        assert(obj[keys[1]] === 33);\n    });\n\n    it(\"should accept new props on update\", function() {\n        let backend = {\n            name: \"Gabor\",\n            getKeys: function(proxy) {\n                return _.keys(this);\n            },\n            getValue: function(proxy, name) {\n                let v = this[name];\n                if (_.isUndefined(v)) {\n                    throw new Error(`${name} doesn't exists.`);\n                }\n                return v;\n            },\n            setValue: function(proxy, name, value) {\n                return this[name] = value;\n            }\n        };\n        let obj = new SimpleProxy(backend);\n\n        assert(backend.name === \"Gabor\");\n        assert(obj.name === \"Gabor\");\n\n        obj.klow = \"mudz\";\n\n        assert(obj.klow === \"mudz\");\n        try {\n            assert(backend.klow === \"mudz\");\n            assert(false);\n        }\n        catch (e) {\n            _.noop(e);\n        }\n        obj.update();\n        assert(obj.klow === \"mudz\");\n        assert(backend.klow === \"mudz\");\n\n        // Ensure that the value originates itself from the backend:\n        backend.klow = \"foo\";\n        assert(obj.klow === \"foo\");\n        assert(backend.klow === \"foo\");\n    });\n});"],"file":"common/simpleProxy.js","sourceRoot":"/source/"}