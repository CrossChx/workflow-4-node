"use strict";
var wf4node = require("../../../");
var InstanceIdParser = wf4node.hosting.InstanceIdParser;
var _ = require("lodash");
var hostingTestCommon = require("./hostingTestCommon");
var MemoryPersistence = wf4node.hosting.MemoryPersistence;
var Serializer = require("backpack-node").system.Serializer;
var WorkflowHost = wf4node.hosting.WorkflowHost;
var asyncHelpers = wf4node.common.asyncHelpers;
var Bluebird = require("bluebird");
var async = asyncHelpers.async;
var util = require("util");
var Activity = wf4node.activities.Activity;
var Block = wf4node.activities.Block;
var assert = require("better-assert");
describe("serializing", function() {
  var doTest = async($traceurRuntime.initGeneratorFunction(function $__8(hostOptions) {
    var now,
        rex,
        host,
        err,
        aDate,
        aMap,
        aSet,
        aResult,
        aRegExp,
        aProp,
        wf;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            now = new Date();
            rex = /abc/gi;
            host = new WorkflowHost(hostOptions);
            err = null;
            host.on("error", function(e) {
              err = e;
            });
            aDate = null;
            aMap = null;
            aSet = null;
            aResult = null;
            aRegExp = null;
            aProp = null;
            wf = {"@workflow": {
                name: "serializerWF",
                aDate: null,
                aMap: null,
                aSet: null,
                aResult: null,
                aRegExp: null,
                "`aCode": function() {
                  return "Hello!";
                },
                args: {"@block": {
                    p: "= this.$parent",
                    args: [function() {
                      assert(this.p.name === "serializerWF");
                    }, {"@method": {
                        methodName: "start",
                        canCreateInstance: true,
                        instanceIdPath: "[0]"
                      }}, {"@assign": {
                        to: "aDate",
                        value: now
                      }}, {"@assign": {
                        to: "aMap",
                        value: function() {
                          var map = new Map();
                          map.set(1, "1");
                          map.set(2, "2");
                          return map;
                        }
                      }}, {"@assign": {
                        to: "aSet",
                        value: function() {
                          var set = new Set();
                          set.add(1);
                          set.add(2);
                          return set;
                        }
                      }}, {"@assign": {
                        to: "aRegExp",
                        value: rex
                      }}, {"@method": {
                        methodName: "get",
                        canCreateInstance: true,
                        instanceIdPath: "[0]"
                      }}, {"@assign": {
                        to: "aResult",
                        value: {"@func": {code: "= this.aCode.code"}}
                      }}, function() {
                      aDate = this.aDate;
                      aMap = this.aMap;
                      aSet = this.aSet;
                      aResult = this.aResult;
                      aRegExp = this.aRegExp;
                      aProp = this.p.name;
                    }]
                  }}
              }};
            $ctx.state = 24;
            break;
          case 24:
            $ctx.pushTry(null, 16);
            $ctx.state = 18;
            break;
          case 18:
            host.registerWorkflow(wf);
            $ctx.state = 10;
            break;
          case 10:
            $ctx.state = 2;
            return host.invokeMethod("serializerWF", "start", "0");
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          case 4:
            host.shutdown();
            host = new WorkflowHost(hostOptions);
            host.registerWorkflow(wf);
            host.on("error", function(e) {
              err = e;
            });
            $ctx.state = 12;
            break;
          case 12:
            $ctx.state = 6;
            return host.invokeMethod("serializerWF", "get", "0");
          case 6:
            $ctx.maybeThrow();
            $ctx.state = 8;
            break;
          case 8:
            assert(_.isDate(aDate));
            assert(aDate.getTime() === now.getTime());
            assert(aMap instanceof Map);
            assert(aMap.get(1) === "1");
            assert(aMap.get(2) === "2");
            assert(aMap.size === 2);
            assert(aSet instanceof Set);
            assert(aSet.has(1));
            assert(aSet.has(2));
            assert(aSet.size === 2);
            assert(aRegExp instanceof RegExp);
            assert(aRegExp.pattern === rex.pattern);
            assert(aRegExp.flags === rex.flags);
            assert(aResult === "Hello!");
            assert(aProp === "serializerWF");
            if (err) {
              throw err;
            }
            $ctx.state = 16;
            $ctx.finallyFallThrough = -2;
            break;
          case 16:
            $ctx.popTry();
            $ctx.state = 22;
            break;
          case 22:
            host.shutdown();
            $ctx.state = 20;
            break;
          case 20:
            $ctx.state = $ctx.finallyFallThrough;
            break;
          default:
            return $ctx.end();
        }
    }, $__8, this);
  }));
  it("should serialize Date, code, Map, Set, RegExp without a serializer", function(done) {
    doTest({
      persistence: new MemoryPersistence(),
      lazyPersistence: true,
      serializer: null,
      alwaysLoadState: false
    }).nodeify(done);
  });
  it("should serialize Date, code, Map, Set, RegExp with a serializer", function(done) {
    doTest({
      persistence: new MemoryPersistence(),
      lazyPersistence: true,
      serializer: new Serializer(),
      alwaysLoadState: false
    }).nodeify(done);
  });
});
//# sourceMappingURL=data:application/json;base64,
