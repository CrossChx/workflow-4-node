"use strict";
var wf4node = require("../../../../");
var MongoDDPersistence = require("wf4node-mongodb-persistence").MongoDDPersistence;
var hostingTestCommon = require("../hostingTestCommon");
var Serializer = require("backpack-node").system.Serializer;
var connStr = process.env.MONGO_URL;
var persistence = connStr ? new MongoDDPersistence({connection: connStr}) : null;
if (persistence) {
  describe("WorkflowHost", function() {
    this.timeout(5000);
    this.beforeEach(function(done) {
      persistence.__clear().nodeify(done);
    });
    function getInfo(options) {
      return ("lazy: " + (options.lazyPersistence ? "yes" : "no") + ", serializer: " + (options.serializer ? "yes" : "no") + ", alwaysLoad: " + (options.alwaysLoadState ? "yes" : "no"));
    }
    function testBasic(options) {
      it("should run by: " + getInfo(options), function(done) {
        hostingTestCommon.doBasicHostTest(options).nodeify(done);
      });
    }
    function testCalc(options) {
      it("should run by: " + getInfo(options), function(done) {
        hostingTestCommon.doCalculatorTest(options).nodeify(done);
      });
    }
    function testDelayTo(options) {
      it("should run by: " + getInfo(options), function(done) {
        hostingTestCommon.doDelayTest(options).nodeify(done);
      });
    }
    var allOptions = [{
      persistence: persistence,
      lazyPersistence: false,
      serializer: null,
      alwaysLoadState: false
    }, {
      persistence: persistence,
      lazyPersistence: true,
      serializer: null,
      alwaysLoadState: false
    }, {
      persistence: persistence,
      lazyPersistence: false,
      serializer: new Serializer(),
      alwaysLoadState: false
    }, {
      persistence: persistence,
      lazyPersistence: true,
      serializer: new Serializer(),
      alwaysLoadState: false
    }, {
      persistence: persistence,
      lazyPersistence: false,
      serializer: new Serializer(),
      alwaysLoadState: true
    }, {
      persistence: persistence,
      lazyPersistence: true,
      serializer: new Serializer(),
      alwaysLoadState: true
    }];
    describe("With MongoDB Persistence", function() {
      describe("Basic Example", function() {
        var $__4 = true;
        var $__5 = false;
        var $__6 = undefined;
        try {
          for (var $__2 = void 0,
              $__1 = (allOptions)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
            var opt = $__2.value;
            {
              testBasic(opt);
            }
          }
        } catch ($__7) {
          $__5 = true;
          $__6 = $__7;
        } finally {
          try {
            if (!$__4 && $__1.return != null) {
              $__1.return();
            }
          } finally {
            if ($__5) {
              throw $__6;
            }
          }
        }
      });
      describe("Calculator Example", function() {
        var $__4 = true;
        var $__5 = false;
        var $__6 = undefined;
        try {
          for (var $__2 = void 0,
              $__1 = (allOptions)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
            var opt = $__2.value;
            {
              testCalc(opt);
            }
          }
        } catch ($__7) {
          $__5 = true;
          $__6 = $__7;
        } finally {
          try {
            if (!$__4 && $__1.return != null) {
              $__1.return();
            }
          } finally {
            if ($__5) {
              throw $__6;
            }
          }
        }
      });
      describe("DelayTo Example", function() {
        var $__4 = true;
        var $__5 = false;
        var $__6 = undefined;
        try {
          for (var $__2 = void 0,
              $__1 = (allOptions)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
            var opt = $__2.value;
            {
              testDelayTo(opt);
            }
          }
        } catch ($__7) {
          $__5 = true;
          $__6 = $__7;
        } finally {
          try {
            if (!$__4 && $__1.return != null) {
              $__1.return();
            }
          } finally {
            if ($__5) {
              throw $__6;
            }
          }
        }
      });
    });
  });
}
//# sourceMappingURL=data:application/json;base64,
