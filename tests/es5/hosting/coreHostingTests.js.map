{"version":3,"names":[],"mappings":"","sources":["hosting/coreHostingTests.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet InstanceIdParser = wf4node.hosting.InstanceIdParser;\r\nlet _ = require(\"lodash\");\r\nlet hostingTestCommon = require(\"./hostingTestCommon\");\r\nlet MemoryPersistence = wf4node.hosting.MemoryPersistence;\r\nlet Serializer = require(\"backpack-node\").system.Serializer;\r\n\r\nlet assert = require(\"assert\");\r\n\r\ndescribe(\"InstanceIdParser\", function () {\r\n    describe(\"parse()\", function () {\r\n        it(\"should understand common paths\", function () {\r\n            let p = new InstanceIdParser();\r\n            assert.equal(p.parse(\"this\", 1), 1);\r\n            assert.equal(p.parse(\"[0]\", [1]), 1);\r\n            assert.equal(p.parse(\"[0]\", [4, 5]), 4);\r\n            assert.equal(p.parse(\"[1].id\", [{ id: 1 }, { id: 2 }]), 2);\r\n            assert.equal(p.parse(\"id[0].a\", { id: [{ a: \"foo\" }] }), \"foo\");\r\n        });\r\n    });\r\n});\r\n\r\ndescribe(\"WorkflowHost\", function () {\r\n    this.timeout(60000);\r\n\r\n    function getInfo(options) {\r\n        return `persistence: ${options.persistence ? \"on\" : \"off\"}, lazy: ${options.lazyPersistence ? \"yes\" : \"no\"}, serializer: ${options.serializer ? \"yes\" : \"no\"}, alwaysLoad: ${options.alwaysLoadState ? \"yes\" : \"no\"}`;\r\n    }\r\n\r\n    function testBasic(options) {\r\n        it(\"should run by: \" + getInfo(options), function (done) {\r\n            hostingTestCommon.doBasicHostTest(options).nodeify(done);\r\n        });\r\n    }\r\n\r\n    function testCalc(options) {\r\n        it(\"should run by: \" + getInfo(options), function (done) {\r\n            hostingTestCommon.doCalculatorTest(options).nodeify(done);\r\n        });\r\n    }\r\n\r\n    function testDelayTo(options) {\r\n        it(\"should run by: \" + getInfo(options), function (done) {\r\n            hostingTestCommon.doDelayTest(options).nodeify(done);\r\n        });\r\n    }\r\n\r\n    function testStopOutdatedVersions(options) {\r\n        it(\"should run by: \" + getInfo(options), function (done) {\r\n            hostingTestCommon.doStopOutdatedVersionsTest(options).nodeify(done);\r\n        });\r\n    }\r\n\r\n    let allOptions = [\r\n        {\r\n            persistence: null,\r\n            lazyPersistence: false,\r\n            serializer: null,\r\n            alwaysLoadState: false\r\n        },\r\n        {\r\n            persistence: new MemoryPersistence(),\r\n            lazyPersistence: false,\r\n            serializer: null,\r\n            alwaysLoadState: false\r\n        },\r\n        {\r\n            persistence: new MemoryPersistence(),\r\n            lazyPersistence: true,\r\n            serializer: null,\r\n            alwaysLoadState: false\r\n        },\r\n        {\r\n            persistence: new MemoryPersistence(),\r\n            lazyPersistence: false,\r\n            serializer: new Serializer(),\r\n            alwaysLoadState: false\r\n        },\r\n        {\r\n            persistence: new MemoryPersistence(),\r\n            lazyPersistence: true,\r\n            serializer: new Serializer(),\r\n            alwaysLoadState: false\r\n        },\r\n        {\r\n            persistence: new MemoryPersistence(),\r\n            lazyPersistence: false,\r\n            serializer: new Serializer(),\r\n            alwaysLoadState: true\r\n        },\r\n        {\r\n            persistence: new MemoryPersistence(),\r\n            lazyPersistence: true,\r\n            serializer: new Serializer(),\r\n            alwaysLoadState: true\r\n        }\r\n    ];\r\n\r\n    describe(\"Without Persistence and With Memory Persistence\", function () {\r\n        describe(\"Basic Example\", function () {\r\n            for (let opt of allOptions) {\r\n                if (opt.persistence) {\r\n                    opt.persistence.clear();\r\n                }\r\n                testBasic(opt);\r\n            }\r\n        });\r\n\r\n        describe(\"Calculator Example\", function () {\r\n            for (let opt of allOptions) {\r\n                if (opt.persistence) {\r\n                    opt.persistence.clear();\r\n                }\r\n                testCalc(opt);\r\n            }\r\n        });\r\n\r\n        describe(\"DelayTo Example\", function () {\r\n            for (let opt of allOptions) {\r\n                if (opt.persistence) {\r\n                    opt.persistence.clear();\r\n                }\r\n                testDelayTo(opt);\r\n            }\r\n        });\r\n\r\n        describe(\"StopOutdatedVersions Example\", function () {\r\n            for (let opt of allOptions) {\r\n                if (opt.persistence) {\r\n                    opt.persistence.clear();\r\n                }\r\n                testStopOutdatedVersions(opt);\r\n            }\r\n        });\r\n    });\r\n});\r\n"],"file":"hosting/coreHostingTests.js","sourceRoot":"/source/"}