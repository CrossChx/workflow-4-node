{"version":3,"names":[],"mappings":"","sources":["hosting/coreHostingTests.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet InstanceIdParser = wf4node.hosting.InstanceIdParser;\nlet _ = require(\"lodash\");\nlet hostingTestCommon = require(\"./hostingTestCommon\");\nlet MemoryPersistence = wf4node.hosting.MemoryPersistence;\nlet Serializer = require(\"backpack-node\").system.Serializer;\n\nlet assert = require(\"assert\");\n\ndescribe(\"InstanceIdParser\", function () {\n    describe(\"parse()\", function () {\n        it(\"should understand common paths\", function () {\n            let p = new InstanceIdParser();\n            assert.equal(p.parse(\"this\", 1), 1);\n            assert.equal(p.parse(\"[0]\", [1]), 1);\n            assert.equal(p.parse(\"[0]\", [4, 5]), 4);\n            assert.equal(p.parse(\"[1].id\", [{ id: 1 }, { id: 2 }]), 2);\n            assert.equal(p.parse(\"id[0].a\", { id: [{ a: \"foo\" }] }), \"foo\");\n        });\n    });\n});\n\ndescribe(\"WorkflowHost\", function () {\n    this.timeout(60000);\n\n    function getInfo(options) {\n        return `persistence: ${options.persistence ? \"on\" : \"off\"}, lazy: ${options.lazyPersistence ? \"yes\" : \"no\"}, serializer: ${options.serializer ? \"yes\" : \"no\"}, alwaysLoad: ${options.alwaysLoadState ? \"yes\" : \"no\"}`;\n    }\n\n    function testBasic(options) {\n        it(\"should run by: \" + getInfo(options), function (done) {\n            hostingTestCommon.doBasicHostTest(options).nodeify(done);\n        });\n    }\n\n    function testCalc(options) {\n        it(\"should run by: \" + getInfo(options), function (done) {\n            hostingTestCommon.doCalculatorTest(options).nodeify(done);\n        });\n    }\n\n    function testDelayTo(options) {\n        it(\"should run by: \" + getInfo(options), function (done) {\n            hostingTestCommon.doDelayTest(options).nodeify(done);\n        });\n    }\n\n    function testStopOutdatedVersions(options) {\n        it(\"should run by: \" + getInfo(options), function (done) {\n            hostingTestCommon.doStopOutdatedVersionsTest(options).nodeify(done);\n        });\n    }\n\n    let allOptions = [\n        {\n            persistence: null,\n            lazyPersistence: false,\n            serializer: null,\n            alwaysLoadState: false\n        },\n        {\n            persistence: new MemoryPersistence(),\n            lazyPersistence: false,\n            serializer: null,\n            alwaysLoadState: false\n        },\n        {\n            persistence: new MemoryPersistence(),\n            lazyPersistence: true,\n            serializer: null,\n            alwaysLoadState: false\n        },\n        {\n            persistence: new MemoryPersistence(),\n            lazyPersistence: false,\n            serializer: new Serializer(),\n            alwaysLoadState: false\n        },\n        {\n            persistence: new MemoryPersistence(),\n            lazyPersistence: true,\n            serializer: new Serializer(),\n            alwaysLoadState: false\n        },\n        {\n            persistence: new MemoryPersistence(),\n            lazyPersistence: false,\n            serializer: new Serializer(),\n            alwaysLoadState: true\n        },\n        {\n            persistence: new MemoryPersistence(),\n            lazyPersistence: true,\n            serializer: new Serializer(),\n            alwaysLoadState: true\n        }\n    ];\n\n    describe(\"Without Persistence and With Memory Persistence\", function () {\n        describe(\"Basic Example\", function () {\n            for (let opt of allOptions) {\n                if (opt.persistence) {\n                    opt.persistence.clear();\n                }\n                testBasic(opt);\n            }\n        });\n\n        describe(\"Calculator Example\", function () {\n            for (let opt of allOptions) {\n                if (opt.persistence) {\n                    opt.persistence.clear();\n                }\n                testCalc(opt);\n            }\n        });\n\n        describe(\"DelayTo Example\", function () {\n            for (let opt of allOptions) {\n                if (opt.persistence) {\n                    opt.persistence.clear();\n                }\n                testDelayTo(opt);\n            }\n        });\n\n        describe(\"StopOutdatedVersions Example\", function () {\n            for (let opt of allOptions) {\n                if (opt.persistence) {\n                    opt.persistence.clear();\n                }\n                testStopOutdatedVersions(opt);\n            }\n        });\n    });\n});\n"],"file":"hosting/coreHostingTests.js","sourceRoot":"/source/"}