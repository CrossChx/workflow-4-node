{"version":3,"sources":["hosting/hostingTestCommon.js"],"names":[],"mappings":"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","file":"hosting/hostingTestCommon.js","sourcesContent":["\"use strict\";\n\nlet wf4node = require(\"../../../\");\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet WorkflowHost = wf4node.hosting.WorkflowHost;\nlet ConsoleTracker = wf4node.activities.ConsoleTracker;\nlet _ = require(\"lodash\");\nlet asyncHelpers = wf4node.common.asyncHelpers;\nlet Bluebird = require(\"bluebird\");\nlet async = asyncHelpers.async;\nlet assert = require(\"assert\");\nrequire(\"date-utils\");\nlet errors = wf4node.common.errors;\n\nmodule.exports = {\n    doBasicHostTest: async(function* (hostOptions) {\n        hostOptions = _.extend(\n            {\n                enablePromotions: true\n            },\n            hostOptions);\n\n        let workflow = {\n            \"@workflow\": {\n                name: \"wf\",\n                \"!v\": null,\n                \"!x\": 0,\n                args: [\n                    {\n                        \"@beginMethod\": {\n                            methodName: \"foo\",\n                            canCreateInstance: true,\n                            instanceIdPath: \"[0]\",\n                            \"@to\": \"v\"\n                        }\n                    },\n                    {\n                        \"@endMethod\": {\n                            methodName: \"foo\",\n                            result: \"= this.v[0] * this.v[0]\",\n                            \"@to\": \"v\"\n                        }\n                    },\n                    {\n                        \"@assign\": {\n                            value: 666,\n                            to: \"x\"\n                        }\n                    },\n                    {\n                        \"@method\": {\n                            methodName: \"bar\",\n                            instanceIdPath: \"[0]\",\n                            result: \"= this.v * 2\"\n                        }\n                    },\n                    \"some string for wf result but not for the method result\"\n                ]\n            }\n        };\n\n        let error = null;\n        let host = new WorkflowHost(hostOptions);\n        host.once(WorkflowHost.events.warn, function (e) {\n            error = e;\n        });\n        try {\n            //host.addTracker(new ConsoleTracker());\n\n            host.registerWorkflow(workflow);\n            let result = yield (host.invokeMethod(\"wf\", \"foo\", [5]));\n\n            assert.equal(result, 25);\n\n            // Verify promotedProperties:\n            if (hostOptions && hostOptions.persistence) {\n                let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", 5);\n                assert.ok(promotedProperties);\n                assert.equal(promotedProperties.v, 25);\n                assert.equal(promotedProperties.x, 666);\n                assert.equal(_.keys(promotedProperties).length, 2);\n            }\n\n            result = yield (host.invokeMethod(\"wf\", \"bar\", [5]));\n\n            assert.equal(result, 50);\n        }\n        finally {\n            host.shutdown();\n        }\n\n        assert.deepEqual(error, null);\n    }),\n\n    doCalculatorTest: async(function* (hostOptions) {\n        let workflow = {\n            \"@workflow\": {\n                name: \"calculator\",\n                running: true,\n                inputArgs: null,\n                currentValue: 0,\n                args: [\n                    {\n                        \"@while\": {\n                            condition: \"= this.running\",\n                            args: {\n                                \"@pick\": [\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Add block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Add method\",\n                                                        methodName: \"add\",\n                                                        instanceIdPath: \"[0].id\",\n                                                        canCreateInstance: true,\n                                                        \"@to\": \"inputArgs\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: \"= this.currentValue + this.inputArgs[0].value\",\n                                                        to: \"currentValue\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Subtract block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Subtract method\",\n                                                        methodName: \"subtract\",\n                                                        instanceIdPath: \"[0].id\",\n                                                        canCreateInstance: true,\n                                                        \"@to\": \"inputArgs\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: \"= this.currentValue - this.inputArgs[0].value\",\n                                                        to: \"currentValue\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Multiply block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Multiply method\",\n                                                        methodName: \"multiply\",\n                                                        instanceIdPath: \"[0].id\",\n                                                        canCreateInstance: true,\n                                                        \"@to\": \"inputArgs\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: \"= this.currentValue * this.inputArgs[0].value\",\n                                                        to: \"currentValue\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Divide block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Divide method\",\n                                                        methodName: \"divide\",\n                                                        instanceIdPath: \"[0].id\",\n                                                        canCreateInstance: true,\n                                                        \"@to\": \"inputArgs\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: \"= this.currentValue / this.inputArgs[0].value\",\n                                                        to: \"currentValue\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"@method\": {\n                                            displayName: \"Equals method\",\n                                            methodName: \"equals\",\n                                            instanceIdPath: \"[0].id\",\n                                            canCreateInstance: true,\n                                            result: \"= this.currentValue\"\n                                        }\n                                    },\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Reset block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Reset method\",\n                                                        methodName: \"reset\",\n                                                        instanceIdPath: \"[0].id\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: false,\n                                                        to: \"running\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        };\n\n        let error = null;\n        let host = new WorkflowHost(hostOptions);\n        host.once(WorkflowHost.events.warn, function (e) {\n            error = e;\n        });\n\n        try {\n            host.registerWorkflow(workflow);\n            //host.addTracker(new ConsoleTracker());\n\n            let arg = { id: Math.floor((Math.random() * 1000000000) + 1) };\n\n            let result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 0);\n\n            arg.value = 55;\n            yield (host.invokeMethod(\"calculator\", \"add\", [arg]));\n\n            if (hostOptions && hostOptions.persistence) {\n                host.shutdown();\n                host = new WorkflowHost(hostOptions);\n                host.once(\"error\", function (e) {\n                    error = e;\n                });\n                host.registerWorkflow(workflow);\n            }\n\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 55);\n\n            arg.value = 5;\n            yield (host.invokeMethod(\"calculator\", \"divide\", [arg]));\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 11);\n\n            arg.value = 1;\n            yield (host.invokeMethod(\"calculator\", \"subtract\", [arg]));\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 10);\n\n            arg.value = 100;\n            yield (host.invokeMethod(\"calculator\", \"multiply\", [arg]));\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 1000);\n\n            delete arg.value;\n            yield (host.invokeMethod(\"calculator\", \"reset\", [arg]));\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 0);\n\n            delete arg.value;\n            yield (host.invokeMethod(\"calculator\", \"reset\", [arg]));\n        }\n        finally {\n            host.shutdown();\n        }\n\n        assert.deepEqual(error, null);\n    }),\n\n    doDelayTest: async(function* (hostOptions) {\n        hostOptions = _.extend(\n            {\n                enablePromotions: true,\n                wakeUpOptions: {\n                    interval: 500\n                }\n            },\n            hostOptions);\n\n        var i = 0;\n        let workflow = {\n            \"@workflow\": {\n                name: \"wf\",\n                done: false,\n                \"!i\": 0,\n                args: {\n                    \"@while\": {\n                        condition: \"= !this.done\",\n                        args: {\n                            \"@pick\": [\n                                {\n                                    \"@method\": {\n                                        canCreateInstance: true,\n                                        methodName: \"start\",\n                                        instanceIdPath: \"[0]\"\n                                    }\n                                },\n                                {\n                                    \"@block\": [\n                                        {\n                                            \"@method\": {\n                                                methodName: \"stop\",\n                                                instanceIdPath: \"[0]\"\n                                            }\n                                        },\n                                        {\n                                            \"@assign\": {\n                                                to: \"done\",\n                                                value: true\n                                            }\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"@block\": [\n                                        {\n                                            \"@delay\": {\n                                                ms: 100\n                                            }\n                                        },\n                                        {\n                                            \"@assign\": {\n                                                to: \"i\",\n                                                value: \"= this.i + 1\"\n                                            }\n                                        },\n                                        function () {\n                                            i = this.i;\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        };\n\n        let error = null;\n        let host = new WorkflowHost(hostOptions);\n        host.once(WorkflowHost.events.warn, function (e) {\n            error = e;\n        });\n        try {\n            //host.addTracker(new ConsoleTracker());\n            host.registerWorkflow(workflow);\n\n            let id = \"1\";\n\n            // That should start the workflow:\n            let result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // That should do nothing particular, but should work:\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // Calling unexisted method should throw:\n            try {\n                yield (host.invokeMethod(\"wf\", \"pupu\", id));\n                assert(false, \"That should throw!\");\n            }\n            catch (e) {\n                if (!(e instanceof errors.MethodNotFoundError)) {\n                    throw e;\n                }\n            }\n\n            // That should do nothing particular, but should work again:\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // Let's wait.\n            yield Bluebird.delay(1000);\n\n            if (error) {\n                let pError = error;\n                error = null;\n                throw pError;\n            }\n\n            // Verify promotedProperties:\n            if (hostOptions && hostOptions.persistence) {\n                let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\n                assert(promotedProperties);\n                assert(promotedProperties.i > 0);\n                assert.equal(_.keys(promotedProperties).length, 1);\n            }\n            else {\n                assert(i > 0);\n            }\n\n            // That should do nothing particular, but should work again:\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // Stop:\n            result = yield (host.invokeMethod(\"wf\", \"stop\", id));\n            assert(!result);\n        }\n        catch (e) {\n            if (!/is not supported without persistence/.test(e.message)) {\n                throw e;\n            }\n            assert(!hostOptions.persistence);\n        }\n        finally {\n            host.shutdown();\n        }\n\n        assert.deepEqual(error, null);\n    }),\n\n    doStopOutdatedVersionsTest: async(function* (hostOptions) {\n        if (!hostOptions.persistence) {\n            // This method has no meaning if there is no persistence.\n            return;\n        }\n\n        hostOptions = _.extend(\n            {\n                enablePromotions: true,\n                wakeUpOptions: {\n                    interval: 1000\n                }\n            },\n            hostOptions);\n\n        let trace = [];\n        let def = {\n            \"@workflow\": {\n                name: \"wf\",\n                \"!i\": 0,\n                args: [\n                    function () {\n                        this.i++;\n                    },\n                    {\n                        \"@method\": {\n                            canCreateInstance: true,\n                            methodName: \"start\",\n                            instanceIdPath: \"[0]\"\n                        }\n                    },\n                    {\n                        \"@func\": {\n                            args: {\n                                \"@instanceData\": {}\n                            },\n                            code: function (data) {\n                                trace.push(data);\n                            }\n                        }\n                    },\n                    {\n                        \"@delay\": {\n                            ms: 100000\n                        }\n                    },\n                    {\n                        \"@func\": {\n                            args: {\n                                \"@instanceData\": {}\n                            },\n                            code: function (data) {\n                                trace.push(data);\n                            }\n                        }\n                    },\n                    function () {\n                        this.i++;\n                    },\n                    { \"@throw\": { error: \"Huh.\" } }\n                ]\n            }\n        };\n        let workflow0 = activityMarkup.parse(def);\n        def[\"@workflow\"].version = 1;\n        let workflow1 = activityMarkup.parse(def);\n\n        let error = null;\n        let host = new WorkflowHost(hostOptions);\n        host.once(WorkflowHost.events.warn, function (e) {\n            error = e;\n        });\n        try {\n            host.registerWorkflow(workflow0);\n\n            let id = \"1\";\n\n            // That should start the workflow:\n            let result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // That should fail, because control flow has been stepped over:\n            try {\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\n                assert(false);\n            }\n            catch (e) {\n                assert(e.message.indexOf(\"bookmark doesn't exist\") > 0);\n                error = null;\n            }\n\n            // Let's wait.\n            yield Bluebird.delay(100);\n\n            // Verify promotedProperties:\n            let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\n            assert(promotedProperties);\n            assert(promotedProperties.i === 1);\n            assert.equal(_.keys(promotedProperties).length, 1);\n\n            // Start another:\n            host.shutdown();\n            host = new WorkflowHost(hostOptions);\n            host.once(\"error\", function (e) {\n                error = e;\n            });\n\n            host.registerWorkflow(workflow1);\n\n            // That should fail, because an older version is already running:\n            try {\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\n                assert(false);\n            }\n            catch (e) {\n                // In persistence it's a version 0 workflow, but that's not registered in the new host, so if fails:\n                assert(e.message.indexOf(\"has not been registered\") > 0);\n                error = null;\n            }\n\n            // Now, we're stopping all old instances:\n            yield host.stopDeprecatedVersions(\"wf\");\n\n            // Verify promotedProperties:\n            promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\n            assert(promotedProperties === null);\n\n            // Ok, let's start over!\n\n            // That should start the workflow:\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // That should fail, because control flow has been stepped over:\n            try {\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\n                assert(false);\n            }\n            catch (e) {\n                assert(e.message.indexOf(\"bookmark doesn't exist\") > 0);\n                error = null;\n            }\n\n            // Let's wait.\n            yield Bluebird.delay(100);\n\n            // Verify promotedProperties:\n            promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\n            assert(promotedProperties);\n            assert(promotedProperties.i === 1);\n            assert.equal(_.keys(promotedProperties).length, 1);\n\n            assert(trace.length === 2);\n            assert(trace[0].workflowName === \"wf\");\n            assert(_.isString(trace[0].workflowVersion));\n            assert(trace[0].workflowVersion.length > 0);\n            assert(trace[0].instanceId === id);\n            assert(trace[1].workflowName === \"wf\");\n            assert(_.isString(trace[1].workflowVersion));\n            assert(trace[1].workflowVersion.length > 0);\n            assert(trace[1].instanceId === id);\n            assert(trace[0].workflowVersion !== trace[1].workflowVersion);\n        }\n        finally {\n            host.shutdown();\n        }\n\n        assert.deepEqual(error, null);\n    })\n};\n"],"sourceRoot":"/source/"}