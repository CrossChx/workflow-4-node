{"version":3,"names":[],"mappings":"","sources":["hosting/hostingTestCommon.js"],"sourcesContent":["\"use strict\";\n\nlet wf4node = require(\"../../../\");\nlet activityMarkup = wf4node.activities.activityMarkup;\nlet WorkflowHost = wf4node.hosting.WorkflowHost;\nlet ConsoleTracker = wf4node.activities.ConsoleTracker;\nlet _ = require(\"lodash\");\nlet asyncHelpers = wf4node.common.asyncHelpers;\nlet Bluebird = require(\"bluebird\");\nlet async = asyncHelpers.async;\nlet assert = require(\"assert\");\nrequire(\"date-utils\");\nlet errors = wf4node.common.errors;\n\nmodule.exports = {\n    doBasicHostTest: async(function* (hostOptions) {\n        hostOptions = _.extend(\n            {\n                enablePromotions: true\n            },\n            hostOptions);\n\n        let workflow = {\n            \"@workflow\": {\n                name: \"wf\",\n                \"!v\": null,\n                \"!x\": 0,\n                args: [\n                    {\n                        \"@beginMethod\": {\n                            methodName: \"foo\",\n                            canCreateInstance: true,\n                            instanceIdPath: \"[0]\",\n                            \"@to\": \"v\"\n                        }\n                    },\n                    {\n                        \"@endMethod\": {\n                            methodName: \"foo\",\n                            result: \"= this.v[0] * this.v[0]\",\n                            \"@to\": \"v\"\n                        }\n                    },\n                    {\n                        \"@assign\": {\n                            value: 666,\n                            to: \"x\"\n                        }\n                    },\n                    {\n                        \"@method\": {\n                            methodName: \"bar\",\n                            instanceIdPath: \"[0]\",\n                            result: \"= this.v * 2\"\n                        }\n                    },\n                    \"some string for wf result but not for the method result\"\n                ]\n            }\n        };\n\n        let error = null;\n        let host = new WorkflowHost(hostOptions);\n        host.once(WorkflowHost.events.warn, function (e) {\n            error = e;\n        });\n        try {\n            //host.addTracker(new ConsoleTracker());\n\n            host.registerWorkflow(workflow);\n            let result = yield (host.invokeMethod(\"wf\", \"foo\", [5]));\n\n            assert.equal(result, 25);\n\n            // Verify promotedProperties:\n            if (hostOptions && hostOptions.persistence) {\n                let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", 5);\n                assert.ok(promotedProperties);\n                assert.equal(promotedProperties.v, 25);\n                assert.equal(promotedProperties.x, 666);\n                assert.equal(_.keys(promotedProperties).length, 2);\n            }\n\n            result = yield (host.invokeMethod(\"wf\", \"bar\", [5]));\n\n            assert.equal(result, 50);\n        }\n        finally {\n            host.shutdown();\n        }\n\n        assert.deepEqual(error, null);\n    }),\n\n    doCalculatorTest: async(function* (hostOptions) {\n        let workflow = {\n            \"@workflow\": {\n                name: \"calculator\",\n                running: true,\n                inputArgs: null,\n                currentValue: 0,\n                args: [\n                    {\n                        \"@while\": {\n                            condition: \"= this.running\",\n                            args: {\n                                \"@pick\": [\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Add block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Add method\",\n                                                        methodName: \"add\",\n                                                        instanceIdPath: \"[0].id\",\n                                                        canCreateInstance: true,\n                                                        \"@to\": \"inputArgs\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: \"= this.currentValue + this.inputArgs[0].value\",\n                                                        to: \"currentValue\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Subtract block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Subtract method\",\n                                                        methodName: \"subtract\",\n                                                        instanceIdPath: \"[0].id\",\n                                                        canCreateInstance: true,\n                                                        \"@to\": \"inputArgs\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: \"= this.currentValue - this.inputArgs[0].value\",\n                                                        to: \"currentValue\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Multiply block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Multiply method\",\n                                                        methodName: \"multiply\",\n                                                        instanceIdPath: \"[0].id\",\n                                                        canCreateInstance: true,\n                                                        \"@to\": \"inputArgs\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: \"= this.currentValue * this.inputArgs[0].value\",\n                                                        to: \"currentValue\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Divide block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Divide method\",\n                                                        methodName: \"divide\",\n                                                        instanceIdPath: \"[0].id\",\n                                                        canCreateInstance: true,\n                                                        \"@to\": \"inputArgs\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: \"= this.currentValue / this.inputArgs[0].value\",\n                                                        to: \"currentValue\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"@method\": {\n                                            displayName: \"Equals method\",\n                                            methodName: \"equals\",\n                                            instanceIdPath: \"[0].id\",\n                                            canCreateInstance: true,\n                                            result: \"= this.currentValue\"\n                                        }\n                                    },\n                                    {\n                                        \"@block\": {\n                                            displayName: \"Reset block\",\n                                            args: [\n                                                {\n                                                    \"@method\": {\n                                                        displayName: \"Reset method\",\n                                                        methodName: \"reset\",\n                                                        instanceIdPath: \"[0].id\"\n                                                    }\n                                                },\n                                                {\n                                                    \"@assign\": {\n                                                        value: false,\n                                                        to: \"running\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        };\n\n        let error = null;\n        let host = new WorkflowHost(hostOptions);\n        host.once(WorkflowHost.events.warn, function (e) {\n            error = e;\n        });\n\n        try {\n            host.registerWorkflow(workflow);\n            //host.addTracker(new ConsoleTracker());\n\n            let arg = { id: Math.floor((Math.random() * 1000000000) + 1) };\n\n            let result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 0);\n\n            arg.value = 55;\n            yield (host.invokeMethod(\"calculator\", \"add\", [arg]));\n\n            if (hostOptions && hostOptions.persistence) {\n                host.shutdown();\n                host = new WorkflowHost(hostOptions);\n                host.once(\"error\", function (e) {\n                    error = e;\n                });\n                host.registerWorkflow(workflow);\n            }\n\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 55);\n\n            arg.value = 5;\n            yield (host.invokeMethod(\"calculator\", \"divide\", [arg]));\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 11);\n\n            arg.value = 1;\n            yield (host.invokeMethod(\"calculator\", \"subtract\", [arg]));\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 10);\n\n            arg.value = 100;\n            yield (host.invokeMethod(\"calculator\", \"multiply\", [arg]));\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 1000);\n\n            delete arg.value;\n            yield (host.invokeMethod(\"calculator\", \"reset\", [arg]));\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\n            assert.equal(result, 0);\n\n            delete arg.value;\n            yield (host.invokeMethod(\"calculator\", \"reset\", [arg]));\n        }\n        finally {\n            host.shutdown();\n        }\n\n        assert.deepEqual(error, null);\n    }),\n\n    doDelayTest: async(function* (hostOptions) {\n        hostOptions = _.extend(\n            {\n                enablePromotions: true,\n                wakeUpOptions: {\n                    interval: 500\n                }\n            },\n            hostOptions);\n\n        var i = 0;\n        let workflow = {\n            \"@workflow\": {\n                name: \"wf\",\n                done: false,\n                \"!i\": 0,\n                args: {\n                    \"@while\": {\n                        condition: \"= !this.done\",\n                        args: {\n                            \"@pick\": [\n                                {\n                                    \"@method\": {\n                                        canCreateInstance: true,\n                                        methodName: \"start\",\n                                        instanceIdPath: \"[0]\"\n                                    }\n                                },\n                                {\n                                    \"@block\": [\n                                        {\n                                            \"@method\": {\n                                                methodName: \"stop\",\n                                                instanceIdPath: \"[0]\"\n                                            }\n                                        },\n                                        {\n                                            \"@assign\": {\n                                                to: \"done\",\n                                                value: true\n                                            }\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"@block\": [\n                                        {\n                                            \"@delay\": {\n                                                ms: 100\n                                            }\n                                        },\n                                        {\n                                            \"@assign\": {\n                                                to: \"i\",\n                                                value: \"= this.i + 1\"\n                                            }\n                                        },\n                                        function () {\n                                            i = this.i;\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        };\n\n        let error = null;\n        let host = new WorkflowHost(hostOptions);\n        host.once(WorkflowHost.events.warn, function (e) {\n            error = e;\n        });\n        try {\n            //host.addTracker(new ConsoleTracker());\n            host.registerWorkflow(workflow);\n\n            let id = \"1\";\n\n            // That should start the workflow:\n            let result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // That should do nothing particular, but should work:\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // Calling unexisted method should throw:\n            try {\n                yield (host.invokeMethod(\"wf\", \"pupu\", id));\n                assert(false, \"That should throw!\");\n            }\n            catch (e) {\n                if (!(e instanceof errors.MethodNotFoundError)) {\n                    throw e;\n                }\n            }\n\n            // That should do nothing particular, but should work again:\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // Let's wait.\n            yield Bluebird.delay(1000);\n\n            if (error) {\n                let pError = error;\n                error = null;\n                throw pError;\n            }\n\n            // Verify promotedProperties:\n            if (hostOptions && hostOptions.persistence) {\n                let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\n                assert(promotedProperties);\n                assert(promotedProperties.i > 0);\n                assert.equal(_.keys(promotedProperties).length, 1);\n            }\n            else {\n                assert(i > 0);\n            }\n\n            // That should do nothing particular, but should work again:\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // Stop:\n            result = yield (host.invokeMethod(\"wf\", \"stop\", id));\n            assert(!result);\n        }\n        catch (e) {\n            if (!/is not supported without persistence/.test(e.message)) {\n                throw e;\n            }\n        }\n        finally {\n            host.shutdown();\n        }\n\n        assert.deepEqual(error, null);\n    }),\n\n    doStopOutdatedVersionsTest: async(function* (hostOptions) {\n        if (!hostOptions.persistence) {\n            // This method has no meaning if there is no persistence.\n            return;\n        }\n\n        hostOptions = _.extend(\n            {\n                enablePromotions: true,\n                wakeUpOptions: {\n                    interval: 1000\n                }\n            },\n            hostOptions);\n\n        let trace = [];\n        let def = {\n            \"@workflow\": {\n                name: \"wf\",\n                \"!i\": 0,\n                args: [\n                    function () {\n                        this.i++;\n                    },\n                    {\n                        \"@method\": {\n                            canCreateInstance: true,\n                            methodName: \"start\",\n                            instanceIdPath: \"[0]\"\n                        }\n                    },\n                    {\n                        \"@func\": {\n                            args: {\n                                \"@instanceData\": {}\n                            },\n                            code: function (data) {\n                                trace.push(data);\n                            }\n                        }\n                    },\n                    {\n                        \"@delay\": {\n                            ms: 100000\n                        }\n                    },\n                    {\n                        \"@func\": {\n                            args: {\n                                \"@instanceData\": {}\n                            },\n                            code: function (data) {\n                                trace.push(data);\n                            }\n                        }\n                    },\n                    function () {\n                        this.i++;\n                    },\n                    { \"@throw\": { error: \"Huh.\" } }\n                ]\n            }\n        };\n        let workflow0 = activityMarkup.parse(def);\n        def[\"@workflow\"].version = 1;\n        let workflow1 = activityMarkup.parse(def);\n\n        let error = null;\n        let host = new WorkflowHost(hostOptions);\n        host.once(WorkflowHost.events.warn, function (e) {\n            error = e;\n        });\n        try {\n            host.registerWorkflow(workflow0);\n\n            let id = \"1\";\n\n            // That should start the workflow:\n            let result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // That should fail, because control flow has been stepped over:\n            try {\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\n                assert(false);\n            }\n            catch (e) {\n                assert(e.message.indexOf(\"bookmark doesn't exist\") > 0);\n                error = null;\n            }\n\n            // Let's wait.\n            yield Bluebird.delay(100);\n\n            // Verify promotedProperties:\n            let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\n            assert(promotedProperties);\n            assert(promotedProperties.i === 1);\n            assert.equal(_.keys(promotedProperties).length, 1);\n\n            // Start another:\n            host.shutdown();\n            host = new WorkflowHost(hostOptions);\n            host.once(\"error\", function (e) {\n                error = e;\n            });\n\n            host.registerWorkflow(workflow1);\n\n            // That should fail, because an older version is already running:\n            try {\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\n                assert(false);\n            }\n            catch (e) {\n                // In persistence it's a version 0 workflow, but that's not registered in the new host, so if fails:\n                assert(e.message.indexOf(\"has not been registered\") > 0);\n                error = null;\n            }\n\n            // Now, we're stopping all old instances:\n            yield host.stopDeprecatedVersions(\"wf\");\n\n            // Verify promotedProperties:\n            promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\n            assert(promotedProperties === null);\n\n            // Ok, let's start over!\n\n            // That should start the workflow:\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\n            assert(!result);\n\n            // That should fail, because control flow has been stepped over:\n            try {\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\n                assert(false);\n            }\n            catch (e) {\n                assert(e.message.indexOf(\"bookmark doesn't exist\") > 0);\n                error = null;\n            }\n\n            // Let's wait.\n            yield Bluebird.delay(100);\n\n            // Verify promotedProperties:\n            promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\n            assert(promotedProperties);\n            assert(promotedProperties.i === 1);\n            assert.equal(_.keys(promotedProperties).length, 1);\n\n            assert(trace.length === 2);\n            assert(trace[0].workflowName === \"wf\");\n            assert(_.isString(trace[0].workflowVersion));\n            assert(trace[0].workflowVersion.length > 0);\n            assert(trace[0].instanceId === id);\n            assert(trace[1].workflowName === \"wf\");\n            assert(_.isString(trace[1].workflowVersion));\n            assert(trace[1].workflowVersion.length > 0);\n            assert(trace[1].instanceId === id);\n            assert(trace[0].workflowVersion !== trace[1].workflowVersion);\n        }\n        finally {\n            host.shutdown();\n        }\n\n        assert.deepEqual(error, null);\n    })\n};\n"],"file":"hosting/hostingTestCommon.js","sourceRoot":"/source/"}