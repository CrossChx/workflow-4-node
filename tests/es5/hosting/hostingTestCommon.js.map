{"version":3,"names":[],"mappings":"","sources":["hosting/hostingTestCommon.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet activityMarkup = wf4node.activities.activityMarkup;\r\nlet WorkflowHost = wf4node.hosting.WorkflowHost;\r\nlet ConsoleTracker = wf4node.activities.ConsoleTracker;\r\nlet _ = require(\"lodash\");\r\nlet asyncHelpers = wf4node.common.asyncHelpers;\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = asyncHelpers.async;\r\nlet assert = require(\"assert\");\r\nrequire(\"date-utils\");\r\nlet errors = wf4node.common.errors;\r\n\r\nmodule.exports = {\r\n    doBasicHostTest: async(function* (hostOptions) {\r\n        hostOptions = _.extend(\r\n            {\r\n                enablePromotions: true\r\n            },\r\n            hostOptions);\r\n\r\n        let workflow = {\r\n            \"@workflow\": {\r\n                name: \"wf\",\r\n                \"!v\": null,\r\n                \"!x\": 0,\r\n                args: [\r\n                    {\r\n                        \"@beginMethod\": {\r\n                            methodName: \"foo\",\r\n                            canCreateInstance: true,\r\n                            instanceIdPath: \"[0]\",\r\n                            \"@to\": \"v\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"@endMethod\": {\r\n                            methodName: \"foo\",\r\n                            result: \"= this.v[0] * this.v[0]\",\r\n                            \"@to\": \"v\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"@assign\": {\r\n                            value: 666,\r\n                            to: \"x\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"@method\": {\r\n                            methodName: \"bar\",\r\n                            instanceIdPath: \"[0]\",\r\n                            result: \"= this.v * 2\"\r\n                        }\r\n                    },\r\n                    \"some string for wf result but not for the method result\"\r\n                ]\r\n            }\r\n        };\r\n\r\n        let error = null;\r\n        let host = new WorkflowHost(hostOptions);\r\n        host.once(WorkflowHost.events.warn, function (e) {\r\n            error = e;\r\n        });\r\n        try {\r\n            //host.addTracker(new ConsoleTracker());\r\n\r\n            host.registerWorkflow(workflow);\r\n            let result = yield (host.invokeMethod(\"wf\", \"foo\", [5]));\r\n\r\n            assert.equal(result, 25);\r\n\r\n            // Verify promotedProperties:\r\n            if (hostOptions && hostOptions.persistence) {\r\n                let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", 5);\r\n                assert.ok(promotedProperties);\r\n                assert.equal(promotedProperties.v, 25);\r\n                assert.equal(promotedProperties.x, 666);\r\n                assert.equal(_.keys(promotedProperties).length, 2);\r\n            }\r\n\r\n            result = yield (host.invokeMethod(\"wf\", \"bar\", [5]));\r\n\r\n            assert.equal(result, 50);\r\n        }\r\n        finally {\r\n            host.shutdown();\r\n        }\r\n\r\n        assert.deepEqual(error, null);\r\n    }),\r\n\r\n    doCalculatorTest: async(function* (hostOptions) {\r\n        let workflow = {\r\n            \"@workflow\": {\r\n                name: \"calculator\",\r\n                running: true,\r\n                inputArgs: null,\r\n                currentValue: 0,\r\n                args: [\r\n                    {\r\n                        \"@while\": {\r\n                            condition: \"= this.running\",\r\n                            args: {\r\n                                \"@pick\": [\r\n                                    {\r\n                                        \"@block\": {\r\n                                            displayName: \"Add block\",\r\n                                            args: [\r\n                                                {\r\n                                                    \"@method\": {\r\n                                                        displayName: \"Add method\",\r\n                                                        methodName: \"add\",\r\n                                                        instanceIdPath: \"[0].id\",\r\n                                                        canCreateInstance: true,\r\n                                                        \"@to\": \"inputArgs\"\r\n                                                    }\r\n                                                },\r\n                                                {\r\n                                                    \"@assign\": {\r\n                                                        value: \"= this.currentValue + this.inputArgs[0].value\",\r\n                                                        to: \"currentValue\"\r\n                                                    }\r\n                                                }\r\n                                            ]\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@block\": {\r\n                                            displayName: \"Subtract block\",\r\n                                            args: [\r\n                                                {\r\n                                                    \"@method\": {\r\n                                                        displayName: \"Subtract method\",\r\n                                                        methodName: \"subtract\",\r\n                                                        instanceIdPath: \"[0].id\",\r\n                                                        canCreateInstance: true,\r\n                                                        \"@to\": \"inputArgs\"\r\n                                                    }\r\n                                                },\r\n                                                {\r\n                                                    \"@assign\": {\r\n                                                        value: \"= this.currentValue - this.inputArgs[0].value\",\r\n                                                        to: \"currentValue\"\r\n                                                    }\r\n                                                }\r\n                                            ]\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@block\": {\r\n                                            displayName: \"Multiply block\",\r\n                                            args: [\r\n                                                {\r\n                                                    \"@method\": {\r\n                                                        displayName: \"Multiply method\",\r\n                                                        methodName: \"multiply\",\r\n                                                        instanceIdPath: \"[0].id\",\r\n                                                        canCreateInstance: true,\r\n                                                        \"@to\": \"inputArgs\"\r\n                                                    }\r\n                                                },\r\n                                                {\r\n                                                    \"@assign\": {\r\n                                                        value: \"= this.currentValue * this.inputArgs[0].value\",\r\n                                                        to: \"currentValue\"\r\n                                                    }\r\n                                                }\r\n                                            ]\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@block\": {\r\n                                            displayName: \"Divide block\",\r\n                                            args: [\r\n                                                {\r\n                                                    \"@method\": {\r\n                                                        displayName: \"Divide method\",\r\n                                                        methodName: \"divide\",\r\n                                                        instanceIdPath: \"[0].id\",\r\n                                                        canCreateInstance: true,\r\n                                                        \"@to\": \"inputArgs\"\r\n                                                    }\r\n                                                },\r\n                                                {\r\n                                                    \"@assign\": {\r\n                                                        value: \"= this.currentValue / this.inputArgs[0].value\",\r\n                                                        to: \"currentValue\"\r\n                                                    }\r\n                                                }\r\n                                            ]\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@method\": {\r\n                                            displayName: \"Equals method\",\r\n                                            methodName: \"equals\",\r\n                                            instanceIdPath: \"[0].id\",\r\n                                            canCreateInstance: true,\r\n                                            result: \"= this.currentValue\"\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        \"@block\": {\r\n                                            displayName: \"Reset block\",\r\n                                            args: [\r\n                                                {\r\n                                                    \"@method\": {\r\n                                                        displayName: \"Reset method\",\r\n                                                        methodName: \"reset\",\r\n                                                        instanceIdPath: \"[0].id\"\r\n                                                    }\r\n                                                },\r\n                                                {\r\n                                                    \"@assign\": {\r\n                                                        value: false,\r\n                                                        to: \"running\"\r\n                                                    }\r\n                                                }\r\n                                            ]\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n\r\n        let error = null;\r\n        let host = new WorkflowHost(hostOptions);\r\n        host.once(WorkflowHost.events.warn, function (e) {\r\n            error = e;\r\n        });\r\n\r\n        try {\r\n            host.registerWorkflow(workflow);\r\n            //host.addTracker(new ConsoleTracker());\r\n\r\n            let arg = { id: Math.floor((Math.random() * 1000000000) + 1) };\r\n\r\n            let result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\r\n            assert.equal(result, 0);\r\n\r\n            arg.value = 55;\r\n            yield (host.invokeMethod(\"calculator\", \"add\", [arg]));\r\n\r\n            if (hostOptions && hostOptions.persistence) {\r\n                host.shutdown();\r\n                host = new WorkflowHost(hostOptions);\r\n                host.once(\"error\", function (e) {\r\n                    error = e;\r\n                });\r\n                host.registerWorkflow(workflow);\r\n            }\r\n\r\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\r\n            assert.equal(result, 55);\r\n\r\n            arg.value = 5;\r\n            yield (host.invokeMethod(\"calculator\", \"divide\", [arg]));\r\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\r\n            assert.equal(result, 11);\r\n\r\n            arg.value = 1;\r\n            yield (host.invokeMethod(\"calculator\", \"subtract\", [arg]));\r\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\r\n            assert.equal(result, 10);\r\n\r\n            arg.value = 100;\r\n            yield (host.invokeMethod(\"calculator\", \"multiply\", [arg]));\r\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\r\n            assert.equal(result, 1000);\r\n\r\n            delete arg.value;\r\n            yield (host.invokeMethod(\"calculator\", \"reset\", [arg]));\r\n            result = yield (host.invokeMethod(\"calculator\", \"equals\", [arg]));\r\n            assert.equal(result, 0);\r\n\r\n            delete arg.value;\r\n            yield (host.invokeMethod(\"calculator\", \"reset\", [arg]));\r\n        }\r\n        finally {\r\n            host.shutdown();\r\n        }\r\n\r\n        assert.deepEqual(error, null);\r\n    }),\r\n\r\n    doDelayTest: async(function* (hostOptions) {\r\n        hostOptions = _.extend(\r\n            {\r\n                enablePromotions: true,\r\n                wakeUpOptions: {\r\n                    interval: 500\r\n                }\r\n            },\r\n            hostOptions);\r\n\r\n        var i = 0;\r\n        let workflow = {\r\n            \"@workflow\": {\r\n                name: \"wf\",\r\n                done: false,\r\n                \"!i\": 0,\r\n                args: {\r\n                    \"@while\": {\r\n                        condition: \"= !this.done\",\r\n                        args: {\r\n                            \"@pick\": [\r\n                                {\r\n                                    \"@method\": {\r\n                                        canCreateInstance: true,\r\n                                        methodName: \"start\",\r\n                                        instanceIdPath: \"[0]\"\r\n                                    }\r\n                                },\r\n                                {\r\n                                    \"@block\": [\r\n                                        {\r\n                                            \"@method\": {\r\n                                                methodName: \"stop\",\r\n                                                instanceIdPath: \"[0]\"\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            \"@assign\": {\r\n                                                to: \"done\",\r\n                                                value: true\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    \"@block\": [\r\n                                        {\r\n                                            \"@delay\": {\r\n                                                ms: 100\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            \"@assign\": {\r\n                                                to: \"i\",\r\n                                                value: \"= this.i + 1\"\r\n                                            }\r\n                                        },\r\n                                        function () {\r\n                                            i = this.i;\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        let error = null;\r\n        let host = new WorkflowHost(hostOptions);\r\n        host.once(WorkflowHost.events.warn, function (e) {\r\n            error = e;\r\n        });\r\n        try {\r\n            //host.addTracker(new ConsoleTracker());\r\n            host.registerWorkflow(workflow);\r\n\r\n            let id = \"1\";\r\n\r\n            // That should start the workflow:\r\n            let result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n            assert(!result);\r\n\r\n            // That should do nothing particular, but should work:\r\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n            assert(!result);\r\n\r\n            // Calling unexisted method should throw:\r\n            try {\r\n                yield (host.invokeMethod(\"wf\", \"pupu\", id));\r\n                assert(false, \"That should throw!\");\r\n            }\r\n            catch (e) {\r\n                if (!(e instanceof errors.MethodNotFoundError)) {\r\n                    throw e;\r\n                }\r\n            }\r\n\r\n            // That should do nothing particular, but should work again:\r\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n            assert(!result);\r\n\r\n            // Let's wait.\r\n            yield Bluebird.delay(1000);\r\n\r\n            if (error) {\r\n                let pError = error;\r\n                error = null;\r\n                throw pError;\r\n            }\r\n\r\n            // Verify promotedProperties:\r\n            if (hostOptions && hostOptions.persistence) {\r\n                let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\r\n                assert(promotedProperties);\r\n                assert(promotedProperties.i > 0);\r\n                assert.equal(_.keys(promotedProperties).length, 1);\r\n            }\r\n            else {\r\n                assert(i > 0);\r\n            }\r\n\r\n            // That should do nothing particular, but should work again:\r\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n            assert(!result);\r\n\r\n            // Stop:\r\n            result = yield (host.invokeMethod(\"wf\", \"stop\", id));\r\n            assert(!result);\r\n        }\r\n        catch (e) {\r\n            if (!/is not supported without persistence/.test(e.message)) {\r\n                throw e;\r\n            }\r\n            assert(!hostOptions.persistence);\r\n        }\r\n        finally {\r\n            host.shutdown();\r\n        }\r\n\r\n        assert.deepEqual(error, null);\r\n    }),\r\n\r\n    doStopOutdatedVersionsTest: async(function* (hostOptions) {\r\n        if (!hostOptions.persistence) {\r\n            // This method has no meaning if there is no persistence.\r\n            return;\r\n        }\r\n\r\n        hostOptions = _.extend(\r\n            {\r\n                enablePromotions: true,\r\n                wakeUpOptions: {\r\n                    interval: 1000\r\n                }\r\n            },\r\n            hostOptions);\r\n\r\n        let trace = [];\r\n        let def = {\r\n            \"@workflow\": {\r\n                name: \"wf\",\r\n                \"!i\": 0,\r\n                args: [\r\n                    function () {\r\n                        this.i++;\r\n                    },\r\n                    {\r\n                        \"@method\": {\r\n                            canCreateInstance: true,\r\n                            methodName: \"start\",\r\n                            instanceIdPath: \"[0]\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"@func\": {\r\n                            args: {\r\n                                \"@instanceData\": {}\r\n                            },\r\n                            code: function (data) {\r\n                                trace.push(data);\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"@delay\": {\r\n                            ms: 100000\r\n                        }\r\n                    },\r\n                    {\r\n                        \"@func\": {\r\n                            args: {\r\n                                \"@instanceData\": {}\r\n                            },\r\n                            code: function (data) {\r\n                                trace.push(data);\r\n                            }\r\n                        }\r\n                    },\r\n                    function () {\r\n                        this.i++;\r\n                    },\r\n                    { \"@throw\": { error: \"Huh.\" } }\r\n                ]\r\n            }\r\n        };\r\n        let workflow0 = activityMarkup.parse(def);\r\n        def[\"@workflow\"].version = 1;\r\n        let workflow1 = activityMarkup.parse(def);\r\n\r\n        let error = null;\r\n        let host = new WorkflowHost(hostOptions);\r\n        host.once(WorkflowHost.events.warn, function (e) {\r\n            error = e;\r\n        });\r\n        try {\r\n            host.registerWorkflow(workflow0);\r\n\r\n            let id = \"1\";\r\n\r\n            // That should start the workflow:\r\n            let result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n            assert(!result);\r\n\r\n            // That should fail, because control flow has been stepped over:\r\n            try {\r\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n                assert(false);\r\n            }\r\n            catch (e) {\r\n                assert(e.message.indexOf(\"bookmark doesn't exist\") > 0);\r\n                error = null;\r\n            }\r\n\r\n            // Let's wait.\r\n            yield Bluebird.delay(100);\r\n\r\n            // Verify promotedProperties:\r\n            let promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\r\n            assert(promotedProperties);\r\n            assert(promotedProperties.i === 1);\r\n            assert.equal(_.keys(promotedProperties).length, 1);\r\n\r\n            // Start another:\r\n            host.shutdown();\r\n            host = new WorkflowHost(hostOptions);\r\n            host.once(\"error\", function (e) {\r\n                error = e;\r\n            });\r\n\r\n            host.registerWorkflow(workflow1);\r\n\r\n            // That should fail, because an older version is already running:\r\n            try {\r\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n                assert(false);\r\n            }\r\n            catch (e) {\r\n                // In persistence it's a version 0 workflow, but that's not registered in the new host, so if fails:\r\n                assert(e.message.indexOf(\"has not been registered\") > 0);\r\n                error = null;\r\n            }\r\n\r\n            // Now, we're stopping all old instances:\r\n            yield host.stopDeprecatedVersions(\"wf\");\r\n\r\n            // Verify promotedProperties:\r\n            promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\r\n            assert(promotedProperties === null);\r\n\r\n            // Ok, let's start over!\r\n\r\n            // That should start the workflow:\r\n            result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n            assert(!result);\r\n\r\n            // That should fail, because control flow has been stepped over:\r\n            try {\r\n                result = yield (host.invokeMethod(\"wf\", \"start\", id));\r\n                assert(false);\r\n            }\r\n            catch (e) {\r\n                assert(e.message.indexOf(\"bookmark doesn't exist\") > 0);\r\n                error = null;\r\n            }\r\n\r\n            // Let's wait.\r\n            yield Bluebird.delay(100);\r\n\r\n            // Verify promotedProperties:\r\n            promotedProperties = yield host.persistence.loadPromotedProperties(\"wf\", id);\r\n            assert(promotedProperties);\r\n            assert(promotedProperties.i === 1);\r\n            assert.equal(_.keys(promotedProperties).length, 1);\r\n\r\n            assert(trace.length === 2);\r\n            assert(trace[0].workflowName === \"wf\");\r\n            assert(_.isString(trace[0].workflowVersion));\r\n            assert(trace[0].workflowVersion.length > 0);\r\n            assert(trace[0].instanceId === id);\r\n            assert(trace[1].workflowName === \"wf\");\r\n            assert(_.isString(trace[1].workflowVersion));\r\n            assert(trace[1].workflowVersion.length > 0);\r\n            assert(trace[1].instanceId === id);\r\n            assert(trace[0].workflowVersion !== trace[1].workflowVersion);\r\n        }\r\n        finally {\r\n            host.shutdown();\r\n        }\r\n\r\n        assert.deepEqual(error, null);\r\n    })\r\n};\r\n"],"file":"hosting/hostingTestCommon.js","sourceRoot":"/source/"}