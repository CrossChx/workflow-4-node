{"version":3,"names":[],"mappings":"","sources":["hosting/serializing.js"],"sourcesContent":["\"use strict\";\r\n\r\n/* global describe,it */\r\n\r\nlet wf4node = require(\"../../../\");\r\nlet InstanceIdParser = wf4node.hosting.InstanceIdParser;\r\nlet _ = require(\"lodash\");\r\nlet hostingTestCommon = require(\"./hostingTestCommon\");\r\nlet MemoryPersistence = wf4node.hosting.MemoryPersistence;\r\nlet Serializer = require(\"backpack-node\").system.Serializer;\r\nlet WorkflowHost = wf4node.hosting.WorkflowHost;\r\nlet asyncHelpers = wf4node.common.asyncHelpers;\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = asyncHelpers.async;\r\nlet util = require(\"util\");\r\nlet Activity = wf4node.activities.Activity;\r\nlet Block = wf4node.activities.Block;\r\n\r\nlet assert = require(\"better-assert\");\r\n\r\ndescribe(\"serializing\", function() {\r\n    let doTest = async(function* (hostOptions) {\r\n        let now = new Date();\r\n        let rex = /abc/gi;\r\n        let host = new WorkflowHost(hostOptions);\r\n        let err = null;\r\n        host.on(\"error\", function(e) {\r\n            err = e;\r\n        });\r\n\r\n        let aDate = null;\r\n        let aMap = null;\r\n        let aSet = null;\r\n        let aResult = null;\r\n        let aRegExp = null;\r\n        let aProp = null;\r\n\r\n        let wf = {\r\n            \"@workflow\": {\r\n                name: \"serializerWF\",\r\n                aDate: null,\r\n                aMap: null,\r\n                aSet: null,\r\n                aResult: null,\r\n                aRegExp: null,\r\n                \"`aCode\": function() {\r\n                    return \"Hello!\";\r\n                },\r\n                args: {\r\n                    \"@block\": {\r\n                        p: \"= this.$parent\",\r\n                        args: [\r\n                            function() {\r\n                                assert(this.p.name === \"serializerWF\");\r\n                            },\r\n                            {\r\n                                \"@method\": {\r\n                                    methodName: \"start\",\r\n                                    canCreateInstance: true,\r\n                                    instanceIdPath: \"[0]\"\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@assign\": {\r\n                                    to: \"aDate\",\r\n                                    value: now\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@assign\": {\r\n                                    to: \"aMap\",\r\n                                    value: function () {\r\n                                        let map = new Map();\r\n                                        map.set(1, \"1\");\r\n                                        map.set(2, \"2\");\r\n                                        return map;\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@assign\": {\r\n                                    to: \"aSet\",\r\n                                    value: function () {\r\n                                        let set = new Set();\r\n                                        set.add(1);\r\n                                        set.add(2);\r\n                                        return set;\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@assign\": {\r\n                                    to: \"aRegExp\",\r\n                                    value: rex\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@method\": {\r\n                                    methodName: \"getArr\",\r\n                                    instanceIdPath: \"[0]\",\r\n                                    //result: \"= [this.aDate, this.aMap, this.aSet, this.aRegExp, this.aCode.code, this.p.name]\"\r\n                                    result: [\r\n                                        \"= this.aDate\",\r\n                                        \"= this.aMap\",\r\n                                        \"= this.aSet\",\r\n                                        \"= this.aRegExp\",\r\n                                        \"= this.aCode.code\",\r\n                                        \"= this.p.name\"\r\n                                    ]\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@method\": {\r\n                                    methodName: \"getObj\",\r\n                                    instanceIdPath: \"[0]\",\r\n                                    //result: \"= { aDate: this.aDate, aMap: this.aMap, aSet: this.aSet, aRegExp: this.aRegExp, code: this.aCode.code, name: this.p.name }\"\r\n                                    result: {\r\n                                        aDate: \"= this.aDate\",\r\n                                        aMap: \"= this.aMap\",\r\n                                        aSet: \"= this.aSet\",\r\n                                        aRegExp: \"= this.aRegExp\",\r\n                                        code: \"= this.aCode.code\",\r\n                                        name: \"= this.p.name\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                \"@assign\": {\r\n                                    to: \"aResult\",\r\n                                    value: {\r\n                                        \"@func\": {\r\n                                            code: \"= this.aCode.code\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            function () {\r\n                                aDate = this.aDate;\r\n                                aMap = this.aMap;\r\n                                aSet = this.aSet;\r\n                                aResult = this.aResult;\r\n                                aRegExp = this.aRegExp;\r\n                                aProp = this.p.name;\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        try {\r\n            host.registerWorkflow(wf);\r\n\r\n            yield host.invokeMethod(\"serializerWF\", \"start\", \"0\");\r\n            host.shutdown();\r\n\r\n            host = new WorkflowHost(hostOptions);\r\n            host.registerWorkflow(wf);\r\n            host.on(\"error\", function (e) {\r\n                err = e;\r\n            });\r\n\r\n            let arrayResult = yield host.invokeMethod(\"serializerWF\", \"getArr\", \"0\");\r\n            assert(_.isArray(arrayResult));\r\n            assert(arrayResult.length === 6);\r\n\r\n            let objResult = yield host.invokeMethod(\"serializerWF\", \"getObj\", \"0\");\r\n            assert(_.isPlainObject(objResult));\r\n            assert(_.keys(objResult).length === 6);\r\n\r\n            assert(_.isDate(aDate));\r\n            assert(aDate.getTime() === now.getTime());\r\n\r\n            assert(_.isDate(arrayResult[0]));\r\n            assert(arrayResult[0].getTime() === now.getTime());\r\n\r\n            assert(aMap instanceof Map);\r\n            assert(aMap.get(1) === \"1\");\r\n            assert(aMap.get(2) === \"2\");\r\n            assert(aMap.size === 2);\r\n\r\n            assert(arrayResult[1] instanceof Map);\r\n            assert(arrayResult[1].get(1) === \"1\");\r\n            assert(arrayResult[1].get(2) === \"2\");\r\n            assert(arrayResult[1].size === 2);\r\n\r\n            assert(objResult.aMap instanceof Map);\r\n            assert(objResult.aMap.get(1) === \"1\");\r\n            assert(objResult.aMap.get(2) === \"2\");\r\n            assert(objResult.aMap.size === 2);\r\n\r\n            assert(aSet instanceof Set);\r\n            assert(aSet.has(1));\r\n            assert(aSet.has(2));\r\n            assert(aSet.size === 2);\r\n\r\n            assert(arrayResult[2] instanceof Set);\r\n            assert(arrayResult[2].has(1));\r\n            assert(arrayResult[2].has(2));\r\n            assert(arrayResult[2].size === 2);\r\n\r\n            assert(objResult.aSet instanceof Set);\r\n            assert(objResult.aSet.has(1));\r\n            assert(objResult.aSet.has(2));\r\n            assert(objResult.aSet.size === 2);\r\n\r\n            assert(aRegExp instanceof RegExp);\r\n            assert(aRegExp.pattern === rex.pattern);\r\n            assert(aRegExp.flags === rex.flags);\r\n\r\n            assert(arrayResult[3] instanceof RegExp);\r\n            assert(arrayResult[3].pattern === rex.pattern);\r\n            assert(arrayResult[3].flags === rex.flags);\r\n\r\n            assert(objResult.aRegExp instanceof RegExp);\r\n            assert(objResult.aRegExp.pattern === rex.pattern);\r\n            assert(objResult.aRegExp.flags === rex.flags);\r\n\r\n            assert(aResult === \"Hello!\");\r\n\r\n            assert(aProp === \"serializerWF\");\r\n\r\n            assert(_.isFunction(arrayResult[4]));\r\n            assert(arrayResult[4]() === \"Hello!\");\r\n\r\n            assert(_.isFunction(objResult.code));\r\n            assert(objResult.code() === \"Hello!\");\r\n\r\n            assert(arrayResult[5] === \"serializerWF\");\r\n\r\n            assert(objResult.name === \"serializerWF\");\r\n\r\n            if (err) {\r\n                throw err;\r\n            }\r\n        }\r\n        finally {\r\n            host.shutdown();\r\n        }\r\n    });\r\n\r\n    it(\"should serialize Date, code, Map, Set, RegExp without a serializer\", function(done) {\r\n        doTest({\r\n            persistence: new MemoryPersistence(),\r\n            lazyPersistence: true,\r\n            serializer: null,\r\n            alwaysLoadState: false\r\n        }).nodeify(done);\r\n    });\r\n\r\n    it(\"should serialize Date, code, Map, Set, RegExp with a serializer\", function(done) {\r\n        doTest({\r\n            persistence: new MemoryPersistence(),\r\n            lazyPersistence: true,\r\n            serializer: new Serializer(),\r\n            alwaysLoadState: false\r\n        }).nodeify(done);\r\n    });\r\n});"],"file":"hosting/serializing.js","sourceRoot":"/source/"}