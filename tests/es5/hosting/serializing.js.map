{"version":3,"names":[],"mappings":"","sources":["hosting/serializing.js"],"sourcesContent":["\"use strict\";\n\n/* global describe,it */\n\nlet wf4node = require(\"../../../\");\nlet InstanceIdParser = wf4node.hosting.InstanceIdParser;\nlet _ = require(\"lodash\");\nlet hostingTestCommon = require(\"./hostingTestCommon\");\nlet MemoryPersistence = wf4node.hosting.MemoryPersistence;\nlet Serializer = require(\"backpack-node\").system.Serializer;\nlet WorkflowHost = wf4node.hosting.WorkflowHost;\nlet asyncHelpers = wf4node.common.asyncHelpers;\nlet Bluebird = require(\"bluebird\");\nlet async = asyncHelpers.async;\nlet util = require(\"util\");\nlet Activity = wf4node.activities.Activity;\nlet Block = wf4node.activities.Block;\n\nlet assert = require(\"better-assert\");\n\ndescribe(\"serializing\", function() {\n    let doTest = async(function* (hostOptions) {\n        let now = new Date();\n        let rex = /abc/gi;\n        let host = new WorkflowHost(hostOptions);\n        let err = null;\n        host.on(\"error\", function(e) {\n            err = e;\n        });\n\n        let aDate = null;\n        let aMap = null;\n        let aSet = null;\n        let aResult = null;\n        let aRegExp = null;\n        let aProp = null;\n\n        let wf = {\n            \"@workflow\": {\n                name: \"serializerWF\",\n                aDate: null,\n                aMap: null,\n                aSet: null,\n                aResult: null,\n                aRegExp: null,\n                \"`aCode\": function() {\n                    return \"Hello!\";\n                },\n                args: {\n                    \"@block\": {\n                        p: \"= this.$parent\",\n                        args: [\n                            function() {\n                                assert(this.p.name === \"serializerWF\");\n                            },\n                            {\n                                \"@method\": {\n                                    methodName: \"start\",\n                                    canCreateInstance: true,\n                                    instanceIdPath: \"[0]\"\n                                }\n                            },\n                            {\n                                \"@assign\": {\n                                    to: \"aDate\",\n                                    value: now\n                                }\n                            },\n                            {\n                                \"@assign\": {\n                                    to: \"aMap\",\n                                    value: function () {\n                                        let map = new Map();\n                                        map.set(1, \"1\");\n                                        map.set(2, \"2\");\n                                        return map;\n                                    }\n                                }\n                            },\n                            {\n                                \"@assign\": {\n                                    to: \"aSet\",\n                                    value: function () {\n                                        let set = new Set();\n                                        set.add(1);\n                                        set.add(2);\n                                        return set;\n                                    }\n                                }\n                            },\n                            {\n                                \"@assign\": {\n                                    to: \"aRegExp\",\n                                    value: rex\n                                }\n                            },\n                            {\n                                \"@method\": {\n                                    methodName: \"getArr\",\n                                    instanceIdPath: \"[0]\",\n                                    //result: \"= [this.aDate, this.aMap, this.aSet, this.aRegExp, this.aCode.code, this.p.name]\"\n                                    result: [\n                                        \"= this.aDate\",\n                                        \"= this.aMap\",\n                                        \"= this.aSet\",\n                                        \"= this.aRegExp\",\n                                        \"= this.aCode.code\",\n                                        \"= this.p.name\"\n                                    ]\n                                }\n                            },\n                            {\n                                \"@method\": {\n                                    methodName: \"getObj\",\n                                    instanceIdPath: \"[0]\",\n                                    //result: \"= { aDate: this.aDate, aMap: this.aMap, aSet: this.aSet, aRegExp: this.aRegExp, code: this.aCode.code, name: this.p.name }\"\n                                    result: {\n                                        aDate: \"= this.aDate\",\n                                        aMap: \"= this.aMap\",\n                                        aSet: \"= this.aSet\",\n                                        aRegExp: \"= this.aRegExp\",\n                                        code: \"= this.aCode.code\",\n                                        name: \"= this.p.name\"\n                                    }\n                                }\n                            },\n                            {\n                                \"@assign\": {\n                                    to: \"aResult\",\n                                    value: {\n                                        \"@func\": {\n                                            code: \"= this.aCode.code\"\n                                        }\n                                    }\n                                }\n                            },\n                            function () {\n                                aDate = this.aDate;\n                                aMap = this.aMap;\n                                aSet = this.aSet;\n                                aResult = this.aResult;\n                                aRegExp = this.aRegExp;\n                                aProp = this.p.name;\n                            }\n                        ]\n                    }\n                }\n            }\n        };\n\n        try {\n            host.registerWorkflow(wf);\n\n            yield host.invokeMethod(\"serializerWF\", \"start\", \"0\");\n            host.shutdown();\n\n            host = new WorkflowHost(hostOptions);\n            host.registerWorkflow(wf);\n            host.on(\"error\", function (e) {\n                err = e;\n            });\n\n            let arrayResult = yield host.invokeMethod(\"serializerWF\", \"getArr\", \"0\");\n            assert(_.isArray(arrayResult));\n            assert(arrayResult.length === 6);\n\n            let objResult = yield host.invokeMethod(\"serializerWF\", \"getObj\", \"0\");\n            assert(_.isPlainObject(objResult));\n            assert(_.keys(objResult).length === 6);\n\n            assert(_.isDate(aDate));\n            assert(aDate.getTime() === now.getTime());\n\n            assert(_.isDate(arrayResult[0]));\n            assert(arrayResult[0].getTime() === now.getTime());\n\n            assert(aMap instanceof Map);\n            assert(aMap.get(1) === \"1\");\n            assert(aMap.get(2) === \"2\");\n            assert(aMap.size === 2);\n\n            assert(arrayResult[1] instanceof Map);\n            assert(arrayResult[1].get(1) === \"1\");\n            assert(arrayResult[1].get(2) === \"2\");\n            assert(arrayResult[1].size === 2);\n\n            assert(objResult.aMap instanceof Map);\n            assert(objResult.aMap.get(1) === \"1\");\n            assert(objResult.aMap.get(2) === \"2\");\n            assert(objResult.aMap.size === 2);\n\n            assert(aSet instanceof Set);\n            assert(aSet.has(1));\n            assert(aSet.has(2));\n            assert(aSet.size === 2);\n\n            assert(arrayResult[2] instanceof Set);\n            assert(arrayResult[2].has(1));\n            assert(arrayResult[2].has(2));\n            assert(arrayResult[2].size === 2);\n\n            assert(objResult.aSet instanceof Set);\n            assert(objResult.aSet.has(1));\n            assert(objResult.aSet.has(2));\n            assert(objResult.aSet.size === 2);\n\n            assert(aRegExp instanceof RegExp);\n            assert(aRegExp.pattern === rex.pattern);\n            assert(aRegExp.flags === rex.flags);\n\n            assert(arrayResult[3] instanceof RegExp);\n            assert(arrayResult[3].pattern === rex.pattern);\n            assert(arrayResult[3].flags === rex.flags);\n\n            assert(objResult.aRegExp instanceof RegExp);\n            assert(objResult.aRegExp.pattern === rex.pattern);\n            assert(objResult.aRegExp.flags === rex.flags);\n\n            assert(aResult === \"Hello!\");\n\n            assert(aProp === \"serializerWF\");\n\n            assert(_.isFunction(arrayResult[4]));\n            assert(arrayResult[4]() === \"Hello!\");\n\n            assert(_.isFunction(objResult.code));\n            assert(objResult.code() === \"Hello!\");\n\n            assert(arrayResult[5] === \"serializerWF\");\n\n            assert(objResult.name === \"serializerWF\");\n\n            if (err) {\n                throw err;\n            }\n        }\n        finally {\n            host.shutdown();\n        }\n    });\n\n    it(\"should serialize Date, code, Map, Set, RegExp without a serializer\", function(done) {\n        doTest({\n            persistence: new MemoryPersistence(),\n            lazyPersistence: true,\n            serializer: null,\n            alwaysLoadState: false\n        }).nodeify(done);\n    });\n\n    it(\"should serialize Date, code, Map, Set, RegExp with a serializer\", function(done) {\n        doTest({\n            persistence: new MemoryPersistence(),\n            lazyPersistence: true,\n            serializer: new Serializer(),\n            alwaysLoadState: false\n        }).nodeify(done);\n    });\n});"],"file":"hosting/serializing.js","sourceRoot":"/source/"}